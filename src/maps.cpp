#include <maps.h>
const std::vector<std::pair<std::string, VkResult>> Result_map = {
  {"SUCCESS",  VK_SUCCESS},
  {"NOT READY",  VK_NOT_READY},
  {"TIMEOUT",  VK_TIMEOUT},
  {"EVENT SET",  VK_EVENT_SET},
  {"EVENT RESET",  VK_EVENT_RESET},
  {"INCOMPLETE",  VK_INCOMPLETE},
  {"ERROR OUT OF HOST MEMORY",  VK_ERROR_OUT_OF_HOST_MEMORY},
  {"ERROR OUT OF DEVICE MEMORY",  VK_ERROR_OUT_OF_DEVICE_MEMORY},
  {"ERROR INITIALIZATION FAILED",  VK_ERROR_INITIALIZATION_FAILED},
  {"ERROR DEVICE LOST",  VK_ERROR_DEVICE_LOST},
  {"ERROR MEMORY MAP FAILED",  VK_ERROR_MEMORY_MAP_FAILED},
  {"ERROR LAYER NOT PRESENT",  VK_ERROR_LAYER_NOT_PRESENT},
  {"ERROR EXTENSION NOT PRESENT",  VK_ERROR_EXTENSION_NOT_PRESENT},
  {"ERROR FEATURE NOT PRESENT",  VK_ERROR_FEATURE_NOT_PRESENT},
  {"ERROR INCOMPATIBLE DRIVER",  VK_ERROR_INCOMPATIBLE_DRIVER},
  {"ERROR TOO MANY OBJECTS",  VK_ERROR_TOO_MANY_OBJECTS},
  {"ERROR FORMAT NOT SUPPORTED",  VK_ERROR_FORMAT_NOT_SUPPORTED},
  {"ERROR FRAGMENTED POOL",  VK_ERROR_FRAGMENTED_POOL},
  {"ERROR UNKNOWN",  VK_ERROR_UNKNOWN},
  {"ERROR OUT OF POOL MEMORY",  VK_ERROR_OUT_OF_POOL_MEMORY},
  {"ERROR INVALID EXTERNAL HANDLE",  VK_ERROR_INVALID_EXTERNAL_HANDLE},
  {"ERROR FRAGMENTATION",  VK_ERROR_FRAGMENTATION},
  {"ERROR INVALID OPAQUE CAPTURE ADDRESS",  VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS},
  {"ERROR SURFACE LOST KHR",  VK_ERROR_SURFACE_LOST_KHR},
  {"ERROR NATIVE WINDOW IN USE KHR",  VK_ERROR_NATIVE_WINDOW_IN_USE_KHR},
  {"SUBOPTIMAL KHR",  VK_SUBOPTIMAL_KHR},
  {"ERROR OUT OF DATE KHR",  VK_ERROR_OUT_OF_DATE_KHR},
  {"ERROR INCOMPATIBLE DISPLAY KHR",  VK_ERROR_INCOMPATIBLE_DISPLAY_KHR},
  {"ERROR VALIDATION FAILED EXT",  VK_ERROR_VALIDATION_FAILED_EXT},
  {"ERROR INVALID SHADER NV",  VK_ERROR_INVALID_SHADER_NV},
  {"ERROR INVALID DRM FORMAT MODIFIER PLANE LAYOUT EXT",  VK_ERROR_INVALID_DRM_FORMAT_MODIFIER_PLANE_LAYOUT_EXT},
  {"ERROR NOT PERMITTED EXT",  VK_ERROR_NOT_PERMITTED_EXT},
  {"ERROR FULL SCREEN EXCLUSIVE MODE LOST EXT",  VK_ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT},
  {"THREAD IDLE KHR",  VK_THREAD_IDLE_KHR},
  {"THREAD DONE KHR",  VK_THREAD_DONE_KHR},
  {"OPERATION DEFERRED KHR",  VK_OPERATION_DEFERRED_KHR},
  {"OPERATION NOT DEFERRED KHR",  VK_OPERATION_NOT_DEFERRED_KHR},
  {"PIPELINE COMPILE REQUIRED EXT",  VK_PIPELINE_COMPILE_REQUIRED_EXT},
  {"ERROR OUT OF POOL MEMORY KHR",  VK_ERROR_OUT_OF_POOL_MEMORY_KHR},
  {"ERROR INVALID EXTERNAL HANDLE KHR",  VK_ERROR_INVALID_EXTERNAL_HANDLE_KHR},
  {"ERROR FRAGMENTATION EXT",  VK_ERROR_FRAGMENTATION_EXT},
  {"ERROR INVALID DEVICE ADDRESS EXT",  VK_ERROR_INVALID_DEVICE_ADDRESS_EXT},
  {"ERROR INVALID OPAQUE CAPTURE ADDRESS KHR",  VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS_KHR},
  {"ERROR PIPELINE COMPILE REQUIRED EXT",  VK_ERROR_PIPELINE_COMPILE_REQUIRED_EXT},
};
const std::vector<std::pair<std::string, VkStructureType>> StructureType_map = {
  {"STRUCTURE TYPE APPLICATION INFO",  VK_STRUCTURE_TYPE_APPLICATION_INFO},
  {"STRUCTURE TYPE INSTANCE CREATE INFO",  VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO},
  {"STRUCTURE TYPE DEVICE QUEUE CREATE INFO",  VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO},
  {"STRUCTURE TYPE DEVICE CREATE INFO",  VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO},
  {"STRUCTURE TYPE SUBMIT INFO",  VK_STRUCTURE_TYPE_SUBMIT_INFO},
  {"STRUCTURE TYPE MEMORY ALLOCATE INFO",  VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO},
  {"STRUCTURE TYPE MAPPED MEMORY RANGE",  VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE},
  {"STRUCTURE TYPE BIND SPARSE INFO",  VK_STRUCTURE_TYPE_BIND_SPARSE_INFO},
  {"STRUCTURE TYPE FENCE CREATE INFO",  VK_STRUCTURE_TYPE_FENCE_CREATE_INFO},
  {"STRUCTURE TYPE SEMAPHORE CREATE INFO",  VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO},
  {"STRUCTURE TYPE EVENT CREATE INFO",  VK_STRUCTURE_TYPE_EVENT_CREATE_INFO},
  {"STRUCTURE TYPE QUERY POOL CREATE INFO",  VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO},
  {"STRUCTURE TYPE BUFFER CREATE INFO",  VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO},
  {"STRUCTURE TYPE BUFFER VIEW CREATE INFO",  VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO},
  {"STRUCTURE TYPE IMAGE CREATE INFO",  VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO},
  {"STRUCTURE TYPE IMAGE VIEW CREATE INFO",  VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO},
  {"STRUCTURE TYPE SHADER MODULE CREATE INFO",  VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO},
  {"STRUCTURE TYPE PIPELINE CACHE CREATE INFO",  VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO},
  {"STRUCTURE TYPE PIPELINE SHADER STAGE CREATE INFO",  VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO},
  {"STRUCTURE TYPE PIPELINE VERTEX INPUT STATE CREATE INFO",  VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO},
  {"STRUCTURE TYPE PIPELINE INPUT ASSEMBLY STATE CREATE INFO",  VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO},
  {"STRUCTURE TYPE PIPELINE TESSELLATION STATE CREATE INFO",  VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO},
  {"STRUCTURE TYPE PIPELINE VIEWPORT STATE CREATE INFO",  VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO},
  {"STRUCTURE TYPE PIPELINE RASTERIZATION STATE CREATE INFO",  VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO},
  {"STRUCTURE TYPE PIPELINE MULTISAMPLE STATE CREATE INFO",  VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO},
  {"STRUCTURE TYPE PIPELINE DEPTH STENCIL STATE CREATE INFO",  VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO},
  {"STRUCTURE TYPE PIPELINE COLOR BLEND STATE CREATE INFO",  VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO},
  {"STRUCTURE TYPE PIPELINE DYNAMIC STATE CREATE INFO",  VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO},
  {"STRUCTURE TYPE GRAPHICS PIPELINE CREATE INFO",  VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO},
  {"STRUCTURE TYPE COMPUTE PIPELINE CREATE INFO",  VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO},
  {"STRUCTURE TYPE PIPELINE LAYOUT CREATE INFO",  VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO},
  {"STRUCTURE TYPE SAMPLER CREATE INFO",  VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO},
  {"STRUCTURE TYPE DESCRIPTOR SET LAYOUT CREATE INFO",  VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO},
  {"STRUCTURE TYPE DESCRIPTOR POOL CREATE INFO",  VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO},
  {"STRUCTURE TYPE DESCRIPTOR SET ALLOCATE INFO",  VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO},
  {"STRUCTURE TYPE WRITE DESCRIPTOR SET",  VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET},
  {"STRUCTURE TYPE COPY DESCRIPTOR SET",  VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET},
  {"STRUCTURE TYPE FRAMEBUFFER CREATE INFO",  VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO},
  {"STRUCTURE TYPE RENDER PASS CREATE INFO",  VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO},
  {"STRUCTURE TYPE COMMAND POOL CREATE INFO",  VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO},
  {"STRUCTURE TYPE COMMAND BUFFER ALLOCATE INFO",  VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO},
  {"STRUCTURE TYPE COMMAND BUFFER INHERITANCE INFO",  VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO},
  {"STRUCTURE TYPE COMMAND BUFFER BEGIN INFO",  VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO},
  {"STRUCTURE TYPE RENDER PASS BEGIN INFO",  VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO},
  {"STRUCTURE TYPE BUFFER MEMORY BARRIER",  VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER},
  {"STRUCTURE TYPE IMAGE MEMORY BARRIER",  VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER},
  {"STRUCTURE TYPE MEMORY BARRIER",  VK_STRUCTURE_TYPE_MEMORY_BARRIER},
  {"STRUCTURE TYPE LOADER INSTANCE CREATE INFO",  VK_STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO},
  {"STRUCTURE TYPE LOADER DEVICE CREATE INFO",  VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO},
  {"STRUCTURE TYPE PHYSICAL DEVICE SUBGROUP PROPERTIES",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES},
  {"STRUCTURE TYPE BIND BUFFER MEMORY INFO",  VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO},
  {"STRUCTURE TYPE BIND IMAGE MEMORY INFO",  VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO},
  {"STRUCTURE TYPE PHYSICAL DEVICE 16BIT STORAGE FEATURES",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES},
  {"STRUCTURE TYPE MEMORY DEDICATED REQUIREMENTS",  VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS},
  {"STRUCTURE TYPE MEMORY DEDICATED ALLOCATE INFO",  VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO},
  {"STRUCTURE TYPE MEMORY ALLOCATE FLAGS INFO",  VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO},
  {"STRUCTURE TYPE DEVICE GROUP RENDER PASS BEGIN INFO",  VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO},
  {"STRUCTURE TYPE DEVICE GROUP COMMAND BUFFER BEGIN INFO",  VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO},
  {"STRUCTURE TYPE DEVICE GROUP SUBMIT INFO",  VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO},
  {"STRUCTURE TYPE DEVICE GROUP BIND SPARSE INFO",  VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO},
  {"STRUCTURE TYPE BIND BUFFER MEMORY DEVICE GROUP INFO",  VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO},
  {"STRUCTURE TYPE BIND IMAGE MEMORY DEVICE GROUP INFO",  VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO},
  {"STRUCTURE TYPE PHYSICAL DEVICE GROUP PROPERTIES",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES},
  {"STRUCTURE TYPE DEVICE GROUP DEVICE CREATE INFO",  VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO},
  {"STRUCTURE TYPE BUFFER MEMORY REQUIREMENTS INFO 2",  VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2},
  {"STRUCTURE TYPE IMAGE MEMORY REQUIREMENTS INFO 2",  VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2},
  {"STRUCTURE TYPE IMAGE SPARSE MEMORY REQUIREMENTS INFO 2",  VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2},
  {"STRUCTURE TYPE MEMORY REQUIREMENTS 2",  VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2},
  {"STRUCTURE TYPE SPARSE IMAGE MEMORY REQUIREMENTS 2",  VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2},
  {"STRUCTURE TYPE PHYSICAL DEVICE FEATURES 2",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2},
  {"STRUCTURE TYPE PHYSICAL DEVICE PROPERTIES 2",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2},
  {"STRUCTURE TYPE FORMAT PROPERTIES 2",  VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2},
  {"STRUCTURE TYPE IMAGE FORMAT PROPERTIES 2",  VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2},
  {"STRUCTURE TYPE PHYSICAL DEVICE IMAGE FORMAT INFO 2",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2},
  {"STRUCTURE TYPE QUEUE FAMILY PROPERTIES 2",  VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2},
  {"STRUCTURE TYPE PHYSICAL DEVICE MEMORY PROPERTIES 2",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2},
  {"STRUCTURE TYPE SPARSE IMAGE FORMAT PROPERTIES 2",  VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2},
  {"STRUCTURE TYPE PHYSICAL DEVICE SPARSE IMAGE FORMAT INFO 2",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2},
  {"STRUCTURE TYPE PHYSICAL DEVICE POINT CLIPPING PROPERTIES",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES},
  {"STRUCTURE TYPE RENDER PASS INPUT ATTACHMENT ASPECT CREATE INFO",  VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO},
  {"STRUCTURE TYPE IMAGE VIEW USAGE CREATE INFO",  VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO},
  {"STRUCTURE TYPE PIPELINE TESSELLATION DOMAIN ORIGIN STATE CREATE INFO",  VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO},
  {"STRUCTURE TYPE RENDER PASS MULTIVIEW CREATE INFO",  VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO},
  {"STRUCTURE TYPE PHYSICAL DEVICE MULTIVIEW FEATURES",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES},
  {"STRUCTURE TYPE PHYSICAL DEVICE MULTIVIEW PROPERTIES",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES},
  {"STRUCTURE TYPE PHYSICAL DEVICE VARIABLE POINTERS FEATURES",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES},
  {"STRUCTURE TYPE PROTECTED SUBMIT INFO",  VK_STRUCTURE_TYPE_PROTECTED_SUBMIT_INFO},
  {"STRUCTURE TYPE PHYSICAL DEVICE PROTECTED MEMORY FEATURES",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES},
  {"STRUCTURE TYPE PHYSICAL DEVICE PROTECTED MEMORY PROPERTIES",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES},
  {"STRUCTURE TYPE DEVICE QUEUE INFO 2",  VK_STRUCTURE_TYPE_DEVICE_QUEUE_INFO_2},
  {"STRUCTURE TYPE SAMPLER YCBCR CONVERSION CREATE INFO",  VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO},
  {"STRUCTURE TYPE SAMPLER YCBCR CONVERSION INFO",  VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO},
  {"STRUCTURE TYPE BIND IMAGE PLANE MEMORY INFO",  VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO},
  {"STRUCTURE TYPE IMAGE PLANE MEMORY REQUIREMENTS INFO",  VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO},
  {"STRUCTURE TYPE PHYSICAL DEVICE SAMPLER YCBCR CONVERSION FEATURES",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES},
  {"STRUCTURE TYPE SAMPLER YCBCR CONVERSION IMAGE FORMAT PROPERTIES",  VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES},
  {"STRUCTURE TYPE DESCRIPTOR UPDATE TEMPLATE CREATE INFO",  VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO},
  {"STRUCTURE TYPE PHYSICAL DEVICE EXTERNAL IMAGE FORMAT INFO",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO},
  {"STRUCTURE TYPE EXTERNAL IMAGE FORMAT PROPERTIES",  VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES},
  {"STRUCTURE TYPE PHYSICAL DEVICE EXTERNAL BUFFER INFO",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO},
  {"STRUCTURE TYPE EXTERNAL BUFFER PROPERTIES",  VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES},
  {"STRUCTURE TYPE PHYSICAL DEVICE ID PROPERTIES",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES},
  {"STRUCTURE TYPE EXTERNAL MEMORY BUFFER CREATE INFO",  VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO},
  {"STRUCTURE TYPE EXTERNAL MEMORY IMAGE CREATE INFO",  VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO},
  {"STRUCTURE TYPE EXPORT MEMORY ALLOCATE INFO",  VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO},
  {"STRUCTURE TYPE PHYSICAL DEVICE EXTERNAL FENCE INFO",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO},
  {"STRUCTURE TYPE EXTERNAL FENCE PROPERTIES",  VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES},
  {"STRUCTURE TYPE EXPORT FENCE CREATE INFO",  VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO},
  {"STRUCTURE TYPE EXPORT SEMAPHORE CREATE INFO",  VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO},
  {"STRUCTURE TYPE PHYSICAL DEVICE EXTERNAL SEMAPHORE INFO",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO},
  {"STRUCTURE TYPE EXTERNAL SEMAPHORE PROPERTIES",  VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES},
  {"STRUCTURE TYPE PHYSICAL DEVICE MAINTENANCE 3 PROPERTIES",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES},
  {"STRUCTURE TYPE DESCRIPTOR SET LAYOUT SUPPORT",  VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT},
  {"STRUCTURE TYPE PHYSICAL DEVICE SHADER DRAW PARAMETERS FEATURES",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES},
  {"STRUCTURE TYPE PHYSICAL DEVICE VULKAN 1 1 FEATURES",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_FEATURES},
  {"STRUCTURE TYPE PHYSICAL DEVICE VULKAN 1 1 PROPERTIES",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_PROPERTIES},
  {"STRUCTURE TYPE PHYSICAL DEVICE VULKAN 1 2 FEATURES",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_FEATURES},
  {"STRUCTURE TYPE PHYSICAL DEVICE VULKAN 1 2 PROPERTIES",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_PROPERTIES},
  {"STRUCTURE TYPE IMAGE FORMAT LIST CREATE INFO",  VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO},
  {"STRUCTURE TYPE ATTACHMENT DESCRIPTION 2",  VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2},
  {"STRUCTURE TYPE ATTACHMENT REFERENCE 2",  VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2},
  {"STRUCTURE TYPE SUBPASS DESCRIPTION 2",  VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2},
  {"STRUCTURE TYPE SUBPASS DEPENDENCY 2",  VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2},
  {"STRUCTURE TYPE RENDER PASS CREATE INFO 2",  VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2},
  {"STRUCTURE TYPE SUBPASS BEGIN INFO",  VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO},
  {"STRUCTURE TYPE SUBPASS END INFO",  VK_STRUCTURE_TYPE_SUBPASS_END_INFO},
  {"STRUCTURE TYPE PHYSICAL DEVICE 8BIT STORAGE FEATURES",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES},
  {"STRUCTURE TYPE PHYSICAL DEVICE DRIVER PROPERTIES",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES},
  {"STRUCTURE TYPE PHYSICAL DEVICE SHADER ATOMIC INT64 FEATURES",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES},
  {"STRUCTURE TYPE PHYSICAL DEVICE SHADER FLOAT16 INT8 FEATURES",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES},
  {"STRUCTURE TYPE PHYSICAL DEVICE FLOAT CONTROLS PROPERTIES",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES},
  {"STRUCTURE TYPE DESCRIPTOR SET LAYOUT BINDING FLAGS CREATE INFO",  VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO},
  {"STRUCTURE TYPE PHYSICAL DEVICE DESCRIPTOR INDEXING FEATURES",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES},
  {"STRUCTURE TYPE PHYSICAL DEVICE DESCRIPTOR INDEXING PROPERTIES",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES},
  {"STRUCTURE TYPE DESCRIPTOR SET VARIABLE DESCRIPTOR COUNT ALLOCATE INFO",  VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO},
  {"STRUCTURE TYPE DESCRIPTOR SET VARIABLE DESCRIPTOR COUNT LAYOUT SUPPORT",  VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT},
  {"STRUCTURE TYPE PHYSICAL DEVICE DEPTH STENCIL RESOLVE PROPERTIES",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES},
  {"STRUCTURE TYPE SUBPASS DESCRIPTION DEPTH STENCIL RESOLVE",  VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE},
  {"STRUCTURE TYPE PHYSICAL DEVICE SCALAR BLOCK LAYOUT FEATURES",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES},
  {"STRUCTURE TYPE IMAGE STENCIL USAGE CREATE INFO",  VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO},
  {"STRUCTURE TYPE PHYSICAL DEVICE SAMPLER FILTER MINMAX PROPERTIES",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES},
  {"STRUCTURE TYPE SAMPLER REDUCTION MODE CREATE INFO",  VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO},
  {"STRUCTURE TYPE PHYSICAL DEVICE VULKAN MEMORY MODEL FEATURES",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES},
  {"STRUCTURE TYPE PHYSICAL DEVICE IMAGELESS FRAMEBUFFER FEATURES",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES},
  {"STRUCTURE TYPE FRAMEBUFFER ATTACHMENTS CREATE INFO",  VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO},
  {"STRUCTURE TYPE FRAMEBUFFER ATTACHMENT IMAGE INFO",  VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO},
  {"STRUCTURE TYPE RENDER PASS ATTACHMENT BEGIN INFO",  VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO},
  {"STRUCTURE TYPE PHYSICAL DEVICE UNIFORM BUFFER STANDARD LAYOUT FEATURES",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES},
  {"STRUCTURE TYPE PHYSICAL DEVICE SHADER SUBGROUP EXTENDED TYPES FEATURES",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES},
  {"STRUCTURE TYPE PHYSICAL DEVICE SEPARATE DEPTH STENCIL LAYOUTS FEATURES",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES},
  {"STRUCTURE TYPE ATTACHMENT REFERENCE STENCIL LAYOUT",  VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT},
  {"STRUCTURE TYPE ATTACHMENT DESCRIPTION STENCIL LAYOUT",  VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT},
  {"STRUCTURE TYPE PHYSICAL DEVICE HOST QUERY RESET FEATURES",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES},
  {"STRUCTURE TYPE PHYSICAL DEVICE TIMELINE SEMAPHORE FEATURES",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES},
  {"STRUCTURE TYPE PHYSICAL DEVICE TIMELINE SEMAPHORE PROPERTIES",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES},
  {"STRUCTURE TYPE SEMAPHORE TYPE CREATE INFO",  VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO},
  {"STRUCTURE TYPE TIMELINE SEMAPHORE SUBMIT INFO",  VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO},
  {"STRUCTURE TYPE SEMAPHORE WAIT INFO",  VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO},
  {"STRUCTURE TYPE SEMAPHORE SIGNAL INFO",  VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO},
  {"STRUCTURE TYPE PHYSICAL DEVICE BUFFER DEVICE ADDRESS FEATURES",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES},
  {"STRUCTURE TYPE BUFFER DEVICE ADDRESS INFO",  VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO},
  {"STRUCTURE TYPE BUFFER OPAQUE CAPTURE ADDRESS CREATE INFO",  VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO},
  {"STRUCTURE TYPE MEMORY OPAQUE CAPTURE ADDRESS ALLOCATE INFO",  VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO},
  {"STRUCTURE TYPE DEVICE MEMORY OPAQUE CAPTURE ADDRESS INFO",  VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO},
  {"STRUCTURE TYPE SWAPCHAIN CREATE INFO KHR",  VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR},
  {"STRUCTURE TYPE PRESENT INFO KHR",  VK_STRUCTURE_TYPE_PRESENT_INFO_KHR},
  {"STRUCTURE TYPE DEVICE GROUP PRESENT CAPABILITIES KHR",  VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHR},
  {"STRUCTURE TYPE IMAGE SWAPCHAIN CREATE INFO KHR",  VK_STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHR},
  {"STRUCTURE TYPE BIND IMAGE MEMORY SWAPCHAIN INFO KHR",  VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR},
  {"STRUCTURE TYPE ACQUIRE NEXT IMAGE INFO KHR",  VK_STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR},
  {"STRUCTURE TYPE DEVICE GROUP PRESENT INFO KHR",  VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHR},
  {"STRUCTURE TYPE DEVICE GROUP SWAPCHAIN CREATE INFO KHR",  VK_STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR},
  {"STRUCTURE TYPE DISPLAY MODE CREATE INFO KHR",  VK_STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR},
  {"STRUCTURE TYPE DISPLAY SURFACE CREATE INFO KHR",  VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR},
  {"STRUCTURE TYPE DISPLAY PRESENT INFO KHR",  VK_STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR},
  {"STRUCTURE TYPE XLIB SURFACE CREATE INFO KHR",  VK_STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR},
  {"STRUCTURE TYPE XCB SURFACE CREATE INFO KHR",  VK_STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR},
  {"STRUCTURE TYPE WAYLAND SURFACE CREATE INFO KHR",  VK_STRUCTURE_TYPE_WAYLAND_SURFACE_CREATE_INFO_KHR},
  {"STRUCTURE TYPE ANDROID SURFACE CREATE INFO KHR",  VK_STRUCTURE_TYPE_ANDROID_SURFACE_CREATE_INFO_KHR},
  {"STRUCTURE TYPE WIN32 SURFACE CREATE INFO KHR",  VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR},
  {"STRUCTURE TYPE DEBUG REPORT CALLBACK CREATE INFO EXT",  VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT},
  {"STRUCTURE TYPE PIPELINE RASTERIZATION STATE RASTERIZATION ORDER AMD",  VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD},
  {"STRUCTURE TYPE DEBUG MARKER OBJECT NAME INFO EXT",  VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_NAME_INFO_EXT},
  {"STRUCTURE TYPE DEBUG MARKER OBJECT TAG INFO EXT",  VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_TAG_INFO_EXT},
  {"STRUCTURE TYPE DEBUG MARKER MARKER INFO EXT",  VK_STRUCTURE_TYPE_DEBUG_MARKER_MARKER_INFO_EXT},
  {"STRUCTURE TYPE DEDICATED ALLOCATION IMAGE CREATE INFO NV",  VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV},
  {"STRUCTURE TYPE DEDICATED ALLOCATION BUFFER CREATE INFO NV",  VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV},
  {"STRUCTURE TYPE DEDICATED ALLOCATION MEMORY ALLOCATE INFO NV",  VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV},
  {"STRUCTURE TYPE PHYSICAL DEVICE TRANSFORM FEEDBACK FEATURES EXT",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_FEATURES_EXT},
  {"STRUCTURE TYPE PHYSICAL DEVICE TRANSFORM FEEDBACK PROPERTIES EXT",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_PROPERTIES_EXT},
  {"STRUCTURE TYPE PIPELINE RASTERIZATION STATE STREAM CREATE INFO EXT",  VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_STREAM_CREATE_INFO_EXT},
  {"STRUCTURE TYPE IMAGE VIEW HANDLE INFO NVX",  VK_STRUCTURE_TYPE_IMAGE_VIEW_HANDLE_INFO_NVX},
  {"STRUCTURE TYPE IMAGE VIEW ADDRESS PROPERTIES NVX",  VK_STRUCTURE_TYPE_IMAGE_VIEW_ADDRESS_PROPERTIES_NVX},
  {"STRUCTURE TYPE TEXTURE LOD GATHER FORMAT PROPERTIES AMD",  VK_STRUCTURE_TYPE_TEXTURE_LOD_GATHER_FORMAT_PROPERTIES_AMD},
  {"STRUCTURE TYPE STREAM DESCRIPTOR SURFACE CREATE INFO GGP",  VK_STRUCTURE_TYPE_STREAM_DESCRIPTOR_SURFACE_CREATE_INFO_GGP},
  {"STRUCTURE TYPE PHYSICAL DEVICE CORNER SAMPLED IMAGE FEATURES NV",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CORNER_SAMPLED_IMAGE_FEATURES_NV},
  {"STRUCTURE TYPE EXTERNAL MEMORY IMAGE CREATE INFO NV",  VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_NV},
  {"STRUCTURE TYPE EXPORT MEMORY ALLOCATE INFO NV",  VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_NV},
  {"STRUCTURE TYPE IMPORT MEMORY WIN32 HANDLE INFO NV",  VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_NV},
  {"STRUCTURE TYPE EXPORT MEMORY WIN32 HANDLE INFO NV",  VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_NV},
  {"STRUCTURE TYPE WIN32 KEYED MUTEX ACQUIRE RELEASE INFO NV",  VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_NV},
  {"STRUCTURE TYPE VALIDATION FLAGS EXT",  VK_STRUCTURE_TYPE_VALIDATION_FLAGS_EXT},
  {"STRUCTURE TYPE VI SURFACE CREATE INFO NN",  VK_STRUCTURE_TYPE_VI_SURFACE_CREATE_INFO_NN},
  {"STRUCTURE TYPE PHYSICAL DEVICE TEXTURE COMPRESSION ASTC HDR FEATURES EXT",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES_EXT},
  {"STRUCTURE TYPE IMAGE VIEW ASTC DECODE MODE EXT",  VK_STRUCTURE_TYPE_IMAGE_VIEW_ASTC_DECODE_MODE_EXT},
  {"STRUCTURE TYPE PHYSICAL DEVICE ASTC DECODE FEATURES EXT",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ASTC_DECODE_FEATURES_EXT},
  {"STRUCTURE TYPE IMPORT MEMORY WIN32 HANDLE INFO KHR",  VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_KHR},
  {"STRUCTURE TYPE EXPORT MEMORY WIN32 HANDLE INFO KHR",  VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_KHR},
  {"STRUCTURE TYPE MEMORY WIN32 HANDLE PROPERTIES KHR",  VK_STRUCTURE_TYPE_MEMORY_WIN32_HANDLE_PROPERTIES_KHR},
  {"STRUCTURE TYPE MEMORY GET WIN32 HANDLE INFO KHR",  VK_STRUCTURE_TYPE_MEMORY_GET_WIN32_HANDLE_INFO_KHR},
  {"STRUCTURE TYPE IMPORT MEMORY FD INFO KHR",  VK_STRUCTURE_TYPE_IMPORT_MEMORY_FD_INFO_KHR},
  {"STRUCTURE TYPE MEMORY FD PROPERTIES KHR",  VK_STRUCTURE_TYPE_MEMORY_FD_PROPERTIES_KHR},
  {"STRUCTURE TYPE MEMORY GET FD INFO KHR",  VK_STRUCTURE_TYPE_MEMORY_GET_FD_INFO_KHR},
  {"STRUCTURE TYPE WIN32 KEYED MUTEX ACQUIRE RELEASE INFO KHR",  VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_KHR},
  {"STRUCTURE TYPE IMPORT SEMAPHORE WIN32 HANDLE INFO KHR",  VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR},
  {"STRUCTURE TYPE EXPORT SEMAPHORE WIN32 HANDLE INFO KHR",  VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR},
  {"STRUCTURE TYPE D3D12 FENCE SUBMIT INFO KHR",  VK_STRUCTURE_TYPE_D3D12_FENCE_SUBMIT_INFO_KHR},
  {"STRUCTURE TYPE SEMAPHORE GET WIN32 HANDLE INFO KHR",  VK_STRUCTURE_TYPE_SEMAPHORE_GET_WIN32_HANDLE_INFO_KHR},
  {"STRUCTURE TYPE IMPORT SEMAPHORE FD INFO KHR",  VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_FD_INFO_KHR},
  {"STRUCTURE TYPE SEMAPHORE GET FD INFO KHR",  VK_STRUCTURE_TYPE_SEMAPHORE_GET_FD_INFO_KHR},
  {"STRUCTURE TYPE PHYSICAL DEVICE PUSH DESCRIPTOR PROPERTIES KHR",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES_KHR},
  {"STRUCTURE TYPE COMMAND BUFFER INHERITANCE CONDITIONAL RENDERING INFO EXT",  VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_CONDITIONAL_RENDERING_INFO_EXT},
  {"STRUCTURE TYPE PHYSICAL DEVICE CONDITIONAL RENDERING FEATURES EXT",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONDITIONAL_RENDERING_FEATURES_EXT},
  {"STRUCTURE TYPE CONDITIONAL RENDERING BEGIN INFO EXT",  VK_STRUCTURE_TYPE_CONDITIONAL_RENDERING_BEGIN_INFO_EXT},
  {"STRUCTURE TYPE PRESENT REGIONS KHR",  VK_STRUCTURE_TYPE_PRESENT_REGIONS_KHR},
  {"STRUCTURE TYPE PIPELINE VIEWPORT W SCALING STATE CREATE INFO NV",  VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_W_SCALING_STATE_CREATE_INFO_NV},
  {"STRUCTURE TYPE SURFACE CAPABILITIES 2 EXT",  VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT},
  {"STRUCTURE TYPE DISPLAY POWER INFO EXT",  VK_STRUCTURE_TYPE_DISPLAY_POWER_INFO_EXT},
  {"STRUCTURE TYPE DEVICE EVENT INFO EXT",  VK_STRUCTURE_TYPE_DEVICE_EVENT_INFO_EXT},
  {"STRUCTURE TYPE DISPLAY EVENT INFO EXT",  VK_STRUCTURE_TYPE_DISPLAY_EVENT_INFO_EXT},
  {"STRUCTURE TYPE SWAPCHAIN COUNTER CREATE INFO EXT",  VK_STRUCTURE_TYPE_SWAPCHAIN_COUNTER_CREATE_INFO_EXT},
  {"STRUCTURE TYPE PRESENT TIMES INFO GOOGLE",  VK_STRUCTURE_TYPE_PRESENT_TIMES_INFO_GOOGLE},
  {"STRUCTURE TYPE PHYSICAL DEVICE MULTIVIEW PER VIEW ATTRIBUTES PROPERTIES NVX",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_ATTRIBUTES_PROPERTIES_NVX},
  {"STRUCTURE TYPE PIPELINE VIEWPORT SWIZZLE STATE CREATE INFO NV",  VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SWIZZLE_STATE_CREATE_INFO_NV},
  {"STRUCTURE TYPE PHYSICAL DEVICE DISCARD RECTANGLE PROPERTIES EXT",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DISCARD_RECTANGLE_PROPERTIES_EXT},
  {"STRUCTURE TYPE PIPELINE DISCARD RECTANGLE STATE CREATE INFO EXT",  VK_STRUCTURE_TYPE_PIPELINE_DISCARD_RECTANGLE_STATE_CREATE_INFO_EXT},
  {"STRUCTURE TYPE PHYSICAL DEVICE CONSERVATIVE RASTERIZATION PROPERTIES EXT",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONSERVATIVE_RASTERIZATION_PROPERTIES_EXT},
  {"STRUCTURE TYPE PIPELINE RASTERIZATION CONSERVATIVE STATE CREATE INFO EXT",  VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_CONSERVATIVE_STATE_CREATE_INFO_EXT},
  {"STRUCTURE TYPE PHYSICAL DEVICE DEPTH CLIP ENABLE FEATURES EXT",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_ENABLE_FEATURES_EXT},
  {"STRUCTURE TYPE PIPELINE RASTERIZATION DEPTH CLIP STATE CREATE INFO EXT",  VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_DEPTH_CLIP_STATE_CREATE_INFO_EXT},
  {"STRUCTURE TYPE HDR METADATA EXT",  VK_STRUCTURE_TYPE_HDR_METADATA_EXT},
  {"STRUCTURE TYPE SHARED PRESENT SURFACE CAPABILITIES KHR",  VK_STRUCTURE_TYPE_SHARED_PRESENT_SURFACE_CAPABILITIES_KHR},
  {"STRUCTURE TYPE IMPORT FENCE WIN32 HANDLE INFO KHR",  VK_STRUCTURE_TYPE_IMPORT_FENCE_WIN32_HANDLE_INFO_KHR},
  {"STRUCTURE TYPE EXPORT FENCE WIN32 HANDLE INFO KHR",  VK_STRUCTURE_TYPE_EXPORT_FENCE_WIN32_HANDLE_INFO_KHR},
  {"STRUCTURE TYPE FENCE GET WIN32 HANDLE INFO KHR",  VK_STRUCTURE_TYPE_FENCE_GET_WIN32_HANDLE_INFO_KHR},
  {"STRUCTURE TYPE IMPORT FENCE FD INFO KHR",  VK_STRUCTURE_TYPE_IMPORT_FENCE_FD_INFO_KHR},
  {"STRUCTURE TYPE FENCE GET FD INFO KHR",  VK_STRUCTURE_TYPE_FENCE_GET_FD_INFO_KHR},
  {"STRUCTURE TYPE PHYSICAL DEVICE PERFORMANCE QUERY FEATURES KHR",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_FEATURES_KHR},
  {"STRUCTURE TYPE PHYSICAL DEVICE PERFORMANCE QUERY PROPERTIES KHR",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_PROPERTIES_KHR},
  {"STRUCTURE TYPE QUERY POOL PERFORMANCE CREATE INFO KHR",  VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_CREATE_INFO_KHR},
  {"STRUCTURE TYPE PERFORMANCE QUERY SUBMIT INFO KHR",  VK_STRUCTURE_TYPE_PERFORMANCE_QUERY_SUBMIT_INFO_KHR},
  {"STRUCTURE TYPE ACQUIRE PROFILING LOCK INFO KHR",  VK_STRUCTURE_TYPE_ACQUIRE_PROFILING_LOCK_INFO_KHR},
  {"STRUCTURE TYPE PERFORMANCE COUNTER KHR",  VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_KHR},
  {"STRUCTURE TYPE PERFORMANCE COUNTER DESCRIPTION KHR",  VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_DESCRIPTION_KHR},
  {"STRUCTURE TYPE PHYSICAL DEVICE SURFACE INFO 2 KHR",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR},
  {"STRUCTURE TYPE SURFACE CAPABILITIES 2 KHR",  VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_KHR},
  {"STRUCTURE TYPE SURFACE FORMAT 2 KHR",  VK_STRUCTURE_TYPE_SURFACE_FORMAT_2_KHR},
  {"STRUCTURE TYPE DISPLAY PROPERTIES 2 KHR",  VK_STRUCTURE_TYPE_DISPLAY_PROPERTIES_2_KHR},
  {"STRUCTURE TYPE DISPLAY PLANE PROPERTIES 2 KHR",  VK_STRUCTURE_TYPE_DISPLAY_PLANE_PROPERTIES_2_KHR},
  {"STRUCTURE TYPE DISPLAY MODE PROPERTIES 2 KHR",  VK_STRUCTURE_TYPE_DISPLAY_MODE_PROPERTIES_2_KHR},
  {"STRUCTURE TYPE DISPLAY PLANE INFO 2 KHR",  VK_STRUCTURE_TYPE_DISPLAY_PLANE_INFO_2_KHR},
  {"STRUCTURE TYPE DISPLAY PLANE CAPABILITIES 2 KHR",  VK_STRUCTURE_TYPE_DISPLAY_PLANE_CAPABILITIES_2_KHR},
  {"STRUCTURE TYPE IOS SURFACE CREATE INFO MVK",  VK_STRUCTURE_TYPE_IOS_SURFACE_CREATE_INFO_MVK},
  {"STRUCTURE TYPE MACOS SURFACE CREATE INFO MVK",  VK_STRUCTURE_TYPE_MACOS_SURFACE_CREATE_INFO_MVK},
  {"STRUCTURE TYPE DEBUG UTILS OBJECT NAME INFO EXT",  VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT},
  {"STRUCTURE TYPE DEBUG UTILS OBJECT TAG INFO EXT",  VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_TAG_INFO_EXT},
  {"STRUCTURE TYPE DEBUG UTILS LABEL EXT",  VK_STRUCTURE_TYPE_DEBUG_UTILS_LABEL_EXT},
  {"STRUCTURE TYPE DEBUG UTILS MESSENGER CALLBACK DATA EXT",  VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT},
  {"STRUCTURE TYPE DEBUG UTILS MESSENGER CREATE INFO EXT",  VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT},
  {"STRUCTURE TYPE ANDROID HARDWARE BUFFER USAGE ANDROID",  VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_USAGE_ANDROID},
  {"STRUCTURE TYPE ANDROID HARDWARE BUFFER PROPERTIES ANDROID",  VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_PROPERTIES_ANDROID},
  {"STRUCTURE TYPE ANDROID HARDWARE BUFFER FORMAT PROPERTIES ANDROID",  VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_ANDROID},
  {"STRUCTURE TYPE IMPORT ANDROID HARDWARE BUFFER INFO ANDROID",  VK_STRUCTURE_TYPE_IMPORT_ANDROID_HARDWARE_BUFFER_INFO_ANDROID},
  {"STRUCTURE TYPE MEMORY GET ANDROID HARDWARE BUFFER INFO ANDROID",  VK_STRUCTURE_TYPE_MEMORY_GET_ANDROID_HARDWARE_BUFFER_INFO_ANDROID},
  {"STRUCTURE TYPE EXTERNAL FORMAT ANDROID",  VK_STRUCTURE_TYPE_EXTERNAL_FORMAT_ANDROID},
  {"STRUCTURE TYPE PHYSICAL DEVICE INLINE UNIFORM BLOCK FEATURES EXT",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES_EXT},
  {"STRUCTURE TYPE PHYSICAL DEVICE INLINE UNIFORM BLOCK PROPERTIES EXT",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES_EXT},
  {"STRUCTURE TYPE WRITE DESCRIPTOR SET INLINE UNIFORM BLOCK EXT",  VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK_EXT},
  {"STRUCTURE TYPE DESCRIPTOR POOL INLINE UNIFORM BLOCK CREATE INFO EXT",  VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO_EXT},
  {"STRUCTURE TYPE SAMPLE LOCATIONS INFO EXT",  VK_STRUCTURE_TYPE_SAMPLE_LOCATIONS_INFO_EXT},
  {"STRUCTURE TYPE RENDER PASS SAMPLE LOCATIONS BEGIN INFO EXT",  VK_STRUCTURE_TYPE_RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT},
  {"STRUCTURE TYPE PIPELINE SAMPLE LOCATIONS STATE CREATE INFO EXT",  VK_STRUCTURE_TYPE_PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT},
  {"STRUCTURE TYPE PHYSICAL DEVICE SAMPLE LOCATIONS PROPERTIES EXT",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_EXT},
  {"STRUCTURE TYPE MULTISAMPLE PROPERTIES EXT",  VK_STRUCTURE_TYPE_MULTISAMPLE_PROPERTIES_EXT},
  {"STRUCTURE TYPE PHYSICAL DEVICE BLEND OPERATION ADVANCED FEATURES EXT",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT},
  {"STRUCTURE TYPE PHYSICAL DEVICE BLEND OPERATION ADVANCED PROPERTIES EXT",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_PROPERTIES_EXT},
  {"STRUCTURE TYPE PIPELINE COLOR BLEND ADVANCED STATE CREATE INFO EXT",  VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_ADVANCED_STATE_CREATE_INFO_EXT},
  {"STRUCTURE TYPE PIPELINE COVERAGE TO COLOR STATE CREATE INFO NV",  VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_TO_COLOR_STATE_CREATE_INFO_NV},
  {"STRUCTURE TYPE WRITE DESCRIPTOR SET ACCELERATION STRUCTURE KHR",  VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_KHR},
  {"STRUCTURE TYPE ACCELERATION STRUCTURE BUILD GEOMETRY INFO KHR",  VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_GEOMETRY_INFO_KHR},
  {"STRUCTURE TYPE ACCELERATION STRUCTURE DEVICE ADDRESS INFO KHR",  VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_DEVICE_ADDRESS_INFO_KHR},
  {"STRUCTURE TYPE ACCELERATION STRUCTURE GEOMETRY AABBS DATA KHR",  VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_AABBS_DATA_KHR},
  {"STRUCTURE TYPE ACCELERATION STRUCTURE GEOMETRY INSTANCES DATA KHR",  VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_INSTANCES_DATA_KHR},
  {"STRUCTURE TYPE ACCELERATION STRUCTURE GEOMETRY TRIANGLES DATA KHR",  VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_TRIANGLES_DATA_KHR},
  {"STRUCTURE TYPE ACCELERATION STRUCTURE GEOMETRY KHR",  VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_KHR},
  {"STRUCTURE TYPE ACCELERATION STRUCTURE VERSION INFO KHR",  VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_VERSION_INFO_KHR},
  {"STRUCTURE TYPE COPY ACCELERATION STRUCTURE INFO KHR",  VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_INFO_KHR},
  {"STRUCTURE TYPE COPY ACCELERATION STRUCTURE TO MEMORY INFO KHR",  VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_TO_MEMORY_INFO_KHR},
  {"STRUCTURE TYPE COPY MEMORY TO ACCELERATION STRUCTURE INFO KHR",  VK_STRUCTURE_TYPE_COPY_MEMORY_TO_ACCELERATION_STRUCTURE_INFO_KHR},
  {"STRUCTURE TYPE PHYSICAL DEVICE ACCELERATION STRUCTURE FEATURES KHR",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_FEATURES_KHR},
  {"STRUCTURE TYPE PHYSICAL DEVICE ACCELERATION STRUCTURE PROPERTIES KHR",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_PROPERTIES_KHR},
  {"STRUCTURE TYPE ACCELERATION STRUCTURE CREATE INFO KHR",  VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_KHR},
  {"STRUCTURE TYPE ACCELERATION STRUCTURE BUILD SIZES INFO KHR",  VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_SIZES_INFO_KHR},
  {"STRUCTURE TYPE PHYSICAL DEVICE RAY TRACING PIPELINE FEATURES KHR",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_FEATURES_KHR},
  {"STRUCTURE TYPE PHYSICAL DEVICE RAY TRACING PIPELINE PROPERTIES KHR",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_PROPERTIES_KHR},
  {"STRUCTURE TYPE RAY TRACING PIPELINE CREATE INFO KHR",  VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_KHR},
  {"STRUCTURE TYPE RAY TRACING SHADER GROUP CREATE INFO KHR",  VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_KHR},
  {"STRUCTURE TYPE RAY TRACING PIPELINE INTERFACE CREATE INFO KHR",  VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_INTERFACE_CREATE_INFO_KHR},
  {"STRUCTURE TYPE PHYSICAL DEVICE RAY QUERY FEATURES KHR",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_QUERY_FEATURES_KHR},
  {"STRUCTURE TYPE PIPELINE COVERAGE MODULATION STATE CREATE INFO NV",  VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_MODULATION_STATE_CREATE_INFO_NV},
  {"STRUCTURE TYPE PHYSICAL DEVICE SHADER SM BUILTINS FEATURES NV",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_FEATURES_NV},
  {"STRUCTURE TYPE PHYSICAL DEVICE SHADER SM BUILTINS PROPERTIES NV",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_PROPERTIES_NV},
  {"STRUCTURE TYPE DRM FORMAT MODIFIER PROPERTIES LIST EXT",  VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_EXT},
  {"STRUCTURE TYPE PHYSICAL DEVICE IMAGE DRM FORMAT MODIFIER INFO EXT",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_DRM_FORMAT_MODIFIER_INFO_EXT},
  {"STRUCTURE TYPE IMAGE DRM FORMAT MODIFIER LIST CREATE INFO EXT",  VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_LIST_CREATE_INFO_EXT},
  {"STRUCTURE TYPE IMAGE DRM FORMAT MODIFIER EXPLICIT CREATE INFO EXT",  VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_EXPLICIT_CREATE_INFO_EXT},
  {"STRUCTURE TYPE IMAGE DRM FORMAT MODIFIER PROPERTIES EXT",  VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT},
  {"STRUCTURE TYPE VALIDATION CACHE CREATE INFO EXT",  VK_STRUCTURE_TYPE_VALIDATION_CACHE_CREATE_INFO_EXT},
  {"STRUCTURE TYPE SHADER MODULE VALIDATION CACHE CREATE INFO EXT",  VK_STRUCTURE_TYPE_SHADER_MODULE_VALIDATION_CACHE_CREATE_INFO_EXT},
  {"STRUCTURE TYPE PHYSICAL DEVICE PORTABILITY SUBSET FEATURES KHR",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PORTABILITY_SUBSET_FEATURES_KHR},
  {"STRUCTURE TYPE PHYSICAL DEVICE PORTABILITY SUBSET PROPERTIES KHR",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PORTABILITY_SUBSET_PROPERTIES_KHR},
  {"STRUCTURE TYPE PIPELINE VIEWPORT SHADING RATE IMAGE STATE CREATE INFO NV",  VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SHADING_RATE_IMAGE_STATE_CREATE_INFO_NV},
  {"STRUCTURE TYPE PHYSICAL DEVICE SHADING RATE IMAGE FEATURES NV",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_FEATURES_NV},
  {"STRUCTURE TYPE PHYSICAL DEVICE SHADING RATE IMAGE PROPERTIES NV",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_PROPERTIES_NV},
  {"STRUCTURE TYPE PIPELINE VIEWPORT COARSE SAMPLE ORDER STATE CREATE INFO NV",  VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_COARSE_SAMPLE_ORDER_STATE_CREATE_INFO_NV},
  {"STRUCTURE TYPE RAY TRACING PIPELINE CREATE INFO NV",  VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_NV},
  {"STRUCTURE TYPE ACCELERATION STRUCTURE CREATE INFO NV",  VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_NV},
  {"STRUCTURE TYPE GEOMETRY NV",  VK_STRUCTURE_TYPE_GEOMETRY_NV},
  {"STRUCTURE TYPE GEOMETRY TRIANGLES NV",  VK_STRUCTURE_TYPE_GEOMETRY_TRIANGLES_NV},
  {"STRUCTURE TYPE GEOMETRY AABB NV",  VK_STRUCTURE_TYPE_GEOMETRY_AABB_NV},
  {"STRUCTURE TYPE BIND ACCELERATION STRUCTURE MEMORY INFO NV",  VK_STRUCTURE_TYPE_BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_NV},
  {"STRUCTURE TYPE WRITE DESCRIPTOR SET ACCELERATION STRUCTURE NV",  VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_NV},
  {"STRUCTURE TYPE ACCELERATION STRUCTURE MEMORY REQUIREMENTS INFO NV",  VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_NV},
  {"STRUCTURE TYPE PHYSICAL DEVICE RAY TRACING PROPERTIES NV",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PROPERTIES_NV},
  {"STRUCTURE TYPE RAY TRACING SHADER GROUP CREATE INFO NV",  VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_NV},
  {"STRUCTURE TYPE ACCELERATION STRUCTURE INFO NV",  VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_INFO_NV},
  {"STRUCTURE TYPE PHYSICAL DEVICE REPRESENTATIVE FRAGMENT TEST FEATURES NV",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_REPRESENTATIVE_FRAGMENT_TEST_FEATURES_NV},
  {"STRUCTURE TYPE PIPELINE REPRESENTATIVE FRAGMENT TEST STATE CREATE INFO NV",  VK_STRUCTURE_TYPE_PIPELINE_REPRESENTATIVE_FRAGMENT_TEST_STATE_CREATE_INFO_NV},
  {"STRUCTURE TYPE PHYSICAL DEVICE IMAGE VIEW IMAGE FORMAT INFO EXT",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_IMAGE_FORMAT_INFO_EXT},
  {"STRUCTURE TYPE FILTER CUBIC IMAGE VIEW IMAGE FORMAT PROPERTIES EXT",  VK_STRUCTURE_TYPE_FILTER_CUBIC_IMAGE_VIEW_IMAGE_FORMAT_PROPERTIES_EXT},
  {"STRUCTURE TYPE DEVICE QUEUE GLOBAL PRIORITY CREATE INFO EXT",  VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_EXT},
  {"STRUCTURE TYPE IMPORT MEMORY HOST POINTER INFO EXT",  VK_STRUCTURE_TYPE_IMPORT_MEMORY_HOST_POINTER_INFO_EXT},
  {"STRUCTURE TYPE MEMORY HOST POINTER PROPERTIES EXT",  VK_STRUCTURE_TYPE_MEMORY_HOST_POINTER_PROPERTIES_EXT},
  {"STRUCTURE TYPE PHYSICAL DEVICE EXTERNAL MEMORY HOST PROPERTIES EXT",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_HOST_PROPERTIES_EXT},
  {"STRUCTURE TYPE PHYSICAL DEVICE SHADER CLOCK FEATURES KHR",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CLOCK_FEATURES_KHR},
  {"STRUCTURE TYPE PIPELINE COMPILER CONTROL CREATE INFO AMD",  VK_STRUCTURE_TYPE_PIPELINE_COMPILER_CONTROL_CREATE_INFO_AMD},
  {"STRUCTURE TYPE CALIBRATED TIMESTAMP INFO EXT",  VK_STRUCTURE_TYPE_CALIBRATED_TIMESTAMP_INFO_EXT},
  {"STRUCTURE TYPE PHYSICAL DEVICE SHADER CORE PROPERTIES AMD",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_AMD},
  {"STRUCTURE TYPE DEVICE MEMORY OVERALLOCATION CREATE INFO AMD",  VK_STRUCTURE_TYPE_DEVICE_MEMORY_OVERALLOCATION_CREATE_INFO_AMD},
  {"STRUCTURE TYPE PHYSICAL DEVICE VERTEX ATTRIBUTE DIVISOR PROPERTIES EXT",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_EXT},
  {"STRUCTURE TYPE PIPELINE VERTEX INPUT DIVISOR STATE CREATE INFO EXT",  VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_EXT},
  {"STRUCTURE TYPE PHYSICAL DEVICE VERTEX ATTRIBUTE DIVISOR FEATURES EXT",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_EXT},
  {"STRUCTURE TYPE PRESENT FRAME TOKEN GGP",  VK_STRUCTURE_TYPE_PRESENT_FRAME_TOKEN_GGP},
  {"STRUCTURE TYPE PIPELINE CREATION FEEDBACK CREATE INFO EXT",  VK_STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO_EXT},
  {"STRUCTURE TYPE PHYSICAL DEVICE COMPUTE SHADER DERIVATIVES FEATURES NV",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_NV},
  {"STRUCTURE TYPE PHYSICAL DEVICE MESH SHADER FEATURES NV",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_NV},
  {"STRUCTURE TYPE PHYSICAL DEVICE MESH SHADER PROPERTIES NV",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_NV},
  {"STRUCTURE TYPE PHYSICAL DEVICE FRAGMENT SHADER BARYCENTRIC FEATURES NV",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_NV},
  {"STRUCTURE TYPE PHYSICAL DEVICE SHADER IMAGE FOOTPRINT FEATURES NV",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_FOOTPRINT_FEATURES_NV},
  {"STRUCTURE TYPE PIPELINE VIEWPORT EXCLUSIVE SCISSOR STATE CREATE INFO NV",  VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_EXCLUSIVE_SCISSOR_STATE_CREATE_INFO_NV},
  {"STRUCTURE TYPE PHYSICAL DEVICE EXCLUSIVE SCISSOR FEATURES NV",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXCLUSIVE_SCISSOR_FEATURES_NV},
  {"STRUCTURE TYPE CHECKPOINT DATA NV",  VK_STRUCTURE_TYPE_CHECKPOINT_DATA_NV},
  {"STRUCTURE TYPE QUEUE FAMILY CHECKPOINT PROPERTIES NV",  VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_NV},
  {"STRUCTURE TYPE PHYSICAL DEVICE SHADER INTEGER FUNCTIONS 2 FEATURES INTEL",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_FUNCTIONS_2_FEATURES_INTEL},
  {"STRUCTURE TYPE QUERY POOL PERFORMANCE QUERY CREATE INFO INTEL",  VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_QUERY_CREATE_INFO_INTEL},
  {"STRUCTURE TYPE INITIALIZE PERFORMANCE API INFO INTEL",  VK_STRUCTURE_TYPE_INITIALIZE_PERFORMANCE_API_INFO_INTEL},
  {"STRUCTURE TYPE PERFORMANCE MARKER INFO INTEL",  VK_STRUCTURE_TYPE_PERFORMANCE_MARKER_INFO_INTEL},
  {"STRUCTURE TYPE PERFORMANCE STREAM MARKER INFO INTEL",  VK_STRUCTURE_TYPE_PERFORMANCE_STREAM_MARKER_INFO_INTEL},
  {"STRUCTURE TYPE PERFORMANCE OVERRIDE INFO INTEL",  VK_STRUCTURE_TYPE_PERFORMANCE_OVERRIDE_INFO_INTEL},
  {"STRUCTURE TYPE PERFORMANCE CONFIGURATION ACQUIRE INFO INTEL",  VK_STRUCTURE_TYPE_PERFORMANCE_CONFIGURATION_ACQUIRE_INFO_INTEL},
  {"STRUCTURE TYPE PHYSICAL DEVICE PCI BUS INFO PROPERTIES EXT",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PCI_BUS_INFO_PROPERTIES_EXT},
  {"STRUCTURE TYPE DISPLAY NATIVE HDR SURFACE CAPABILITIES AMD",  VK_STRUCTURE_TYPE_DISPLAY_NATIVE_HDR_SURFACE_CAPABILITIES_AMD},
  {"STRUCTURE TYPE SWAPCHAIN DISPLAY NATIVE HDR CREATE INFO AMD",  VK_STRUCTURE_TYPE_SWAPCHAIN_DISPLAY_NATIVE_HDR_CREATE_INFO_AMD},
  {"STRUCTURE TYPE IMAGEPIPE SURFACE CREATE INFO FUCHSIA",  VK_STRUCTURE_TYPE_IMAGEPIPE_SURFACE_CREATE_INFO_FUCHSIA},
  {"STRUCTURE TYPE PHYSICAL DEVICE SHADER TERMINATE INVOCATION FEATURES KHR",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES_KHR},
  {"STRUCTURE TYPE METAL SURFACE CREATE INFO EXT",  VK_STRUCTURE_TYPE_METAL_SURFACE_CREATE_INFO_EXT},
  {"STRUCTURE TYPE PHYSICAL DEVICE FRAGMENT DENSITY MAP FEATURES EXT",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_FEATURES_EXT},
  {"STRUCTURE TYPE PHYSICAL DEVICE FRAGMENT DENSITY MAP PROPERTIES EXT",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_PROPERTIES_EXT},
  {"STRUCTURE TYPE RENDER PASS FRAGMENT DENSITY MAP CREATE INFO EXT",  VK_STRUCTURE_TYPE_RENDER_PASS_FRAGMENT_DENSITY_MAP_CREATE_INFO_EXT},
  {"STRUCTURE TYPE PHYSICAL DEVICE SUBGROUP SIZE CONTROL PROPERTIES EXT",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES_EXT},
  {"STRUCTURE TYPE PIPELINE SHADER STAGE REQUIRED SUBGROUP SIZE CREATE INFO EXT",  VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO_EXT},
  {"STRUCTURE TYPE PHYSICAL DEVICE SUBGROUP SIZE CONTROL FEATURES EXT",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES_EXT},
  {"STRUCTURE TYPE FRAGMENT SHADING RATE ATTACHMENT INFO KHR",  VK_STRUCTURE_TYPE_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR},
  {"STRUCTURE TYPE PIPELINE FRAGMENT SHADING RATE STATE CREATE INFO KHR",  VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_STATE_CREATE_INFO_KHR},
  {"STRUCTURE TYPE PHYSICAL DEVICE FRAGMENT SHADING RATE PROPERTIES KHR",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_PROPERTIES_KHR},
  {"STRUCTURE TYPE PHYSICAL DEVICE FRAGMENT SHADING RATE FEATURES KHR",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_FEATURES_KHR},
  {"STRUCTURE TYPE PHYSICAL DEVICE FRAGMENT SHADING RATE KHR",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_KHR},
  {"STRUCTURE TYPE PHYSICAL DEVICE SHADER CORE PROPERTIES 2 AMD",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_2_AMD},
  {"STRUCTURE TYPE PHYSICAL DEVICE COHERENT MEMORY FEATURES AMD",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COHERENT_MEMORY_FEATURES_AMD},
  {"STRUCTURE TYPE PHYSICAL DEVICE SHADER IMAGE ATOMIC INT64 FEATURES EXT",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_ATOMIC_INT64_FEATURES_EXT},
  {"STRUCTURE TYPE PHYSICAL DEVICE MEMORY BUDGET PROPERTIES EXT",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_BUDGET_PROPERTIES_EXT},
  {"STRUCTURE TYPE PHYSICAL DEVICE MEMORY PRIORITY FEATURES EXT",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PRIORITY_FEATURES_EXT},
  {"STRUCTURE TYPE MEMORY PRIORITY ALLOCATE INFO EXT",  VK_STRUCTURE_TYPE_MEMORY_PRIORITY_ALLOCATE_INFO_EXT},
  {"STRUCTURE TYPE SURFACE PROTECTED CAPABILITIES KHR",  VK_STRUCTURE_TYPE_SURFACE_PROTECTED_CAPABILITIES_KHR},
  {"STRUCTURE TYPE PHYSICAL DEVICE DEDICATED ALLOCATION IMAGE ALIASING FEATURES NV",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEDICATED_ALLOCATION_IMAGE_ALIASING_FEATURES_NV},
  {"STRUCTURE TYPE PHYSICAL DEVICE BUFFER DEVICE ADDRESS FEATURES EXT",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT},
  {"STRUCTURE TYPE BUFFER DEVICE ADDRESS CREATE INFO EXT",  VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_CREATE_INFO_EXT},
  {"STRUCTURE TYPE PHYSICAL DEVICE TOOL PROPERTIES EXT",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES_EXT},
  {"STRUCTURE TYPE VALIDATION FEATURES EXT",  VK_STRUCTURE_TYPE_VALIDATION_FEATURES_EXT},
  {"STRUCTURE TYPE PHYSICAL DEVICE COOPERATIVE MATRIX FEATURES NV",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_NV},
  {"STRUCTURE TYPE COOPERATIVE MATRIX PROPERTIES NV",  VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_NV},
  {"STRUCTURE TYPE PHYSICAL DEVICE COOPERATIVE MATRIX PROPERTIES NV",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_NV},
  {"STRUCTURE TYPE PHYSICAL DEVICE COVERAGE REDUCTION MODE FEATURES NV",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COVERAGE_REDUCTION_MODE_FEATURES_NV},
  {"STRUCTURE TYPE PIPELINE COVERAGE REDUCTION STATE CREATE INFO NV",  VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_REDUCTION_STATE_CREATE_INFO_NV},
  {"STRUCTURE TYPE FRAMEBUFFER MIXED SAMPLES COMBINATION NV",  VK_STRUCTURE_TYPE_FRAMEBUFFER_MIXED_SAMPLES_COMBINATION_NV},
  {"STRUCTURE TYPE PHYSICAL DEVICE FRAGMENT SHADER INTERLOCK FEATURES EXT",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_INTERLOCK_FEATURES_EXT},
  {"STRUCTURE TYPE PHYSICAL DEVICE YCBCR IMAGE ARRAYS FEATURES EXT",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_IMAGE_ARRAYS_FEATURES_EXT},
  {"STRUCTURE TYPE SURFACE FULL SCREEN EXCLUSIVE INFO EXT",  VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_INFO_EXT},
  {"STRUCTURE TYPE SURFACE CAPABILITIES FULL SCREEN EXCLUSIVE EXT",  VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_FULL_SCREEN_EXCLUSIVE_EXT},
  {"STRUCTURE TYPE SURFACE FULL SCREEN EXCLUSIVE WIN32 INFO EXT",  VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_WIN32_INFO_EXT},
  {"STRUCTURE TYPE HEADLESS SURFACE CREATE INFO EXT",  VK_STRUCTURE_TYPE_HEADLESS_SURFACE_CREATE_INFO_EXT},
  {"STRUCTURE TYPE PHYSICAL DEVICE LINE RASTERIZATION FEATURES EXT",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_EXT},
  {"STRUCTURE TYPE PIPELINE RASTERIZATION LINE STATE CREATE INFO EXT",  VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO_EXT},
  {"STRUCTURE TYPE PHYSICAL DEVICE LINE RASTERIZATION PROPERTIES EXT",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES_EXT},
  {"STRUCTURE TYPE PHYSICAL DEVICE SHADER ATOMIC FLOAT FEATURES EXT",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_FEATURES_EXT},
  {"STRUCTURE TYPE PHYSICAL DEVICE INDEX TYPE UINT8 FEATURES EXT",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES_EXT},
  {"STRUCTURE TYPE PHYSICAL DEVICE EXTENDED DYNAMIC STATE FEATURES EXT",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_FEATURES_EXT},
  {"STRUCTURE TYPE PHYSICAL DEVICE PIPELINE EXECUTABLE PROPERTIES FEATURES KHR",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_EXECUTABLE_PROPERTIES_FEATURES_KHR},
  {"STRUCTURE TYPE PIPELINE INFO KHR",  VK_STRUCTURE_TYPE_PIPELINE_INFO_KHR},
  {"STRUCTURE TYPE PIPELINE EXECUTABLE PROPERTIES KHR",  VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_PROPERTIES_KHR},
  {"STRUCTURE TYPE PIPELINE EXECUTABLE INFO KHR",  VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INFO_KHR},
  {"STRUCTURE TYPE PIPELINE EXECUTABLE STATISTIC KHR",  VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_STATISTIC_KHR},
  {"STRUCTURE TYPE PIPELINE EXECUTABLE INTERNAL REPRESENTATION KHR",  VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INTERNAL_REPRESENTATION_KHR},
  {"STRUCTURE TYPE PHYSICAL DEVICE SHADER DEMOTE TO HELPER INVOCATION FEATURES EXT",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES_EXT},
  {"STRUCTURE TYPE PHYSICAL DEVICE DEVICE GENERATED COMMANDS PROPERTIES NV",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_PROPERTIES_NV},
  {"STRUCTURE TYPE GRAPHICS SHADER GROUP CREATE INFO NV",  VK_STRUCTURE_TYPE_GRAPHICS_SHADER_GROUP_CREATE_INFO_NV},
  {"STRUCTURE TYPE GRAPHICS PIPELINE SHADER GROUPS CREATE INFO NV",  VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_SHADER_GROUPS_CREATE_INFO_NV},
  {"STRUCTURE TYPE INDIRECT COMMANDS LAYOUT TOKEN NV",  VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_TOKEN_NV},
  {"STRUCTURE TYPE INDIRECT COMMANDS LAYOUT CREATE INFO NV",  VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NV},
  {"STRUCTURE TYPE GENERATED COMMANDS INFO NV",  VK_STRUCTURE_TYPE_GENERATED_COMMANDS_INFO_NV},
  {"STRUCTURE TYPE GENERATED COMMANDS MEMORY REQUIREMENTS INFO NV",  VK_STRUCTURE_TYPE_GENERATED_COMMANDS_MEMORY_REQUIREMENTS_INFO_NV},
  {"STRUCTURE TYPE PHYSICAL DEVICE DEVICE GENERATED COMMANDS FEATURES NV",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_FEATURES_NV},
  {"STRUCTURE TYPE PHYSICAL DEVICE TEXEL BUFFER ALIGNMENT FEATURES EXT",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_FEATURES_EXT},
  {"STRUCTURE TYPE PHYSICAL DEVICE TEXEL BUFFER ALIGNMENT PROPERTIES EXT",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES_EXT},
  {"STRUCTURE TYPE COMMAND BUFFER INHERITANCE RENDER PASS TRANSFORM INFO QCOM",  VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDER_PASS_TRANSFORM_INFO_QCOM},
  {"STRUCTURE TYPE RENDER PASS TRANSFORM BEGIN INFO QCOM",  VK_STRUCTURE_TYPE_RENDER_PASS_TRANSFORM_BEGIN_INFO_QCOM},
  {"STRUCTURE TYPE PHYSICAL DEVICE DEVICE MEMORY REPORT FEATURES EXT",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_MEMORY_REPORT_FEATURES_EXT},
  {"STRUCTURE TYPE DEVICE DEVICE MEMORY REPORT CREATE INFO EXT",  VK_STRUCTURE_TYPE_DEVICE_DEVICE_MEMORY_REPORT_CREATE_INFO_EXT},
  {"STRUCTURE TYPE DEVICE MEMORY REPORT CALLBACK DATA EXT",  VK_STRUCTURE_TYPE_DEVICE_MEMORY_REPORT_CALLBACK_DATA_EXT},
  {"STRUCTURE TYPE PHYSICAL DEVICE ROBUSTNESS 2 FEATURES EXT",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_FEATURES_EXT},
  {"STRUCTURE TYPE PHYSICAL DEVICE ROBUSTNESS 2 PROPERTIES EXT",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_PROPERTIES_EXT},
  {"STRUCTURE TYPE SAMPLER CUSTOM BORDER COLOR CREATE INFO EXT",  VK_STRUCTURE_TYPE_SAMPLER_CUSTOM_BORDER_COLOR_CREATE_INFO_EXT},
  {"STRUCTURE TYPE PHYSICAL DEVICE CUSTOM BORDER COLOR PROPERTIES EXT",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_PROPERTIES_EXT},
  {"STRUCTURE TYPE PHYSICAL DEVICE CUSTOM BORDER COLOR FEATURES EXT",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_FEATURES_EXT},
  {"STRUCTURE TYPE PIPELINE LIBRARY CREATE INFO KHR",  VK_STRUCTURE_TYPE_PIPELINE_LIBRARY_CREATE_INFO_KHR},
  {"STRUCTURE TYPE PHYSICAL DEVICE PRIVATE DATA FEATURES EXT",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES_EXT},
  {"STRUCTURE TYPE DEVICE PRIVATE DATA CREATE INFO EXT",  VK_STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO_EXT},
  {"STRUCTURE TYPE PRIVATE DATA SLOT CREATE INFO EXT",  VK_STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO_EXT},
  {"STRUCTURE TYPE PHYSICAL DEVICE PIPELINE CREATION CACHE CONTROL FEATURES EXT",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES_EXT},
  {"STRUCTURE TYPE PHYSICAL DEVICE DIAGNOSTICS CONFIG FEATURES NV",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DIAGNOSTICS_CONFIG_FEATURES_NV},
  {"STRUCTURE TYPE DEVICE DIAGNOSTICS CONFIG CREATE INFO NV",  VK_STRUCTURE_TYPE_DEVICE_DIAGNOSTICS_CONFIG_CREATE_INFO_NV},
  {"STRUCTURE TYPE PHYSICAL DEVICE FRAGMENT SHADING RATE ENUMS PROPERTIES NV",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_PROPERTIES_NV},
  {"STRUCTURE TYPE PHYSICAL DEVICE FRAGMENT SHADING RATE ENUMS FEATURES NV",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_FEATURES_NV},
  {"STRUCTURE TYPE PIPELINE FRAGMENT SHADING RATE ENUM STATE CREATE INFO NV",  VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_ENUM_STATE_CREATE_INFO_NV},
  {"STRUCTURE TYPE PHYSICAL DEVICE FRAGMENT DENSITY MAP 2 FEATURES EXT",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_FEATURES_EXT},
  {"STRUCTURE TYPE PHYSICAL DEVICE FRAGMENT DENSITY MAP 2 PROPERTIES EXT",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_PROPERTIES_EXT},
  {"STRUCTURE TYPE COPY COMMAND TRANSFORM INFO QCOM",  VK_STRUCTURE_TYPE_COPY_COMMAND_TRANSFORM_INFO_QCOM},
  {"STRUCTURE TYPE PHYSICAL DEVICE IMAGE ROBUSTNESS FEATURES EXT",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES_EXT},
  {"STRUCTURE TYPE COPY BUFFER INFO 2 KHR",  VK_STRUCTURE_TYPE_COPY_BUFFER_INFO_2_KHR},
  {"STRUCTURE TYPE COPY IMAGE INFO 2 KHR",  VK_STRUCTURE_TYPE_COPY_IMAGE_INFO_2_KHR},
  {"STRUCTURE TYPE COPY BUFFER TO IMAGE INFO 2 KHR",  VK_STRUCTURE_TYPE_COPY_BUFFER_TO_IMAGE_INFO_2_KHR},
  {"STRUCTURE TYPE COPY IMAGE TO BUFFER INFO 2 KHR",  VK_STRUCTURE_TYPE_COPY_IMAGE_TO_BUFFER_INFO_2_KHR},
  {"STRUCTURE TYPE BLIT IMAGE INFO 2 KHR",  VK_STRUCTURE_TYPE_BLIT_IMAGE_INFO_2_KHR},
  {"STRUCTURE TYPE RESOLVE IMAGE INFO 2 KHR",  VK_STRUCTURE_TYPE_RESOLVE_IMAGE_INFO_2_KHR},
  {"STRUCTURE TYPE BUFFER COPY 2 KHR",  VK_STRUCTURE_TYPE_BUFFER_COPY_2_KHR},
  {"STRUCTURE TYPE IMAGE COPY 2 KHR",  VK_STRUCTURE_TYPE_IMAGE_COPY_2_KHR},
  {"STRUCTURE TYPE IMAGE BLIT 2 KHR",  VK_STRUCTURE_TYPE_IMAGE_BLIT_2_KHR},
  {"STRUCTURE TYPE BUFFER IMAGE COPY 2 KHR",  VK_STRUCTURE_TYPE_BUFFER_IMAGE_COPY_2_KHR},
  {"STRUCTURE TYPE IMAGE RESOLVE 2 KHR",  VK_STRUCTURE_TYPE_IMAGE_RESOLVE_2_KHR},
  {"STRUCTURE TYPE PHYSICAL DEVICE 4444 FORMATS FEATURES EXT",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_4444_FORMATS_FEATURES_EXT},
  {"STRUCTURE TYPE DIRECTFB SURFACE CREATE INFO EXT",  VK_STRUCTURE_TYPE_DIRECTFB_SURFACE_CREATE_INFO_EXT},
  {"STRUCTURE TYPE PHYSICAL DEVICE VARIABLE POINTER FEATURES",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES},
  {"STRUCTURE TYPE PHYSICAL DEVICE SHADER DRAW PARAMETER FEATURES",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETER_FEATURES},
  {"STRUCTURE TYPE DEBUG REPORT CREATE INFO EXT",  VK_STRUCTURE_TYPE_DEBUG_REPORT_CREATE_INFO_EXT},
  {"STRUCTURE TYPE RENDER PASS MULTIVIEW CREATE INFO KHR",  VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO_KHR},
  {"STRUCTURE TYPE PHYSICAL DEVICE MULTIVIEW FEATURES KHR",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES_KHR},
  {"STRUCTURE TYPE PHYSICAL DEVICE MULTIVIEW PROPERTIES KHR",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES_KHR},
  {"STRUCTURE TYPE PHYSICAL DEVICE FEATURES 2 KHR",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2_KHR},
  {"STRUCTURE TYPE PHYSICAL DEVICE PROPERTIES 2 KHR",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2_KHR},
  {"STRUCTURE TYPE FORMAT PROPERTIES 2 KHR",  VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2_KHR},
  {"STRUCTURE TYPE IMAGE FORMAT PROPERTIES 2 KHR",  VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2_KHR},
  {"STRUCTURE TYPE PHYSICAL DEVICE IMAGE FORMAT INFO 2 KHR",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2_KHR},
  {"STRUCTURE TYPE QUEUE FAMILY PROPERTIES 2 KHR",  VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2_KHR},
  {"STRUCTURE TYPE PHYSICAL DEVICE MEMORY PROPERTIES 2 KHR",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2_KHR},
  {"STRUCTURE TYPE SPARSE IMAGE FORMAT PROPERTIES 2 KHR",  VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2_KHR},
  {"STRUCTURE TYPE PHYSICAL DEVICE SPARSE IMAGE FORMAT INFO 2 KHR",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2_KHR},
  {"STRUCTURE TYPE MEMORY ALLOCATE FLAGS INFO KHR",  VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO_KHR},
  {"STRUCTURE TYPE DEVICE GROUP RENDER PASS BEGIN INFO KHR",  VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO_KHR},
  {"STRUCTURE TYPE DEVICE GROUP COMMAND BUFFER BEGIN INFO KHR",  VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO_KHR},
  {"STRUCTURE TYPE DEVICE GROUP SUBMIT INFO KHR",  VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO_KHR},
  {"STRUCTURE TYPE DEVICE GROUP BIND SPARSE INFO KHR",  VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO_KHR},
  {"STRUCTURE TYPE BIND BUFFER MEMORY DEVICE GROUP INFO KHR",  VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO_KHR},
  {"STRUCTURE TYPE BIND IMAGE MEMORY DEVICE GROUP INFO KHR",  VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO_KHR},
  {"STRUCTURE TYPE PHYSICAL DEVICE GROUP PROPERTIES KHR",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES_KHR},
  {"STRUCTURE TYPE DEVICE GROUP DEVICE CREATE INFO KHR",  VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO_KHR},
  {"STRUCTURE TYPE PHYSICAL DEVICE EXTERNAL IMAGE FORMAT INFO KHR",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO_KHR},
  {"STRUCTURE TYPE EXTERNAL IMAGE FORMAT PROPERTIES KHR",  VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES_KHR},
  {"STRUCTURE TYPE PHYSICAL DEVICE EXTERNAL BUFFER INFO KHR",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO_KHR},
  {"STRUCTURE TYPE EXTERNAL BUFFER PROPERTIES KHR",  VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES_KHR},
  {"STRUCTURE TYPE PHYSICAL DEVICE ID PROPERTIES KHR",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES_KHR},
  {"STRUCTURE TYPE EXTERNAL MEMORY BUFFER CREATE INFO KHR",  VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO_KHR},
  {"STRUCTURE TYPE EXTERNAL MEMORY IMAGE CREATE INFO KHR",  VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_KHR},
  {"STRUCTURE TYPE EXPORT MEMORY ALLOCATE INFO KHR",  VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_KHR},
  {"STRUCTURE TYPE PHYSICAL DEVICE EXTERNAL SEMAPHORE INFO KHR",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO_KHR},
  {"STRUCTURE TYPE EXTERNAL SEMAPHORE PROPERTIES KHR",  VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES_KHR},
  {"STRUCTURE TYPE EXPORT SEMAPHORE CREATE INFO KHR",  VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO_KHR},
  {"STRUCTURE TYPE PHYSICAL DEVICE SHADER FLOAT16 INT8 FEATURES KHR",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES_KHR},
  {"STRUCTURE TYPE PHYSICAL DEVICE FLOAT16 INT8 FEATURES KHR",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT16_INT8_FEATURES_KHR},
  {"STRUCTURE TYPE PHYSICAL DEVICE 16BIT STORAGE FEATURES KHR",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES_KHR},
  {"STRUCTURE TYPE DESCRIPTOR UPDATE TEMPLATE CREATE INFO KHR",  VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO_KHR},
  {"STRUCTURE TYPE SURFACE CAPABILITIES2 EXT",  VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT},
  {"STRUCTURE TYPE PHYSICAL DEVICE IMAGELESS FRAMEBUFFER FEATURES KHR",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES_KHR},
  {"STRUCTURE TYPE FRAMEBUFFER ATTACHMENTS CREATE INFO KHR",  VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO_KHR},
  {"STRUCTURE TYPE FRAMEBUFFER ATTACHMENT IMAGE INFO KHR",  VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO_KHR},
  {"STRUCTURE TYPE RENDER PASS ATTACHMENT BEGIN INFO KHR",  VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO_KHR},
  {"STRUCTURE TYPE ATTACHMENT DESCRIPTION 2 KHR",  VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2_KHR},
  {"STRUCTURE TYPE ATTACHMENT REFERENCE 2 KHR",  VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2_KHR},
  {"STRUCTURE TYPE SUBPASS DESCRIPTION 2 KHR",  VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2_KHR},
  {"STRUCTURE TYPE SUBPASS DEPENDENCY 2 KHR",  VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2_KHR},
  {"STRUCTURE TYPE RENDER PASS CREATE INFO 2 KHR",  VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2_KHR},
  {"STRUCTURE TYPE SUBPASS BEGIN INFO KHR",  VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO_KHR},
  {"STRUCTURE TYPE SUBPASS END INFO KHR",  VK_STRUCTURE_TYPE_SUBPASS_END_INFO_KHR},
  {"STRUCTURE TYPE PHYSICAL DEVICE EXTERNAL FENCE INFO KHR",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO_KHR},
  {"STRUCTURE TYPE EXTERNAL FENCE PROPERTIES KHR",  VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES_KHR},
  {"STRUCTURE TYPE EXPORT FENCE CREATE INFO KHR",  VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO_KHR},
  {"STRUCTURE TYPE PHYSICAL DEVICE POINT CLIPPING PROPERTIES KHR",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES_KHR},
  {"STRUCTURE TYPE RENDER PASS INPUT ATTACHMENT ASPECT CREATE INFO KHR",  VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO_KHR},
  {"STRUCTURE TYPE IMAGE VIEW USAGE CREATE INFO KHR",  VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO_KHR},
  {"STRUCTURE TYPE PIPELINE TESSELLATION DOMAIN ORIGIN STATE CREATE INFO KHR",  VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO_KHR},
  {"STRUCTURE TYPE PHYSICAL DEVICE VARIABLE POINTERS FEATURES KHR",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES_KHR},
  {"STRUCTURE TYPE PHYSICAL DEVICE VARIABLE POINTER FEATURES KHR",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES_KHR},
  {"STRUCTURE TYPE MEMORY DEDICATED REQUIREMENTS KHR",  VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS_KHR},
  {"STRUCTURE TYPE MEMORY DEDICATED ALLOCATE INFO KHR",  VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO_KHR},
  {"STRUCTURE TYPE PHYSICAL DEVICE SAMPLER FILTER MINMAX PROPERTIES EXT",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES_EXT},
  {"STRUCTURE TYPE SAMPLER REDUCTION MODE CREATE INFO EXT",  VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO_EXT},
  {"STRUCTURE TYPE BUFFER MEMORY REQUIREMENTS INFO 2 KHR",  VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2_KHR},
  {"STRUCTURE TYPE IMAGE MEMORY REQUIREMENTS INFO 2 KHR",  VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2_KHR},
  {"STRUCTURE TYPE IMAGE SPARSE MEMORY REQUIREMENTS INFO 2 KHR",  VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2_KHR},
  {"STRUCTURE TYPE MEMORY REQUIREMENTS 2 KHR",  VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2_KHR},
  {"STRUCTURE TYPE SPARSE IMAGE MEMORY REQUIREMENTS 2 KHR",  VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2_KHR},
  {"STRUCTURE TYPE IMAGE FORMAT LIST CREATE INFO KHR",  VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO_KHR},
  {"STRUCTURE TYPE SAMPLER YCBCR CONVERSION CREATE INFO KHR",  VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO_KHR},
  {"STRUCTURE TYPE SAMPLER YCBCR CONVERSION INFO KHR",  VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO_KHR},
  {"STRUCTURE TYPE BIND IMAGE PLANE MEMORY INFO KHR",  VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO_KHR},
  {"STRUCTURE TYPE IMAGE PLANE MEMORY REQUIREMENTS INFO KHR",  VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO_KHR},
  {"STRUCTURE TYPE PHYSICAL DEVICE SAMPLER YCBCR CONVERSION FEATURES KHR",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES_KHR},
  {"STRUCTURE TYPE SAMPLER YCBCR CONVERSION IMAGE FORMAT PROPERTIES KHR",  VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES_KHR},
  {"STRUCTURE TYPE BIND BUFFER MEMORY INFO KHR",  VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO_KHR},
  {"STRUCTURE TYPE BIND IMAGE MEMORY INFO KHR",  VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO_KHR},
  {"STRUCTURE TYPE DESCRIPTOR SET LAYOUT BINDING FLAGS CREATE INFO EXT",  VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO_EXT},
  {"STRUCTURE TYPE PHYSICAL DEVICE DESCRIPTOR INDEXING FEATURES EXT",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES_EXT},
  {"STRUCTURE TYPE PHYSICAL DEVICE DESCRIPTOR INDEXING PROPERTIES EXT",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES_EXT},
  {"STRUCTURE TYPE DESCRIPTOR SET VARIABLE DESCRIPTOR COUNT ALLOCATE INFO EXT",  VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO_EXT},
  {"STRUCTURE TYPE DESCRIPTOR SET VARIABLE DESCRIPTOR COUNT LAYOUT SUPPORT EXT",  VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT_EXT},
  {"STRUCTURE TYPE PHYSICAL DEVICE MAINTENANCE 3 PROPERTIES KHR",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES_KHR},
  {"STRUCTURE TYPE DESCRIPTOR SET LAYOUT SUPPORT KHR",  VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT_KHR},
  {"STRUCTURE TYPE PHYSICAL DEVICE SHADER SUBGROUP EXTENDED TYPES FEATURES KHR",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES_KHR},
  {"STRUCTURE TYPE PHYSICAL DEVICE 8BIT STORAGE FEATURES KHR",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES_KHR},
  {"STRUCTURE TYPE PHYSICAL DEVICE SHADER ATOMIC INT64 FEATURES KHR",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES_KHR},
  {"STRUCTURE TYPE PHYSICAL DEVICE DRIVER PROPERTIES KHR",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES_KHR},
  {"STRUCTURE TYPE PHYSICAL DEVICE FLOAT CONTROLS PROPERTIES KHR",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES_KHR},
  {"STRUCTURE TYPE PHYSICAL DEVICE DEPTH STENCIL RESOLVE PROPERTIES KHR",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES_KHR},
  {"STRUCTURE TYPE SUBPASS DESCRIPTION DEPTH STENCIL RESOLVE KHR",  VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE_KHR},
  {"STRUCTURE TYPE PHYSICAL DEVICE TIMELINE SEMAPHORE FEATURES KHR",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES_KHR},
  {"STRUCTURE TYPE PHYSICAL DEVICE TIMELINE SEMAPHORE PROPERTIES KHR",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES_KHR},
  {"STRUCTURE TYPE SEMAPHORE TYPE CREATE INFO KHR",  VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO_KHR},
  {"STRUCTURE TYPE TIMELINE SEMAPHORE SUBMIT INFO KHR",  VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO_KHR},
  {"STRUCTURE TYPE SEMAPHORE WAIT INFO KHR",  VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO_KHR},
  {"STRUCTURE TYPE SEMAPHORE SIGNAL INFO KHR",  VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO_KHR},
  {"STRUCTURE TYPE QUERY POOL CREATE INFO INTEL",  VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL},
  {"STRUCTURE TYPE PHYSICAL DEVICE VULKAN MEMORY MODEL FEATURES KHR",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES_KHR},
  {"STRUCTURE TYPE PHYSICAL DEVICE SCALAR BLOCK LAYOUT FEATURES EXT",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES_EXT},
  {"STRUCTURE TYPE PHYSICAL DEVICE SEPARATE DEPTH STENCIL LAYOUTS FEATURES KHR",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES_KHR},
  {"STRUCTURE TYPE ATTACHMENT REFERENCE STENCIL LAYOUT KHR",  VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT_KHR},
  {"STRUCTURE TYPE ATTACHMENT DESCRIPTION STENCIL LAYOUT KHR",  VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT_KHR},
  {"STRUCTURE TYPE PHYSICAL DEVICE BUFFER ADDRESS FEATURES EXT",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_ADDRESS_FEATURES_EXT},
  {"STRUCTURE TYPE BUFFER DEVICE ADDRESS INFO EXT",  VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO_EXT},
  {"STRUCTURE TYPE IMAGE STENCIL USAGE CREATE INFO EXT",  VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO_EXT},
  {"STRUCTURE TYPE PHYSICAL DEVICE UNIFORM BUFFER STANDARD LAYOUT FEATURES KHR",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES_KHR},
  {"STRUCTURE TYPE PHYSICAL DEVICE BUFFER DEVICE ADDRESS FEATURES KHR",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_KHR},
  {"STRUCTURE TYPE BUFFER DEVICE ADDRESS INFO KHR",  VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO_KHR},
  {"STRUCTURE TYPE BUFFER OPAQUE CAPTURE ADDRESS CREATE INFO KHR",  VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO_KHR},
  {"STRUCTURE TYPE MEMORY OPAQUE CAPTURE ADDRESS ALLOCATE INFO KHR",  VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO_KHR},
  {"STRUCTURE TYPE DEVICE MEMORY OPAQUE CAPTURE ADDRESS INFO KHR",  VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO_KHR},
  {"STRUCTURE TYPE PHYSICAL DEVICE HOST QUERY RESET FEATURES EXT",  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES_EXT},
};
const std::vector<std::pair<std::string, VkImageLayout>> ImageLayout_map = {
  {"IMAGE LAYOUT UNDEFINED",  VK_IMAGE_LAYOUT_UNDEFINED},
  {"IMAGE LAYOUT GENERAL",  VK_IMAGE_LAYOUT_GENERAL},
  {"IMAGE LAYOUT COLOR ATTACHMENT OPTIMAL",  VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL},
  {"IMAGE LAYOUT DEPTH STENCIL ATTACHMENT OPTIMAL",  VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL},
  {"IMAGE LAYOUT DEPTH STENCIL READ ONLY OPTIMAL",  VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL},
  {"IMAGE LAYOUT SHADER READ ONLY OPTIMAL",  VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL},
  {"IMAGE LAYOUT TRANSFER SRC OPTIMAL",  VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL},
  {"IMAGE LAYOUT TRANSFER DST OPTIMAL",  VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL},
  {"IMAGE LAYOUT PREINITIALIZED",  VK_IMAGE_LAYOUT_PREINITIALIZED},
  {"IMAGE LAYOUT DEPTH READ ONLY STENCIL ATTACHMENT OPTIMAL",  VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL},
  {"IMAGE LAYOUT DEPTH ATTACHMENT STENCIL READ ONLY OPTIMAL",  VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL},
  {"IMAGE LAYOUT DEPTH ATTACHMENT OPTIMAL",  VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL},
  {"IMAGE LAYOUT DEPTH READ ONLY OPTIMAL",  VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL},
  {"IMAGE LAYOUT STENCIL ATTACHMENT OPTIMAL",  VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL},
  {"IMAGE LAYOUT STENCIL READ ONLY OPTIMAL",  VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL},
  {"IMAGE LAYOUT PRESENT SRC KHR",  VK_IMAGE_LAYOUT_PRESENT_SRC_KHR},
  {"IMAGE LAYOUT SHARED PRESENT KHR",  VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR},
  {"IMAGE LAYOUT SHADING RATE OPTIMAL NV",  VK_IMAGE_LAYOUT_SHADING_RATE_OPTIMAL_NV},
  {"IMAGE LAYOUT FRAGMENT DENSITY MAP OPTIMAL EXT",  VK_IMAGE_LAYOUT_FRAGMENT_DENSITY_MAP_OPTIMAL_EXT},
  {"IMAGE LAYOUT DEPTH READ ONLY STENCIL ATTACHMENT OPTIMAL KHR",  VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL_KHR},
  {"IMAGE LAYOUT DEPTH ATTACHMENT STENCIL READ ONLY OPTIMAL KHR",  VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL_KHR},
  {"IMAGE LAYOUT FRAGMENT SHADING RATE ATTACHMENT OPTIMAL KHR",  VK_IMAGE_LAYOUT_FRAGMENT_SHADING_RATE_ATTACHMENT_OPTIMAL_KHR},
  {"IMAGE LAYOUT DEPTH ATTACHMENT OPTIMAL KHR",  VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL_KHR},
  {"IMAGE LAYOUT DEPTH READ ONLY OPTIMAL KHR",  VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL_KHR},
  {"IMAGE LAYOUT STENCIL ATTACHMENT OPTIMAL KHR",  VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL_KHR},
  {"IMAGE LAYOUT STENCIL READ ONLY OPTIMAL KHR",  VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL_KHR},
};
const std::vector<std::pair<std::string, VkObjectType>> ObjectType_map = {
  {"OBJECT TYPE UNKNOWN",  VK_OBJECT_TYPE_UNKNOWN},
  {"OBJECT TYPE INSTANCE",  VK_OBJECT_TYPE_INSTANCE},
  {"OBJECT TYPE PHYSICAL DEVICE",  VK_OBJECT_TYPE_PHYSICAL_DEVICE},
  {"OBJECT TYPE DEVICE",  VK_OBJECT_TYPE_DEVICE},
  {"OBJECT TYPE QUEUE",  VK_OBJECT_TYPE_QUEUE},
  {"OBJECT TYPE SEMAPHORE",  VK_OBJECT_TYPE_SEMAPHORE},
  {"OBJECT TYPE COMMAND BUFFER",  VK_OBJECT_TYPE_COMMAND_BUFFER},
  {"OBJECT TYPE FENCE",  VK_OBJECT_TYPE_FENCE},
  {"OBJECT TYPE DEVICE MEMORY",  VK_OBJECT_TYPE_DEVICE_MEMORY},
  {"OBJECT TYPE BUFFER",  VK_OBJECT_TYPE_BUFFER},
  {"OBJECT TYPE IMAGE",  VK_OBJECT_TYPE_IMAGE},
  {"OBJECT TYPE EVENT",  VK_OBJECT_TYPE_EVENT},
  {"OBJECT TYPE QUERY POOL",  VK_OBJECT_TYPE_QUERY_POOL},
  {"OBJECT TYPE BUFFER VIEW",  VK_OBJECT_TYPE_BUFFER_VIEW},
  {"OBJECT TYPE IMAGE VIEW",  VK_OBJECT_TYPE_IMAGE_VIEW},
  {"OBJECT TYPE SHADER MODULE",  VK_OBJECT_TYPE_SHADER_MODULE},
  {"OBJECT TYPE PIPELINE CACHE",  VK_OBJECT_TYPE_PIPELINE_CACHE},
  {"OBJECT TYPE PIPELINE LAYOUT",  VK_OBJECT_TYPE_PIPELINE_LAYOUT},
  {"OBJECT TYPE RENDER PASS",  VK_OBJECT_TYPE_RENDER_PASS},
  {"OBJECT TYPE PIPELINE",  VK_OBJECT_TYPE_PIPELINE},
  {"OBJECT TYPE DESCRIPTOR SET LAYOUT",  VK_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT},
  {"OBJECT TYPE SAMPLER",  VK_OBJECT_TYPE_SAMPLER},
  {"OBJECT TYPE DESCRIPTOR POOL",  VK_OBJECT_TYPE_DESCRIPTOR_POOL},
  {"OBJECT TYPE DESCRIPTOR SET",  VK_OBJECT_TYPE_DESCRIPTOR_SET},
  {"OBJECT TYPE FRAMEBUFFER",  VK_OBJECT_TYPE_FRAMEBUFFER},
  {"OBJECT TYPE COMMAND POOL",  VK_OBJECT_TYPE_COMMAND_POOL},
  {"OBJECT TYPE SAMPLER YCBCR CONVERSION",  VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION},
  {"OBJECT TYPE DESCRIPTOR UPDATE TEMPLATE",  VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE},
  {"OBJECT TYPE SURFACE KHR",  VK_OBJECT_TYPE_SURFACE_KHR},
  {"OBJECT TYPE SWAPCHAIN KHR",  VK_OBJECT_TYPE_SWAPCHAIN_KHR},
  {"OBJECT TYPE DISPLAY KHR",  VK_OBJECT_TYPE_DISPLAY_KHR},
  {"OBJECT TYPE DISPLAY MODE KHR",  VK_OBJECT_TYPE_DISPLAY_MODE_KHR},
  {"OBJECT TYPE DEBUG REPORT CALLBACK EXT",  VK_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT},
  {"OBJECT TYPE DEBUG UTILS MESSENGER EXT",  VK_OBJECT_TYPE_DEBUG_UTILS_MESSENGER_EXT},
  {"OBJECT TYPE ACCELERATION STRUCTURE KHR",  VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR},
  {"OBJECT TYPE VALIDATION CACHE EXT",  VK_OBJECT_TYPE_VALIDATION_CACHE_EXT},
  {"OBJECT TYPE ACCELERATION STRUCTURE NV",  VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV},
  {"OBJECT TYPE PERFORMANCE CONFIGURATION INTEL",  VK_OBJECT_TYPE_PERFORMANCE_CONFIGURATION_INTEL},
  {"OBJECT TYPE DEFERRED OPERATION KHR",  VK_OBJECT_TYPE_DEFERRED_OPERATION_KHR},
  {"OBJECT TYPE INDIRECT COMMANDS LAYOUT NV",  VK_OBJECT_TYPE_INDIRECT_COMMANDS_LAYOUT_NV},
  {"OBJECT TYPE PRIVATE DATA SLOT EXT",  VK_OBJECT_TYPE_PRIVATE_DATA_SLOT_EXT},
  {"OBJECT TYPE DESCRIPTOR UPDATE TEMPLATE KHR",  VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR},
  {"OBJECT TYPE SAMPLER YCBCR CONVERSION KHR",  VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR},
};
const std::vector<std::pair<std::string, VkVendorId>> VendorId_map = {
  {"VENDOR ID VIV",  VK_VENDOR_ID_VIV},
  {"VENDOR ID VSI",  VK_VENDOR_ID_VSI},
  {"VENDOR ID KAZAN",  VK_VENDOR_ID_KAZAN},
  {"VENDOR ID CODEPLAY",  VK_VENDOR_ID_CODEPLAY},
  {"VENDOR ID MESA",  VK_VENDOR_ID_MESA},
};
const std::vector<std::pair<std::string, VkPipelineCacheHeaderVersion>> PipelineCacheHeaderVersion_map = {
  {"PIPELINE CACHE HEADER VERSION ONE",  VK_PIPELINE_CACHE_HEADER_VERSION_ONE},
};
const std::vector<std::pair<std::string, VkSystemAllocationScope>> SystemAllocationScope_map = {
  {"SYSTEM ALLOCATION SCOPE COMMAND",  VK_SYSTEM_ALLOCATION_SCOPE_COMMAND},
  {"SYSTEM ALLOCATION SCOPE OBJECT",  VK_SYSTEM_ALLOCATION_SCOPE_OBJECT},
  {"SYSTEM ALLOCATION SCOPE CACHE",  VK_SYSTEM_ALLOCATION_SCOPE_CACHE},
  {"SYSTEM ALLOCATION SCOPE DEVICE",  VK_SYSTEM_ALLOCATION_SCOPE_DEVICE},
  {"SYSTEM ALLOCATION SCOPE INSTANCE",  VK_SYSTEM_ALLOCATION_SCOPE_INSTANCE},
};
const std::vector<std::pair<std::string, VkInternalAllocationType>> InternalAllocationType_map = {
  {"INTERNAL ALLOCATION TYPE EXECUTABLE",  VK_INTERNAL_ALLOCATION_TYPE_EXECUTABLE},
};
const std::vector<std::pair<std::string, VkFormat>> Format_map = {
  {"FORMAT UNDEFINED",  VK_FORMAT_UNDEFINED},
  {"FORMAT R4G4 UNORM PACK8",  VK_FORMAT_R4G4_UNORM_PACK8},
  {"FORMAT R4G4B4A4 UNORM PACK16",  VK_FORMAT_R4G4B4A4_UNORM_PACK16},
  {"FORMAT B4G4R4A4 UNORM PACK16",  VK_FORMAT_B4G4R4A4_UNORM_PACK16},
  {"FORMAT R5G6B5 UNORM PACK16",  VK_FORMAT_R5G6B5_UNORM_PACK16},
  {"FORMAT B5G6R5 UNORM PACK16",  VK_FORMAT_B5G6R5_UNORM_PACK16},
  {"FORMAT R5G5B5A1 UNORM PACK16",  VK_FORMAT_R5G5B5A1_UNORM_PACK16},
  {"FORMAT B5G5R5A1 UNORM PACK16",  VK_FORMAT_B5G5R5A1_UNORM_PACK16},
  {"FORMAT A1R5G5B5 UNORM PACK16",  VK_FORMAT_A1R5G5B5_UNORM_PACK16},
  {"FORMAT R8 UNORM",  VK_FORMAT_R8_UNORM},
  {"FORMAT R8 SNORM",  VK_FORMAT_R8_SNORM},
  {"FORMAT R8 USCALED",  VK_FORMAT_R8_USCALED},
  {"FORMAT R8 SSCALED",  VK_FORMAT_R8_SSCALED},
  {"FORMAT R8 UINT",  VK_FORMAT_R8_UINT},
  {"FORMAT R8 SINT",  VK_FORMAT_R8_SINT},
  {"FORMAT R8 SRGB",  VK_FORMAT_R8_SRGB},
  {"FORMAT R8G8 UNORM",  VK_FORMAT_R8G8_UNORM},
  {"FORMAT R8G8 SNORM",  VK_FORMAT_R8G8_SNORM},
  {"FORMAT R8G8 USCALED",  VK_FORMAT_R8G8_USCALED},
  {"FORMAT R8G8 SSCALED",  VK_FORMAT_R8G8_SSCALED},
  {"FORMAT R8G8 UINT",  VK_FORMAT_R8G8_UINT},
  {"FORMAT R8G8 SINT",  VK_FORMAT_R8G8_SINT},
  {"FORMAT R8G8 SRGB",  VK_FORMAT_R8G8_SRGB},
  {"FORMAT R8G8B8 UNORM",  VK_FORMAT_R8G8B8_UNORM},
  {"FORMAT R8G8B8 SNORM",  VK_FORMAT_R8G8B8_SNORM},
  {"FORMAT R8G8B8 USCALED",  VK_FORMAT_R8G8B8_USCALED},
  {"FORMAT R8G8B8 SSCALED",  VK_FORMAT_R8G8B8_SSCALED},
  {"FORMAT R8G8B8 UINT",  VK_FORMAT_R8G8B8_UINT},
  {"FORMAT R8G8B8 SINT",  VK_FORMAT_R8G8B8_SINT},
  {"FORMAT R8G8B8 SRGB",  VK_FORMAT_R8G8B8_SRGB},
  {"FORMAT B8G8R8 UNORM",  VK_FORMAT_B8G8R8_UNORM},
  {"FORMAT B8G8R8 SNORM",  VK_FORMAT_B8G8R8_SNORM},
  {"FORMAT B8G8R8 USCALED",  VK_FORMAT_B8G8R8_USCALED},
  {"FORMAT B8G8R8 SSCALED",  VK_FORMAT_B8G8R8_SSCALED},
  {"FORMAT B8G8R8 UINT",  VK_FORMAT_B8G8R8_UINT},
  {"FORMAT B8G8R8 SINT",  VK_FORMAT_B8G8R8_SINT},
  {"FORMAT B8G8R8 SRGB",  VK_FORMAT_B8G8R8_SRGB},
  {"FORMAT R8G8B8A8 UNORM",  VK_FORMAT_R8G8B8A8_UNORM},
  {"FORMAT R8G8B8A8 SNORM",  VK_FORMAT_R8G8B8A8_SNORM},
  {"FORMAT R8G8B8A8 USCALED",  VK_FORMAT_R8G8B8A8_USCALED},
  {"FORMAT R8G8B8A8 SSCALED",  VK_FORMAT_R8G8B8A8_SSCALED},
  {"FORMAT R8G8B8A8 UINT",  VK_FORMAT_R8G8B8A8_UINT},
  {"FORMAT R8G8B8A8 SINT",  VK_FORMAT_R8G8B8A8_SINT},
  {"FORMAT R8G8B8A8 SRGB",  VK_FORMAT_R8G8B8A8_SRGB},
  {"FORMAT B8G8R8A8 UNORM",  VK_FORMAT_B8G8R8A8_UNORM},
  {"FORMAT B8G8R8A8 SNORM",  VK_FORMAT_B8G8R8A8_SNORM},
  {"FORMAT B8G8R8A8 USCALED",  VK_FORMAT_B8G8R8A8_USCALED},
  {"FORMAT B8G8R8A8 SSCALED",  VK_FORMAT_B8G8R8A8_SSCALED},
  {"FORMAT B8G8R8A8 UINT",  VK_FORMAT_B8G8R8A8_UINT},
  {"FORMAT B8G8R8A8 SINT",  VK_FORMAT_B8G8R8A8_SINT},
  {"FORMAT B8G8R8A8 SRGB",  VK_FORMAT_B8G8R8A8_SRGB},
  {"FORMAT A8B8G8R8 UNORM PACK32",  VK_FORMAT_A8B8G8R8_UNORM_PACK32},
  {"FORMAT A8B8G8R8 SNORM PACK32",  VK_FORMAT_A8B8G8R8_SNORM_PACK32},
  {"FORMAT A8B8G8R8 USCALED PACK32",  VK_FORMAT_A8B8G8R8_USCALED_PACK32},
  {"FORMAT A8B8G8R8 SSCALED PACK32",  VK_FORMAT_A8B8G8R8_SSCALED_PACK32},
  {"FORMAT A8B8G8R8 UINT PACK32",  VK_FORMAT_A8B8G8R8_UINT_PACK32},
  {"FORMAT A8B8G8R8 SINT PACK32",  VK_FORMAT_A8B8G8R8_SINT_PACK32},
  {"FORMAT A8B8G8R8 SRGB PACK32",  VK_FORMAT_A8B8G8R8_SRGB_PACK32},
  {"FORMAT A2R10G10B10 UNORM PACK32",  VK_FORMAT_A2R10G10B10_UNORM_PACK32},
  {"FORMAT A2R10G10B10 SNORM PACK32",  VK_FORMAT_A2R10G10B10_SNORM_PACK32},
  {"FORMAT A2R10G10B10 USCALED PACK32",  VK_FORMAT_A2R10G10B10_USCALED_PACK32},
  {"FORMAT A2R10G10B10 SSCALED PACK32",  VK_FORMAT_A2R10G10B10_SSCALED_PACK32},
  {"FORMAT A2R10G10B10 UINT PACK32",  VK_FORMAT_A2R10G10B10_UINT_PACK32},
  {"FORMAT A2R10G10B10 SINT PACK32",  VK_FORMAT_A2R10G10B10_SINT_PACK32},
  {"FORMAT A2B10G10R10 UNORM PACK32",  VK_FORMAT_A2B10G10R10_UNORM_PACK32},
  {"FORMAT A2B10G10R10 SNORM PACK32",  VK_FORMAT_A2B10G10R10_SNORM_PACK32},
  {"FORMAT A2B10G10R10 USCALED PACK32",  VK_FORMAT_A2B10G10R10_USCALED_PACK32},
  {"FORMAT A2B10G10R10 SSCALED PACK32",  VK_FORMAT_A2B10G10R10_SSCALED_PACK32},
  {"FORMAT A2B10G10R10 UINT PACK32",  VK_FORMAT_A2B10G10R10_UINT_PACK32},
  {"FORMAT A2B10G10R10 SINT PACK32",  VK_FORMAT_A2B10G10R10_SINT_PACK32},
  {"FORMAT R16 UNORM",  VK_FORMAT_R16_UNORM},
  {"FORMAT R16 SNORM",  VK_FORMAT_R16_SNORM},
  {"FORMAT R16 USCALED",  VK_FORMAT_R16_USCALED},
  {"FORMAT R16 SSCALED",  VK_FORMAT_R16_SSCALED},
  {"FORMAT R16 UINT",  VK_FORMAT_R16_UINT},
  {"FORMAT R16 SINT",  VK_FORMAT_R16_SINT},
  {"FORMAT R16 SFLOAT",  VK_FORMAT_R16_SFLOAT},
  {"FORMAT R16G16 UNORM",  VK_FORMAT_R16G16_UNORM},
  {"FORMAT R16G16 SNORM",  VK_FORMAT_R16G16_SNORM},
  {"FORMAT R16G16 USCALED",  VK_FORMAT_R16G16_USCALED},
  {"FORMAT R16G16 SSCALED",  VK_FORMAT_R16G16_SSCALED},
  {"FORMAT R16G16 UINT",  VK_FORMAT_R16G16_UINT},
  {"FORMAT R16G16 SINT",  VK_FORMAT_R16G16_SINT},
  {"FORMAT R16G16 SFLOAT",  VK_FORMAT_R16G16_SFLOAT},
  {"FORMAT R16G16B16 UNORM",  VK_FORMAT_R16G16B16_UNORM},
  {"FORMAT R16G16B16 SNORM",  VK_FORMAT_R16G16B16_SNORM},
  {"FORMAT R16G16B16 USCALED",  VK_FORMAT_R16G16B16_USCALED},
  {"FORMAT R16G16B16 SSCALED",  VK_FORMAT_R16G16B16_SSCALED},
  {"FORMAT R16G16B16 UINT",  VK_FORMAT_R16G16B16_UINT},
  {"FORMAT R16G16B16 SINT",  VK_FORMAT_R16G16B16_SINT},
  {"FORMAT R16G16B16 SFLOAT",  VK_FORMAT_R16G16B16_SFLOAT},
  {"FORMAT R16G16B16A16 UNORM",  VK_FORMAT_R16G16B16A16_UNORM},
  {"FORMAT R16G16B16A16 SNORM",  VK_FORMAT_R16G16B16A16_SNORM},
  {"FORMAT R16G16B16A16 USCALED",  VK_FORMAT_R16G16B16A16_USCALED},
  {"FORMAT R16G16B16A16 SSCALED",  VK_FORMAT_R16G16B16A16_SSCALED},
  {"FORMAT R16G16B16A16 UINT",  VK_FORMAT_R16G16B16A16_UINT},
  {"FORMAT R16G16B16A16 SINT",  VK_FORMAT_R16G16B16A16_SINT},
  {"FORMAT R16G16B16A16 SFLOAT",  VK_FORMAT_R16G16B16A16_SFLOAT},
  {"FORMAT R32 UINT",  VK_FORMAT_R32_UINT},
  {"FORMAT R32 SINT",  VK_FORMAT_R32_SINT},
  {"FORMAT R32 SFLOAT",  VK_FORMAT_R32_SFLOAT},
  {"FORMAT R32G32 UINT",  VK_FORMAT_R32G32_UINT},
  {"FORMAT R32G32 SINT",  VK_FORMAT_R32G32_SINT},
  {"FORMAT R32G32 SFLOAT",  VK_FORMAT_R32G32_SFLOAT},
  {"FORMAT R32G32B32 UINT",  VK_FORMAT_R32G32B32_UINT},
  {"FORMAT R32G32B32 SINT",  VK_FORMAT_R32G32B32_SINT},
  {"FORMAT R32G32B32 SFLOAT",  VK_FORMAT_R32G32B32_SFLOAT},
  {"FORMAT R32G32B32A32 UINT",  VK_FORMAT_R32G32B32A32_UINT},
  {"FORMAT R32G32B32A32 SINT",  VK_FORMAT_R32G32B32A32_SINT},
  {"FORMAT R32G32B32A32 SFLOAT",  VK_FORMAT_R32G32B32A32_SFLOAT},
  {"FORMAT R64 UINT",  VK_FORMAT_R64_UINT},
  {"FORMAT R64 SINT",  VK_FORMAT_R64_SINT},
  {"FORMAT R64 SFLOAT",  VK_FORMAT_R64_SFLOAT},
  {"FORMAT R64G64 UINT",  VK_FORMAT_R64G64_UINT},
  {"FORMAT R64G64 SINT",  VK_FORMAT_R64G64_SINT},
  {"FORMAT R64G64 SFLOAT",  VK_FORMAT_R64G64_SFLOAT},
  {"FORMAT R64G64B64 UINT",  VK_FORMAT_R64G64B64_UINT},
  {"FORMAT R64G64B64 SINT",  VK_FORMAT_R64G64B64_SINT},
  {"FORMAT R64G64B64 SFLOAT",  VK_FORMAT_R64G64B64_SFLOAT},
  {"FORMAT R64G64B64A64 UINT",  VK_FORMAT_R64G64B64A64_UINT},
  {"FORMAT R64G64B64A64 SINT",  VK_FORMAT_R64G64B64A64_SINT},
  {"FORMAT R64G64B64A64 SFLOAT",  VK_FORMAT_R64G64B64A64_SFLOAT},
  {"FORMAT B10G11R11 UFLOAT PACK32",  VK_FORMAT_B10G11R11_UFLOAT_PACK32},
  {"FORMAT E5B9G9R9 UFLOAT PACK32",  VK_FORMAT_E5B9G9R9_UFLOAT_PACK32},
  {"FORMAT D16 UNORM",  VK_FORMAT_D16_UNORM},
  {"FORMAT X8 D24 UNORM PACK32",  VK_FORMAT_X8_D24_UNORM_PACK32},
  {"FORMAT D32 SFLOAT",  VK_FORMAT_D32_SFLOAT},
  {"FORMAT S8 UINT",  VK_FORMAT_S8_UINT},
  {"FORMAT D16 UNORM S8 UINT",  VK_FORMAT_D16_UNORM_S8_UINT},
  {"FORMAT D24 UNORM S8 UINT",  VK_FORMAT_D24_UNORM_S8_UINT},
  {"FORMAT D32 SFLOAT S8 UINT",  VK_FORMAT_D32_SFLOAT_S8_UINT},
  {"FORMAT BC1 RGB UNORM BLOCK",  VK_FORMAT_BC1_RGB_UNORM_BLOCK},
  {"FORMAT BC1 RGB SRGB BLOCK",  VK_FORMAT_BC1_RGB_SRGB_BLOCK},
  {"FORMAT BC1 RGBA UNORM BLOCK",  VK_FORMAT_BC1_RGBA_UNORM_BLOCK},
  {"FORMAT BC1 RGBA SRGB BLOCK",  VK_FORMAT_BC1_RGBA_SRGB_BLOCK},
  {"FORMAT BC2 UNORM BLOCK",  VK_FORMAT_BC2_UNORM_BLOCK},
  {"FORMAT BC2 SRGB BLOCK",  VK_FORMAT_BC2_SRGB_BLOCK},
  {"FORMAT BC3 UNORM BLOCK",  VK_FORMAT_BC3_UNORM_BLOCK},
  {"FORMAT BC3 SRGB BLOCK",  VK_FORMAT_BC3_SRGB_BLOCK},
  {"FORMAT BC4 UNORM BLOCK",  VK_FORMAT_BC4_UNORM_BLOCK},
  {"FORMAT BC4 SNORM BLOCK",  VK_FORMAT_BC4_SNORM_BLOCK},
  {"FORMAT BC5 UNORM BLOCK",  VK_FORMAT_BC5_UNORM_BLOCK},
  {"FORMAT BC5 SNORM BLOCK",  VK_FORMAT_BC5_SNORM_BLOCK},
  {"FORMAT BC6H UFLOAT BLOCK",  VK_FORMAT_BC6H_UFLOAT_BLOCK},
  {"FORMAT BC6H SFLOAT BLOCK",  VK_FORMAT_BC6H_SFLOAT_BLOCK},
  {"FORMAT BC7 UNORM BLOCK",  VK_FORMAT_BC7_UNORM_BLOCK},
  {"FORMAT BC7 SRGB BLOCK",  VK_FORMAT_BC7_SRGB_BLOCK},
  {"FORMAT ETC2 R8G8B8 UNORM BLOCK",  VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK},
  {"FORMAT ETC2 R8G8B8 SRGB BLOCK",  VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK},
  {"FORMAT ETC2 R8G8B8A1 UNORM BLOCK",  VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK},
  {"FORMAT ETC2 R8G8B8A1 SRGB BLOCK",  VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK},
  {"FORMAT ETC2 R8G8B8A8 UNORM BLOCK",  VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK},
  {"FORMAT ETC2 R8G8B8A8 SRGB BLOCK",  VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK},
  {"FORMAT EAC R11 UNORM BLOCK",  VK_FORMAT_EAC_R11_UNORM_BLOCK},
  {"FORMAT EAC R11 SNORM BLOCK",  VK_FORMAT_EAC_R11_SNORM_BLOCK},
  {"FORMAT EAC R11G11 UNORM BLOCK",  VK_FORMAT_EAC_R11G11_UNORM_BLOCK},
  {"FORMAT EAC R11G11 SNORM BLOCK",  VK_FORMAT_EAC_R11G11_SNORM_BLOCK},
  {"FORMAT ASTC 4x4 UNORM BLOCK",  VK_FORMAT_ASTC_4x4_UNORM_BLOCK},
  {"FORMAT ASTC 4x4 SRGB BLOCK",  VK_FORMAT_ASTC_4x4_SRGB_BLOCK},
  {"FORMAT ASTC 5x4 UNORM BLOCK",  VK_FORMAT_ASTC_5x4_UNORM_BLOCK},
  {"FORMAT ASTC 5x4 SRGB BLOCK",  VK_FORMAT_ASTC_5x4_SRGB_BLOCK},
  {"FORMAT ASTC 5x5 UNORM BLOCK",  VK_FORMAT_ASTC_5x5_UNORM_BLOCK},
  {"FORMAT ASTC 5x5 SRGB BLOCK",  VK_FORMAT_ASTC_5x5_SRGB_BLOCK},
  {"FORMAT ASTC 6x5 UNORM BLOCK",  VK_FORMAT_ASTC_6x5_UNORM_BLOCK},
  {"FORMAT ASTC 6x5 SRGB BLOCK",  VK_FORMAT_ASTC_6x5_SRGB_BLOCK},
  {"FORMAT ASTC 6x6 UNORM BLOCK",  VK_FORMAT_ASTC_6x6_UNORM_BLOCK},
  {"FORMAT ASTC 6x6 SRGB BLOCK",  VK_FORMAT_ASTC_6x6_SRGB_BLOCK},
  {"FORMAT ASTC 8x5 UNORM BLOCK",  VK_FORMAT_ASTC_8x5_UNORM_BLOCK},
  {"FORMAT ASTC 8x5 SRGB BLOCK",  VK_FORMAT_ASTC_8x5_SRGB_BLOCK},
  {"FORMAT ASTC 8x6 UNORM BLOCK",  VK_FORMAT_ASTC_8x6_UNORM_BLOCK},
  {"FORMAT ASTC 8x6 SRGB BLOCK",  VK_FORMAT_ASTC_8x6_SRGB_BLOCK},
  {"FORMAT ASTC 8x8 UNORM BLOCK",  VK_FORMAT_ASTC_8x8_UNORM_BLOCK},
  {"FORMAT ASTC 8x8 SRGB BLOCK",  VK_FORMAT_ASTC_8x8_SRGB_BLOCK},
  {"FORMAT ASTC 10x5 UNORM BLOCK",  VK_FORMAT_ASTC_10x5_UNORM_BLOCK},
  {"FORMAT ASTC 10x5 SRGB BLOCK",  VK_FORMAT_ASTC_10x5_SRGB_BLOCK},
  {"FORMAT ASTC 10x6 UNORM BLOCK",  VK_FORMAT_ASTC_10x6_UNORM_BLOCK},
  {"FORMAT ASTC 10x6 SRGB BLOCK",  VK_FORMAT_ASTC_10x6_SRGB_BLOCK},
  {"FORMAT ASTC 10x8 UNORM BLOCK",  VK_FORMAT_ASTC_10x8_UNORM_BLOCK},
  {"FORMAT ASTC 10x8 SRGB BLOCK",  VK_FORMAT_ASTC_10x8_SRGB_BLOCK},
  {"FORMAT ASTC 10x10 UNORM BLOCK",  VK_FORMAT_ASTC_10x10_UNORM_BLOCK},
  {"FORMAT ASTC 10x10 SRGB BLOCK",  VK_FORMAT_ASTC_10x10_SRGB_BLOCK},
  {"FORMAT ASTC 12x10 UNORM BLOCK",  VK_FORMAT_ASTC_12x10_UNORM_BLOCK},
  {"FORMAT ASTC 12x10 SRGB BLOCK",  VK_FORMAT_ASTC_12x10_SRGB_BLOCK},
  {"FORMAT ASTC 12x12 UNORM BLOCK",  VK_FORMAT_ASTC_12x12_UNORM_BLOCK},
  {"FORMAT ASTC 12x12 SRGB BLOCK",  VK_FORMAT_ASTC_12x12_SRGB_BLOCK},
  {"FORMAT G8B8G8R8 422 UNORM",  VK_FORMAT_G8B8G8R8_422_UNORM},
  {"FORMAT B8G8R8G8 422 UNORM",  VK_FORMAT_B8G8R8G8_422_UNORM},
  {"FORMAT G8 B8 R8 3PLANE 420 UNORM",  VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM},
  {"FORMAT G8 B8R8 2PLANE 420 UNORM",  VK_FORMAT_G8_B8R8_2PLANE_420_UNORM},
  {"FORMAT G8 B8 R8 3PLANE 422 UNORM",  VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM},
  {"FORMAT G8 B8R8 2PLANE 422 UNORM",  VK_FORMAT_G8_B8R8_2PLANE_422_UNORM},
  {"FORMAT G8 B8 R8 3PLANE 444 UNORM",  VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM},
  {"FORMAT R10X6 UNORM PACK16",  VK_FORMAT_R10X6_UNORM_PACK16},
  {"FORMAT R10X6G10X6 UNORM 2PACK16",  VK_FORMAT_R10X6G10X6_UNORM_2PACK16},
  {"FORMAT R10X6G10X6B10X6A10X6 UNORM 4PACK16",  VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16},
  {"FORMAT G10X6B10X6G10X6R10X6 422 UNORM 4PACK16",  VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16},
  {"FORMAT B10X6G10X6R10X6G10X6 422 UNORM 4PACK16",  VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16},
  {"FORMAT G10X6 B10X6 R10X6 3PLANE 420 UNORM 3PACK16",  VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16},
  {"FORMAT G10X6 B10X6R10X6 2PLANE 420 UNORM 3PACK16",  VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16},
  {"FORMAT G10X6 B10X6 R10X6 3PLANE 422 UNORM 3PACK16",  VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16},
  {"FORMAT G10X6 B10X6R10X6 2PLANE 422 UNORM 3PACK16",  VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16},
  {"FORMAT G10X6 B10X6 R10X6 3PLANE 444 UNORM 3PACK16",  VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16},
  {"FORMAT R12X4 UNORM PACK16",  VK_FORMAT_R12X4_UNORM_PACK16},
  {"FORMAT R12X4G12X4 UNORM 2PACK16",  VK_FORMAT_R12X4G12X4_UNORM_2PACK16},
  {"FORMAT R12X4G12X4B12X4A12X4 UNORM 4PACK16",  VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16},
  {"FORMAT G12X4B12X4G12X4R12X4 422 UNORM 4PACK16",  VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16},
  {"FORMAT B12X4G12X4R12X4G12X4 422 UNORM 4PACK16",  VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16},
  {"FORMAT G12X4 B12X4 R12X4 3PLANE 420 UNORM 3PACK16",  VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16},
  {"FORMAT G12X4 B12X4R12X4 2PLANE 420 UNORM 3PACK16",  VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16},
  {"FORMAT G12X4 B12X4 R12X4 3PLANE 422 UNORM 3PACK16",  VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16},
  {"FORMAT G12X4 B12X4R12X4 2PLANE 422 UNORM 3PACK16",  VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16},
  {"FORMAT G12X4 B12X4 R12X4 3PLANE 444 UNORM 3PACK16",  VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16},
  {"FORMAT G16B16G16R16 422 UNORM",  VK_FORMAT_G16B16G16R16_422_UNORM},
  {"FORMAT B16G16R16G16 422 UNORM",  VK_FORMAT_B16G16R16G16_422_UNORM},
  {"FORMAT G16 B16 R16 3PLANE 420 UNORM",  VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM},
  {"FORMAT G16 B16R16 2PLANE 420 UNORM",  VK_FORMAT_G16_B16R16_2PLANE_420_UNORM},
  {"FORMAT G16 B16 R16 3PLANE 422 UNORM",  VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM},
  {"FORMAT G16 B16R16 2PLANE 422 UNORM",  VK_FORMAT_G16_B16R16_2PLANE_422_UNORM},
  {"FORMAT G16 B16 R16 3PLANE 444 UNORM",  VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM},
  {"FORMAT PVRTC1 2BPP UNORM BLOCK IMG",  VK_FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG},
  {"FORMAT PVRTC1 4BPP UNORM BLOCK IMG",  VK_FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG},
  {"FORMAT PVRTC2 2BPP UNORM BLOCK IMG",  VK_FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG},
  {"FORMAT PVRTC2 4BPP UNORM BLOCK IMG",  VK_FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG},
  {"FORMAT PVRTC1 2BPP SRGB BLOCK IMG",  VK_FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG},
  {"FORMAT PVRTC1 4BPP SRGB BLOCK IMG",  VK_FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG},
  {"FORMAT PVRTC2 2BPP SRGB BLOCK IMG",  VK_FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG},
  {"FORMAT PVRTC2 4BPP SRGB BLOCK IMG",  VK_FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG},
  {"FORMAT ASTC 4x4 SFLOAT BLOCK EXT",  VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK_EXT},
  {"FORMAT ASTC 5x4 SFLOAT BLOCK EXT",  VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK_EXT},
  {"FORMAT ASTC 5x5 SFLOAT BLOCK EXT",  VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK_EXT},
  {"FORMAT ASTC 6x5 SFLOAT BLOCK EXT",  VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK_EXT},
  {"FORMAT ASTC 6x6 SFLOAT BLOCK EXT",  VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK_EXT},
  {"FORMAT ASTC 8x5 SFLOAT BLOCK EXT",  VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK_EXT},
  {"FORMAT ASTC 8x6 SFLOAT BLOCK EXT",  VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK_EXT},
  {"FORMAT ASTC 8x8 SFLOAT BLOCK EXT",  VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK_EXT},
  {"FORMAT ASTC 10x5 SFLOAT BLOCK EXT",  VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK_EXT},
  {"FORMAT ASTC 10x6 SFLOAT BLOCK EXT",  VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK_EXT},
  {"FORMAT ASTC 10x8 SFLOAT BLOCK EXT",  VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK_EXT},
  {"FORMAT ASTC 10x10 SFLOAT BLOCK EXT",  VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK_EXT},
  {"FORMAT ASTC 12x10 SFLOAT BLOCK EXT",  VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK_EXT},
  {"FORMAT ASTC 12x12 SFLOAT BLOCK EXT",  VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK_EXT},
  {"FORMAT A4R4G4B4 UNORM PACK16 EXT",  VK_FORMAT_A4R4G4B4_UNORM_PACK16_EXT},
  {"FORMAT A4B4G4R4 UNORM PACK16 EXT",  VK_FORMAT_A4B4G4R4_UNORM_PACK16_EXT},
  {"FORMAT G8B8G8R8 422 UNORM KHR",  VK_FORMAT_G8B8G8R8_422_UNORM_KHR},
  {"FORMAT B8G8R8G8 422 UNORM KHR",  VK_FORMAT_B8G8R8G8_422_UNORM_KHR},
  {"FORMAT G8 B8 R8 3PLANE 420 UNORM KHR",  VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM_KHR},
  {"FORMAT G8 B8R8 2PLANE 420 UNORM KHR",  VK_FORMAT_G8_B8R8_2PLANE_420_UNORM_KHR},
  {"FORMAT G8 B8 R8 3PLANE 422 UNORM KHR",  VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM_KHR},
  {"FORMAT G8 B8R8 2PLANE 422 UNORM KHR",  VK_FORMAT_G8_B8R8_2PLANE_422_UNORM_KHR},
  {"FORMAT G8 B8 R8 3PLANE 444 UNORM KHR",  VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM_KHR},
  {"FORMAT R10X6 UNORM PACK16 KHR",  VK_FORMAT_R10X6_UNORM_PACK16_KHR},
  {"FORMAT R10X6G10X6 UNORM 2PACK16 KHR",  VK_FORMAT_R10X6G10X6_UNORM_2PACK16_KHR},
  {"FORMAT R10X6G10X6B10X6A10X6 UNORM 4PACK16 KHR",  VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16_KHR},
  {"FORMAT G10X6B10X6G10X6R10X6 422 UNORM 4PACK16 KHR",  VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16_KHR},
  {"FORMAT B10X6G10X6R10X6G10X6 422 UNORM 4PACK16 KHR",  VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16_KHR},
  {"FORMAT G10X6 B10X6 R10X6 3PLANE 420 UNORM 3PACK16 KHR",  VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16_KHR},
  {"FORMAT G10X6 B10X6R10X6 2PLANE 420 UNORM 3PACK16 KHR",  VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16_KHR},
  {"FORMAT G10X6 B10X6 R10X6 3PLANE 422 UNORM 3PACK16 KHR",  VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16_KHR},
  {"FORMAT G10X6 B10X6R10X6 2PLANE 422 UNORM 3PACK16 KHR",  VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16_KHR},
  {"FORMAT G10X6 B10X6 R10X6 3PLANE 444 UNORM 3PACK16 KHR",  VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16_KHR},
  {"FORMAT R12X4 UNORM PACK16 KHR",  VK_FORMAT_R12X4_UNORM_PACK16_KHR},
  {"FORMAT R12X4G12X4 UNORM 2PACK16 KHR",  VK_FORMAT_R12X4G12X4_UNORM_2PACK16_KHR},
  {"FORMAT R12X4G12X4B12X4A12X4 UNORM 4PACK16 KHR",  VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16_KHR},
  {"FORMAT G12X4B12X4G12X4R12X4 422 UNORM 4PACK16 KHR",  VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16_KHR},
  {"FORMAT B12X4G12X4R12X4G12X4 422 UNORM 4PACK16 KHR",  VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16_KHR},
  {"FORMAT G12X4 B12X4 R12X4 3PLANE 420 UNORM 3PACK16 KHR",  VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16_KHR},
  {"FORMAT G12X4 B12X4R12X4 2PLANE 420 UNORM 3PACK16 KHR",  VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16_KHR},
  {"FORMAT G12X4 B12X4 R12X4 3PLANE 422 UNORM 3PACK16 KHR",  VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16_KHR},
  {"FORMAT G12X4 B12X4R12X4 2PLANE 422 UNORM 3PACK16 KHR",  VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16_KHR},
  {"FORMAT G12X4 B12X4 R12X4 3PLANE 444 UNORM 3PACK16 KHR",  VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16_KHR},
  {"FORMAT G16B16G16R16 422 UNORM KHR",  VK_FORMAT_G16B16G16R16_422_UNORM_KHR},
  {"FORMAT B16G16R16G16 422 UNORM KHR",  VK_FORMAT_B16G16R16G16_422_UNORM_KHR},
  {"FORMAT G16 B16 R16 3PLANE 420 UNORM KHR",  VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM_KHR},
  {"FORMAT G16 B16R16 2PLANE 420 UNORM KHR",  VK_FORMAT_G16_B16R16_2PLANE_420_UNORM_KHR},
  {"FORMAT G16 B16 R16 3PLANE 422 UNORM KHR",  VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM_KHR},
  {"FORMAT G16 B16R16 2PLANE 422 UNORM KHR",  VK_FORMAT_G16_B16R16_2PLANE_422_UNORM_KHR},
  {"FORMAT G16 B16 R16 3PLANE 444 UNORM KHR",  VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM_KHR},
};
const std::vector<std::pair<std::string, VkImageTiling>> ImageTiling_map = {
  {"IMAGE TILING OPTIMAL",  VK_IMAGE_TILING_OPTIMAL},
  {"IMAGE TILING LINEAR",  VK_IMAGE_TILING_LINEAR},
  {"IMAGE TILING DRM FORMAT MODIFIER EXT",  VK_IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT},
};
const std::vector<std::pair<std::string, VkImageType>> ImageType_map = {
  {"IMAGE TYPE 1D",  VK_IMAGE_TYPE_1D},
  {"IMAGE TYPE 2D",  VK_IMAGE_TYPE_2D},
  {"IMAGE TYPE 3D",  VK_IMAGE_TYPE_3D},
};
const std::vector<std::pair<std::string, VkPhysicalDeviceType>> PhysicalDeviceType_map = {
  {"PHYSICAL DEVICE TYPE OTHER",  VK_PHYSICAL_DEVICE_TYPE_OTHER},
  {"PHYSICAL DEVICE TYPE INTEGRATED GPU",  VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU},
  {"PHYSICAL DEVICE TYPE DISCRETE GPU",  VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU},
  {"PHYSICAL DEVICE TYPE VIRTUAL GPU",  VK_PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU},
  {"PHYSICAL DEVICE TYPE CPU",  VK_PHYSICAL_DEVICE_TYPE_CPU},
};
const std::vector<std::pair<std::string, VkQueryType>> QueryType_map = {
  {"QUERY TYPE OCCLUSION",  VK_QUERY_TYPE_OCCLUSION},
  {"QUERY TYPE PIPELINE STATISTICS",  VK_QUERY_TYPE_PIPELINE_STATISTICS},
  {"QUERY TYPE TIMESTAMP",  VK_QUERY_TYPE_TIMESTAMP},
  {"QUERY TYPE TRANSFORM FEEDBACK STREAM EXT",  VK_QUERY_TYPE_TRANSFORM_FEEDBACK_STREAM_EXT},
  {"QUERY TYPE PERFORMANCE QUERY KHR",  VK_QUERY_TYPE_PERFORMANCE_QUERY_KHR},
  {"QUERY TYPE ACCELERATION STRUCTURE COMPACTED SIZE KHR",  VK_QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_KHR},
  {"QUERY TYPE ACCELERATION STRUCTURE SERIALIZATION SIZE KHR",  VK_QUERY_TYPE_ACCELERATION_STRUCTURE_SERIALIZATION_SIZE_KHR},
  {"QUERY TYPE ACCELERATION STRUCTURE COMPACTED SIZE NV",  VK_QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_NV},
  {"QUERY TYPE PERFORMANCE QUERY INTEL",  VK_QUERY_TYPE_PERFORMANCE_QUERY_INTEL},
};
const std::vector<std::pair<std::string, VkSharingMode>> SharingMode_map = {
  {"SHARING MODE EXCLUSIVE",  VK_SHARING_MODE_EXCLUSIVE},
  {"SHARING MODE CONCURRENT",  VK_SHARING_MODE_CONCURRENT},
};
const std::vector<std::pair<std::string, VkComponentSwizzle>> ComponentSwizzle_map = {
  {"COMPONENT SWIZZLE IDENTITY",  VK_COMPONENT_SWIZZLE_IDENTITY},
  {"COMPONENT SWIZZLE ZERO",  VK_COMPONENT_SWIZZLE_ZERO},
  {"COMPONENT SWIZZLE ONE",  VK_COMPONENT_SWIZZLE_ONE},
  {"COMPONENT SWIZZLE R",  VK_COMPONENT_SWIZZLE_R},
  {"COMPONENT SWIZZLE G",  VK_COMPONENT_SWIZZLE_G},
  {"COMPONENT SWIZZLE B",  VK_COMPONENT_SWIZZLE_B},
  {"COMPONENT SWIZZLE A",  VK_COMPONENT_SWIZZLE_A},
};
const std::vector<std::pair<std::string, VkImageViewType>> ImageViewType_map = {
  {"IMAGE VIEW TYPE 1D",  VK_IMAGE_VIEW_TYPE_1D},
  {"IMAGE VIEW TYPE 2D",  VK_IMAGE_VIEW_TYPE_2D},
  {"IMAGE VIEW TYPE 3D",  VK_IMAGE_VIEW_TYPE_3D},
  {"IMAGE VIEW TYPE CUBE",  VK_IMAGE_VIEW_TYPE_CUBE},
  {"IMAGE VIEW TYPE 1D ARRAY",  VK_IMAGE_VIEW_TYPE_1D_ARRAY},
  {"IMAGE VIEW TYPE 2D ARRAY",  VK_IMAGE_VIEW_TYPE_2D_ARRAY},
  {"IMAGE VIEW TYPE CUBE ARRAY",  VK_IMAGE_VIEW_TYPE_CUBE_ARRAY},
};
const std::vector<std::pair<std::string, VkBlendFactor>> BlendFactor_map = {
  {"BLEND FACTOR ZERO",  VK_BLEND_FACTOR_ZERO},
  {"BLEND FACTOR ONE",  VK_BLEND_FACTOR_ONE},
  {"BLEND FACTOR SRC COLOR",  VK_BLEND_FACTOR_SRC_COLOR},
  {"BLEND FACTOR ONE MINUS SRC COLOR",  VK_BLEND_FACTOR_ONE_MINUS_SRC_COLOR},
  {"BLEND FACTOR DST COLOR",  VK_BLEND_FACTOR_DST_COLOR},
  {"BLEND FACTOR ONE MINUS DST COLOR",  VK_BLEND_FACTOR_ONE_MINUS_DST_COLOR},
  {"BLEND FACTOR SRC ALPHA",  VK_BLEND_FACTOR_SRC_ALPHA},
  {"BLEND FACTOR ONE MINUS SRC ALPHA",  VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA},
  {"BLEND FACTOR DST ALPHA",  VK_BLEND_FACTOR_DST_ALPHA},
  {"BLEND FACTOR ONE MINUS DST ALPHA",  VK_BLEND_FACTOR_ONE_MINUS_DST_ALPHA},
  {"BLEND FACTOR CONSTANT COLOR",  VK_BLEND_FACTOR_CONSTANT_COLOR},
  {"BLEND FACTOR ONE MINUS CONSTANT COLOR",  VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR},
  {"BLEND FACTOR CONSTANT ALPHA",  VK_BLEND_FACTOR_CONSTANT_ALPHA},
  {"BLEND FACTOR ONE MINUS CONSTANT ALPHA",  VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA},
  {"BLEND FACTOR SRC ALPHA SATURATE",  VK_BLEND_FACTOR_SRC_ALPHA_SATURATE},
  {"BLEND FACTOR SRC1 COLOR",  VK_BLEND_FACTOR_SRC1_COLOR},
  {"BLEND FACTOR ONE MINUS SRC1 COLOR",  VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR},
  {"BLEND FACTOR SRC1 ALPHA",  VK_BLEND_FACTOR_SRC1_ALPHA},
  {"BLEND FACTOR ONE MINUS SRC1 ALPHA",  VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA},
};
const std::vector<std::pair<std::string, VkBlendOp>> BlendOp_map = {
  {"BLEND OP ADD",  VK_BLEND_OP_ADD},
  {"BLEND OP SUBTRACT",  VK_BLEND_OP_SUBTRACT},
  {"BLEND OP REVERSE SUBTRACT",  VK_BLEND_OP_REVERSE_SUBTRACT},
  {"BLEND OP MIN",  VK_BLEND_OP_MIN},
  {"BLEND OP MAX",  VK_BLEND_OP_MAX},
  {"BLEND OP ZERO EXT",  VK_BLEND_OP_ZERO_EXT},
  {"BLEND OP SRC EXT",  VK_BLEND_OP_SRC_EXT},
  {"BLEND OP DST EXT",  VK_BLEND_OP_DST_EXT},
  {"BLEND OP SRC OVER EXT",  VK_BLEND_OP_SRC_OVER_EXT},
  {"BLEND OP DST OVER EXT",  VK_BLEND_OP_DST_OVER_EXT},
  {"BLEND OP SRC IN EXT",  VK_BLEND_OP_SRC_IN_EXT},
  {"BLEND OP DST IN EXT",  VK_BLEND_OP_DST_IN_EXT},
  {"BLEND OP SRC OUT EXT",  VK_BLEND_OP_SRC_OUT_EXT},
  {"BLEND OP DST OUT EXT",  VK_BLEND_OP_DST_OUT_EXT},
  {"BLEND OP SRC ATOP EXT",  VK_BLEND_OP_SRC_ATOP_EXT},
  {"BLEND OP DST ATOP EXT",  VK_BLEND_OP_DST_ATOP_EXT},
  {"BLEND OP XOR EXT",  VK_BLEND_OP_XOR_EXT},
  {"BLEND OP MULTIPLY EXT",  VK_BLEND_OP_MULTIPLY_EXT},
  {"BLEND OP SCREEN EXT",  VK_BLEND_OP_SCREEN_EXT},
  {"BLEND OP OVERLAY EXT",  VK_BLEND_OP_OVERLAY_EXT},
  {"BLEND OP DARKEN EXT",  VK_BLEND_OP_DARKEN_EXT},
  {"BLEND OP LIGHTEN EXT",  VK_BLEND_OP_LIGHTEN_EXT},
  {"BLEND OP COLORDODGE EXT",  VK_BLEND_OP_COLORDODGE_EXT},
  {"BLEND OP COLORBURN EXT",  VK_BLEND_OP_COLORBURN_EXT},
  {"BLEND OP HARDLIGHT EXT",  VK_BLEND_OP_HARDLIGHT_EXT},
  {"BLEND OP SOFTLIGHT EXT",  VK_BLEND_OP_SOFTLIGHT_EXT},
  {"BLEND OP DIFFERENCE EXT",  VK_BLEND_OP_DIFFERENCE_EXT},
  {"BLEND OP EXCLUSION EXT",  VK_BLEND_OP_EXCLUSION_EXT},
  {"BLEND OP INVERT EXT",  VK_BLEND_OP_INVERT_EXT},
  {"BLEND OP INVERT RGB EXT",  VK_BLEND_OP_INVERT_RGB_EXT},
  {"BLEND OP LINEARDODGE EXT",  VK_BLEND_OP_LINEARDODGE_EXT},
  {"BLEND OP LINEARBURN EXT",  VK_BLEND_OP_LINEARBURN_EXT},
  {"BLEND OP VIVIDLIGHT EXT",  VK_BLEND_OP_VIVIDLIGHT_EXT},
  {"BLEND OP LINEARLIGHT EXT",  VK_BLEND_OP_LINEARLIGHT_EXT},
  {"BLEND OP PINLIGHT EXT",  VK_BLEND_OP_PINLIGHT_EXT},
  {"BLEND OP HARDMIX EXT",  VK_BLEND_OP_HARDMIX_EXT},
  {"BLEND OP HSL HUE EXT",  VK_BLEND_OP_HSL_HUE_EXT},
  {"BLEND OP HSL SATURATION EXT",  VK_BLEND_OP_HSL_SATURATION_EXT},
  {"BLEND OP HSL COLOR EXT",  VK_BLEND_OP_HSL_COLOR_EXT},
  {"BLEND OP HSL LUMINOSITY EXT",  VK_BLEND_OP_HSL_LUMINOSITY_EXT},
  {"BLEND OP PLUS EXT",  VK_BLEND_OP_PLUS_EXT},
  {"BLEND OP PLUS CLAMPED EXT",  VK_BLEND_OP_PLUS_CLAMPED_EXT},
  {"BLEND OP PLUS CLAMPED ALPHA EXT",  VK_BLEND_OP_PLUS_CLAMPED_ALPHA_EXT},
  {"BLEND OP PLUS DARKER EXT",  VK_BLEND_OP_PLUS_DARKER_EXT},
  {"BLEND OP MINUS EXT",  VK_BLEND_OP_MINUS_EXT},
  {"BLEND OP MINUS CLAMPED EXT",  VK_BLEND_OP_MINUS_CLAMPED_EXT},
  {"BLEND OP CONTRAST EXT",  VK_BLEND_OP_CONTRAST_EXT},
  {"BLEND OP INVERT OVG EXT",  VK_BLEND_OP_INVERT_OVG_EXT},
  {"BLEND OP RED EXT",  VK_BLEND_OP_RED_EXT},
  {"BLEND OP GREEN EXT",  VK_BLEND_OP_GREEN_EXT},
  {"BLEND OP BLUE EXT",  VK_BLEND_OP_BLUE_EXT},
};
const std::vector<std::pair<std::string, VkCompareOp>> CompareOp_map = {
  {"COMPARE OP NEVER",  VK_COMPARE_OP_NEVER},
  {"COMPARE OP LESS",  VK_COMPARE_OP_LESS},
  {"COMPARE OP EQUAL",  VK_COMPARE_OP_EQUAL},
  {"COMPARE OP LESS OR EQUAL",  VK_COMPARE_OP_LESS_OR_EQUAL},
  {"COMPARE OP GREATER",  VK_COMPARE_OP_GREATER},
  {"COMPARE OP NOT EQUAL",  VK_COMPARE_OP_NOT_EQUAL},
  {"COMPARE OP GREATER OR EQUAL",  VK_COMPARE_OP_GREATER_OR_EQUAL},
  {"COMPARE OP ALWAYS",  VK_COMPARE_OP_ALWAYS},
};
const std::vector<std::pair<std::string, VkDynamicState>> DynamicState_map = {
  {"DYNAMIC STATE VIEWPORT",  VK_DYNAMIC_STATE_VIEWPORT},
  {"DYNAMIC STATE SCISSOR",  VK_DYNAMIC_STATE_SCISSOR},
  {"DYNAMIC STATE LINE WIDTH",  VK_DYNAMIC_STATE_LINE_WIDTH},
  {"DYNAMIC STATE DEPTH BIAS",  VK_DYNAMIC_STATE_DEPTH_BIAS},
  {"DYNAMIC STATE BLEND CONSTANTS",  VK_DYNAMIC_STATE_BLEND_CONSTANTS},
  {"DYNAMIC STATE DEPTH BOUNDS",  VK_DYNAMIC_STATE_DEPTH_BOUNDS},
  {"DYNAMIC STATE STENCIL COMPARE MASK",  VK_DYNAMIC_STATE_STENCIL_COMPARE_MASK},
  {"DYNAMIC STATE STENCIL WRITE MASK",  VK_DYNAMIC_STATE_STENCIL_WRITE_MASK},
  {"DYNAMIC STATE STENCIL REFERENCE",  VK_DYNAMIC_STATE_STENCIL_REFERENCE},
  {"DYNAMIC STATE VIEWPORT W SCALING NV",  VK_DYNAMIC_STATE_VIEWPORT_W_SCALING_NV},
  {"DYNAMIC STATE DISCARD RECTANGLE EXT",  VK_DYNAMIC_STATE_DISCARD_RECTANGLE_EXT},
  {"DYNAMIC STATE SAMPLE LOCATIONS EXT",  VK_DYNAMIC_STATE_SAMPLE_LOCATIONS_EXT},
  {"DYNAMIC STATE RAY TRACING PIPELINE STACK SIZE KHR",  VK_DYNAMIC_STATE_RAY_TRACING_PIPELINE_STACK_SIZE_KHR},
  {"DYNAMIC STATE VIEWPORT SHADING RATE PALETTE NV",  VK_DYNAMIC_STATE_VIEWPORT_SHADING_RATE_PALETTE_NV},
  {"DYNAMIC STATE VIEWPORT COARSE SAMPLE ORDER NV",  VK_DYNAMIC_STATE_VIEWPORT_COARSE_SAMPLE_ORDER_NV},
  {"DYNAMIC STATE EXCLUSIVE SCISSOR NV",  VK_DYNAMIC_STATE_EXCLUSIVE_SCISSOR_NV},
  {"DYNAMIC STATE FRAGMENT SHADING RATE KHR",  VK_DYNAMIC_STATE_FRAGMENT_SHADING_RATE_KHR},
  {"DYNAMIC STATE LINE STIPPLE EXT",  VK_DYNAMIC_STATE_LINE_STIPPLE_EXT},
  {"DYNAMIC STATE CULL MODE EXT",  VK_DYNAMIC_STATE_CULL_MODE_EXT},
  {"DYNAMIC STATE FRONT FACE EXT",  VK_DYNAMIC_STATE_FRONT_FACE_EXT},
  {"DYNAMIC STATE PRIMITIVE TOPOLOGY EXT",  VK_DYNAMIC_STATE_PRIMITIVE_TOPOLOGY_EXT},
  {"DYNAMIC STATE VIEWPORT WITH COUNT EXT",  VK_DYNAMIC_STATE_VIEWPORT_WITH_COUNT_EXT},
  {"DYNAMIC STATE SCISSOR WITH COUNT EXT",  VK_DYNAMIC_STATE_SCISSOR_WITH_COUNT_EXT},
  {"DYNAMIC STATE VERTEX INPUT BINDING STRIDE EXT",  VK_DYNAMIC_STATE_VERTEX_INPUT_BINDING_STRIDE_EXT},
  {"DYNAMIC STATE DEPTH TEST ENABLE EXT",  VK_DYNAMIC_STATE_DEPTH_TEST_ENABLE_EXT},
  {"DYNAMIC STATE DEPTH WRITE ENABLE EXT",  VK_DYNAMIC_STATE_DEPTH_WRITE_ENABLE_EXT},
  {"DYNAMIC STATE DEPTH COMPARE OP EXT",  VK_DYNAMIC_STATE_DEPTH_COMPARE_OP_EXT},
  {"DYNAMIC STATE DEPTH BOUNDS TEST ENABLE EXT",  VK_DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE_EXT},
  {"DYNAMIC STATE STENCIL TEST ENABLE EXT",  VK_DYNAMIC_STATE_STENCIL_TEST_ENABLE_EXT},
  {"DYNAMIC STATE STENCIL OP EXT",  VK_DYNAMIC_STATE_STENCIL_OP_EXT},
};
const std::vector<std::pair<std::string, VkFrontFace>> FrontFace_map = {
  {"FRONT FACE COUNTER CLOCKWISE",  VK_FRONT_FACE_COUNTER_CLOCKWISE},
  {"FRONT FACE CLOCKWISE",  VK_FRONT_FACE_CLOCKWISE},
};
const std::vector<std::pair<std::string, VkVertexInputRate>> VertexInputRate_map = {
  {"VERTEX INPUT RATE VERTEX",  VK_VERTEX_INPUT_RATE_VERTEX},
  {"VERTEX INPUT RATE INSTANCE",  VK_VERTEX_INPUT_RATE_INSTANCE},
};
const std::vector<std::pair<std::string, VkPrimitiveTopology>> PrimitiveTopology_map = {
  {"PRIMITIVE TOPOLOGY POINT LIST",  VK_PRIMITIVE_TOPOLOGY_POINT_LIST},
  {"PRIMITIVE TOPOLOGY LINE LIST",  VK_PRIMITIVE_TOPOLOGY_LINE_LIST},
  {"PRIMITIVE TOPOLOGY LINE STRIP",  VK_PRIMITIVE_TOPOLOGY_LINE_STRIP},
  {"PRIMITIVE TOPOLOGY TRIANGLE LIST",  VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST},
  {"PRIMITIVE TOPOLOGY TRIANGLE STRIP",  VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP},
  {"PRIMITIVE TOPOLOGY TRIANGLE FAN",  VK_PRIMITIVE_TOPOLOGY_TRIANGLE_FAN},
  {"PRIMITIVE TOPOLOGY LINE LIST WITH ADJACENCY",  VK_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY},
  {"PRIMITIVE TOPOLOGY LINE STRIP WITH ADJACENCY",  VK_PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY},
  {"PRIMITIVE TOPOLOGY TRIANGLE LIST WITH ADJACENCY",  VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY},
  {"PRIMITIVE TOPOLOGY TRIANGLE STRIP WITH ADJACENCY",  VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY},
  {"PRIMITIVE TOPOLOGY PATCH LIST",  VK_PRIMITIVE_TOPOLOGY_PATCH_LIST},
};
const std::vector<std::pair<std::string, VkPolygonMode>> PolygonMode_map = {
  {"POLYGON MODE FILL",  VK_POLYGON_MODE_FILL},
  {"POLYGON MODE LINE",  VK_POLYGON_MODE_LINE},
  {"POLYGON MODE POINT",  VK_POLYGON_MODE_POINT},
  {"POLYGON MODE FILL RECTANGLE NV",  VK_POLYGON_MODE_FILL_RECTANGLE_NV},
};
const std::vector<std::pair<std::string, VkStencilOp>> StencilOp_map = {
  {"STENCIL OP KEEP",  VK_STENCIL_OP_KEEP},
  {"STENCIL OP ZERO",  VK_STENCIL_OP_ZERO},
  {"STENCIL OP REPLACE",  VK_STENCIL_OP_REPLACE},
  {"STENCIL OP INCREMENT AND CLAMP",  VK_STENCIL_OP_INCREMENT_AND_CLAMP},
  {"STENCIL OP DECREMENT AND CLAMP",  VK_STENCIL_OP_DECREMENT_AND_CLAMP},
  {"STENCIL OP INVERT",  VK_STENCIL_OP_INVERT},
  {"STENCIL OP INCREMENT AND WRAP",  VK_STENCIL_OP_INCREMENT_AND_WRAP},
  {"STENCIL OP DECREMENT AND WRAP",  VK_STENCIL_OP_DECREMENT_AND_WRAP},
};
const std::vector<std::pair<std::string, VkLogicOp>> LogicOp_map = {
  {"LOGIC OP CLEAR",  VK_LOGIC_OP_CLEAR},
  {"LOGIC OP AND",  VK_LOGIC_OP_AND},
  {"LOGIC OP AND REVERSE",  VK_LOGIC_OP_AND_REVERSE},
  {"LOGIC OP COPY",  VK_LOGIC_OP_COPY},
  {"LOGIC OP AND INVERTED",  VK_LOGIC_OP_AND_INVERTED},
  {"LOGIC OP NO OP",  VK_LOGIC_OP_NO_OP},
  {"LOGIC OP XOR",  VK_LOGIC_OP_XOR},
  {"LOGIC OP OR",  VK_LOGIC_OP_OR},
  {"LOGIC OP NOR",  VK_LOGIC_OP_NOR},
  {"LOGIC OP EQUIVALENT",  VK_LOGIC_OP_EQUIVALENT},
  {"LOGIC OP INVERT",  VK_LOGIC_OP_INVERT},
  {"LOGIC OP OR REVERSE",  VK_LOGIC_OP_OR_REVERSE},
  {"LOGIC OP COPY INVERTED",  VK_LOGIC_OP_COPY_INVERTED},
  {"LOGIC OP OR INVERTED",  VK_LOGIC_OP_OR_INVERTED},
  {"LOGIC OP NAND",  VK_LOGIC_OP_NAND},
  {"LOGIC OP SET",  VK_LOGIC_OP_SET},
};
const std::vector<std::pair<std::string, VkBorderColor>> BorderColor_map = {
  {"BORDER COLOR FLOAT TRANSPARENT BLACK",  VK_BORDER_COLOR_FLOAT_TRANSPARENT_BLACK},
  {"BORDER COLOR INT TRANSPARENT BLACK",  VK_BORDER_COLOR_INT_TRANSPARENT_BLACK},
  {"BORDER COLOR FLOAT OPAQUE BLACK",  VK_BORDER_COLOR_FLOAT_OPAQUE_BLACK},
  {"BORDER COLOR INT OPAQUE BLACK",  VK_BORDER_COLOR_INT_OPAQUE_BLACK},
  {"BORDER COLOR FLOAT OPAQUE WHITE",  VK_BORDER_COLOR_FLOAT_OPAQUE_WHITE},
  {"BORDER COLOR INT OPAQUE WHITE",  VK_BORDER_COLOR_INT_OPAQUE_WHITE},
  {"BORDER COLOR FLOAT CUSTOM EXT",  VK_BORDER_COLOR_FLOAT_CUSTOM_EXT},
  {"BORDER COLOR INT CUSTOM EXT",  VK_BORDER_COLOR_INT_CUSTOM_EXT},
};
const std::vector<std::pair<std::string, VkFilter>> Filter_map = {
  {"FILTER NEAREST",  VK_FILTER_NEAREST},
  {"FILTER LINEAR",  VK_FILTER_LINEAR},
  {"FILTER CUBIC IMG",  VK_FILTER_CUBIC_IMG},
  {"FILTER CUBIC EXT",  VK_FILTER_CUBIC_EXT},
};
const std::vector<std::pair<std::string, VkSamplerAddressMode>> SamplerAddressMode_map = {
  {"SAMPLER ADDRESS MODE REPEAT",  VK_SAMPLER_ADDRESS_MODE_REPEAT},
  {"SAMPLER ADDRESS MODE MIRRORED REPEAT",  VK_SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT},
  {"SAMPLER ADDRESS MODE CLAMP TO EDGE",  VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE},
  {"SAMPLER ADDRESS MODE CLAMP TO BORDER",  VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER},
  {"SAMPLER ADDRESS MODE MIRROR CLAMP TO EDGE",  VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE},
  {"SAMPLER ADDRESS MODE MIRROR CLAMP TO EDGE KHR",  VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE_KHR},
};
const std::vector<std::pair<std::string, VkSamplerMipmapMode>> SamplerMipmapMode_map = {
  {"SAMPLER MIPMAP MODE NEAREST",  VK_SAMPLER_MIPMAP_MODE_NEAREST},
  {"SAMPLER MIPMAP MODE LINEAR",  VK_SAMPLER_MIPMAP_MODE_LINEAR},
};
const std::vector<std::pair<std::string, VkDescriptorType>> DescriptorType_map = {
  {"DESCRIPTOR TYPE SAMPLER",  VK_DESCRIPTOR_TYPE_SAMPLER},
  {"DESCRIPTOR TYPE COMBINED IMAGE SAMPLER",  VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER},
  {"DESCRIPTOR TYPE SAMPLED IMAGE",  VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE},
  {"DESCRIPTOR TYPE STORAGE IMAGE",  VK_DESCRIPTOR_TYPE_STORAGE_IMAGE},
  {"DESCRIPTOR TYPE UNIFORM TEXEL BUFFER",  VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER},
  {"DESCRIPTOR TYPE STORAGE TEXEL BUFFER",  VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER},
  {"DESCRIPTOR TYPE UNIFORM BUFFER",  VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER},
  {"DESCRIPTOR TYPE STORAGE BUFFER",  VK_DESCRIPTOR_TYPE_STORAGE_BUFFER},
  {"DESCRIPTOR TYPE UNIFORM BUFFER DYNAMIC",  VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC},
  {"DESCRIPTOR TYPE STORAGE BUFFER DYNAMIC",  VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC},
  {"DESCRIPTOR TYPE INPUT ATTACHMENT",  VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT},
  {"DESCRIPTOR TYPE INLINE UNIFORM BLOCK EXT",  VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT},
  {"DESCRIPTOR TYPE ACCELERATION STRUCTURE KHR",  VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_KHR},
  {"DESCRIPTOR TYPE ACCELERATION STRUCTURE NV",  VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_NV},
};
const std::vector<std::pair<std::string, VkAttachmentLoadOp>> AttachmentLoadOp_map = {
  {"ATTACHMENT LOAD OP LOAD",  VK_ATTACHMENT_LOAD_OP_LOAD},
  {"ATTACHMENT LOAD OP CLEAR",  VK_ATTACHMENT_LOAD_OP_CLEAR},
  {"ATTACHMENT LOAD OP DONT CARE",  VK_ATTACHMENT_LOAD_OP_DONT_CARE},
};
const std::vector<std::pair<std::string, VkAttachmentStoreOp>> AttachmentStoreOp_map = {
  {"ATTACHMENT STORE OP STORE",  VK_ATTACHMENT_STORE_OP_STORE},
  {"ATTACHMENT STORE OP DONT CARE",  VK_ATTACHMENT_STORE_OP_DONT_CARE},
  {"ATTACHMENT STORE OP NONE QCOM",  VK_ATTACHMENT_STORE_OP_NONE_QCOM},
};
const std::vector<std::pair<std::string, VkPipelineBindPoint>> PipelineBindPoint_map = {
  {"PIPELINE BIND POINT GRAPHICS",  VK_PIPELINE_BIND_POINT_GRAPHICS},
  {"PIPELINE BIND POINT COMPUTE",  VK_PIPELINE_BIND_POINT_COMPUTE},
  {"PIPELINE BIND POINT RAY TRACING KHR",  VK_PIPELINE_BIND_POINT_RAY_TRACING_KHR},
  {"PIPELINE BIND POINT RAY TRACING NV",  VK_PIPELINE_BIND_POINT_RAY_TRACING_NV},
};
const std::vector<std::pair<std::string, VkCommandBufferLevel>> CommandBufferLevel_map = {
  {"COMMAND BUFFER LEVEL PRIMARY",  VK_COMMAND_BUFFER_LEVEL_PRIMARY},
  {"COMMAND BUFFER LEVEL SECONDARY",  VK_COMMAND_BUFFER_LEVEL_SECONDARY},
};
const std::vector<std::pair<std::string, VkIndexType>> IndexType_map = {
  {"INDEX TYPE UINT16",  VK_INDEX_TYPE_UINT16},
  {"INDEX TYPE UINT32",  VK_INDEX_TYPE_UINT32},
  {"INDEX TYPE NONE KHR",  VK_INDEX_TYPE_NONE_KHR},
  {"INDEX TYPE UINT8 EXT",  VK_INDEX_TYPE_UINT8_EXT},
  {"INDEX TYPE NONE NV",  VK_INDEX_TYPE_NONE_NV},
};
const std::vector<std::pair<std::string, VkSubpassContents>> SubpassContents_map = {
  {"SUBPASS CONTENTS INLINE",  VK_SUBPASS_CONTENTS_INLINE},
  {"SUBPASS CONTENTS SECONDARY COMMAND BUFFERS",  VK_SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS},
};
const std::vector<std::pair<std::string, VkAccessFlagBits>> AccessFlagBits_map = {
  {"ACCESS INDIRECT COMMAND READ BIT",  VK_ACCESS_INDIRECT_COMMAND_READ_BIT},
  {"ACCESS INDEX READ BIT",  VK_ACCESS_INDEX_READ_BIT},
  {"ACCESS VERTEX ATTRIBUTE READ BIT",  VK_ACCESS_VERTEX_ATTRIBUTE_READ_BIT},
  {"ACCESS UNIFORM READ BIT",  VK_ACCESS_UNIFORM_READ_BIT},
  {"ACCESS INPUT ATTACHMENT READ BIT",  VK_ACCESS_INPUT_ATTACHMENT_READ_BIT},
  {"ACCESS SHADER READ BIT",  VK_ACCESS_SHADER_READ_BIT},
  {"ACCESS SHADER WRITE BIT",  VK_ACCESS_SHADER_WRITE_BIT},
  {"ACCESS COLOR ATTACHMENT READ BIT",  VK_ACCESS_COLOR_ATTACHMENT_READ_BIT},
  {"ACCESS COLOR ATTACHMENT WRITE BIT",  VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT},
  {"ACCESS DEPTH STENCIL ATTACHMENT READ BIT",  VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT},
  {"ACCESS DEPTH STENCIL ATTACHMENT WRITE BIT",  VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT},
  {"ACCESS TRANSFER READ BIT",  VK_ACCESS_TRANSFER_READ_BIT},
  {"ACCESS TRANSFER WRITE BIT",  VK_ACCESS_TRANSFER_WRITE_BIT},
  {"ACCESS HOST READ BIT",  VK_ACCESS_HOST_READ_BIT},
  {"ACCESS HOST WRITE BIT",  VK_ACCESS_HOST_WRITE_BIT},
  {"ACCESS MEMORY READ BIT",  VK_ACCESS_MEMORY_READ_BIT},
  {"ACCESS MEMORY WRITE BIT",  VK_ACCESS_MEMORY_WRITE_BIT},
  {"ACCESS TRANSFORM FEEDBACK WRITE BIT EXT",  VK_ACCESS_TRANSFORM_FEEDBACK_WRITE_BIT_EXT},
  {"ACCESS TRANSFORM FEEDBACK COUNTER READ BIT EXT",  VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_READ_BIT_EXT},
  {"ACCESS TRANSFORM FEEDBACK COUNTER WRITE BIT EXT",  VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT_EXT},
  {"ACCESS CONDITIONAL RENDERING READ BIT EXT",  VK_ACCESS_CONDITIONAL_RENDERING_READ_BIT_EXT},
  {"ACCESS COLOR ATTACHMENT READ NONCOHERENT BIT EXT",  VK_ACCESS_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT},
  {"ACCESS ACCELERATION STRUCTURE READ BIT KHR",  VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_KHR},
  {"ACCESS ACCELERATION STRUCTURE WRITE BIT KHR",  VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_KHR},
  {"ACCESS SHADING RATE IMAGE READ BIT NV",  VK_ACCESS_SHADING_RATE_IMAGE_READ_BIT_NV},
  {"ACCESS FRAGMENT DENSITY MAP READ BIT EXT",  VK_ACCESS_FRAGMENT_DENSITY_MAP_READ_BIT_EXT},
  {"ACCESS COMMAND PREPROCESS READ BIT NV",  VK_ACCESS_COMMAND_PREPROCESS_READ_BIT_NV},
  {"ACCESS COMMAND PREPROCESS WRITE BIT NV",  VK_ACCESS_COMMAND_PREPROCESS_WRITE_BIT_NV},
  {"ACCESS ACCELERATION STRUCTURE READ BIT NV",  VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_NV},
  {"ACCESS ACCELERATION STRUCTURE WRITE BIT NV",  VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_NV},
  {"ACCESS FRAGMENT SHADING RATE ATTACHMENT READ BIT KHR",  VK_ACCESS_FRAGMENT_SHADING_RATE_ATTACHMENT_READ_BIT_KHR},
};
const std::vector<std::pair<std::string, VkImageAspectFlagBits>> ImageAspectFlagBits_map = {
  {"IMAGE ASPECT COLOR BIT",  VK_IMAGE_ASPECT_COLOR_BIT},
  {"IMAGE ASPECT DEPTH BIT",  VK_IMAGE_ASPECT_DEPTH_BIT},
  {"IMAGE ASPECT STENCIL BIT",  VK_IMAGE_ASPECT_STENCIL_BIT},
  {"IMAGE ASPECT METADATA BIT",  VK_IMAGE_ASPECT_METADATA_BIT},
  {"IMAGE ASPECT PLANE 0 BIT",  VK_IMAGE_ASPECT_PLANE_0_BIT},
  {"IMAGE ASPECT PLANE 1 BIT",  VK_IMAGE_ASPECT_PLANE_1_BIT},
  {"IMAGE ASPECT PLANE 2 BIT",  VK_IMAGE_ASPECT_PLANE_2_BIT},
  {"IMAGE ASPECT MEMORY PLANE 0 BIT EXT",  VK_IMAGE_ASPECT_MEMORY_PLANE_0_BIT_EXT},
  {"IMAGE ASPECT MEMORY PLANE 1 BIT EXT",  VK_IMAGE_ASPECT_MEMORY_PLANE_1_BIT_EXT},
  {"IMAGE ASPECT MEMORY PLANE 2 BIT EXT",  VK_IMAGE_ASPECT_MEMORY_PLANE_2_BIT_EXT},
  {"IMAGE ASPECT MEMORY PLANE 3 BIT EXT",  VK_IMAGE_ASPECT_MEMORY_PLANE_3_BIT_EXT},
  {"IMAGE ASPECT PLANE 0 BIT KHR",  VK_IMAGE_ASPECT_PLANE_0_BIT_KHR},
  {"IMAGE ASPECT PLANE 1 BIT KHR",  VK_IMAGE_ASPECT_PLANE_1_BIT_KHR},
  {"IMAGE ASPECT PLANE 2 BIT KHR",  VK_IMAGE_ASPECT_PLANE_2_BIT_KHR},
};
const std::vector<std::pair<std::string, VkFormatFeatureFlagBits>> FormatFeatureFlagBits_map = {
  {"FORMAT FEATURE SAMPLED IMAGE BIT",  VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT},
  {"FORMAT FEATURE STORAGE IMAGE BIT",  VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT},
  {"FORMAT FEATURE STORAGE IMAGE ATOMIC BIT",  VK_FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_BIT},
  {"FORMAT FEATURE UNIFORM TEXEL BUFFER BIT",  VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT},
  {"FORMAT FEATURE STORAGE TEXEL BUFFER BIT",  VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT},
  {"FORMAT FEATURE STORAGE TEXEL BUFFER ATOMIC BIT",  VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_ATOMIC_BIT},
  {"FORMAT FEATURE VERTEX BUFFER BIT",  VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT},
  {"FORMAT FEATURE COLOR ATTACHMENT BIT",  VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT},
  {"FORMAT FEATURE COLOR ATTACHMENT BLEND BIT",  VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT},
  {"FORMAT FEATURE DEPTH STENCIL ATTACHMENT BIT",  VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT},
  {"FORMAT FEATURE BLIT SRC BIT",  VK_FORMAT_FEATURE_BLIT_SRC_BIT},
  {"FORMAT FEATURE BLIT DST BIT",  VK_FORMAT_FEATURE_BLIT_DST_BIT},
  {"FORMAT FEATURE SAMPLED IMAGE FILTER LINEAR BIT",  VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT},
  {"FORMAT FEATURE TRANSFER SRC BIT",  VK_FORMAT_FEATURE_TRANSFER_SRC_BIT},
  {"FORMAT FEATURE TRANSFER DST BIT",  VK_FORMAT_FEATURE_TRANSFER_DST_BIT},
  {"FORMAT FEATURE MIDPOINT CHROMA SAMPLES BIT",  VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT},
  {"FORMAT FEATURE SAMPLED IMAGE YCBCR CONVERSION LINEAR FILTER BIT",  VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT},
  {"FORMAT FEATURE SAMPLED IMAGE YCBCR CONVERSION SEPARATE RECONSTRUCTION FILTER BIT",  VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT},
  {"FORMAT FEATURE SAMPLED IMAGE YCBCR CONVERSION CHROMA RECONSTRUCTION EXPLICIT BIT",  VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT},
  {"FORMAT FEATURE SAMPLED IMAGE YCBCR CONVERSION CHROMA RECONSTRUCTION EXPLICIT FORCEABLE BIT",  VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT},
  {"FORMAT FEATURE DISJOINT BIT",  VK_FORMAT_FEATURE_DISJOINT_BIT},
  {"FORMAT FEATURE COSITED CHROMA SAMPLES BIT",  VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT},
  {"FORMAT FEATURE SAMPLED IMAGE FILTER MINMAX BIT",  VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT},
  {"FORMAT FEATURE SAMPLED IMAGE FILTER CUBIC BIT IMG",  VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG},
  {"FORMAT FEATURE ACCELERATION STRUCTURE VERTEX BUFFER BIT KHR",  VK_FORMAT_FEATURE_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR},
  {"FORMAT FEATURE FRAGMENT DENSITY MAP BIT EXT",  VK_FORMAT_FEATURE_FRAGMENT_DENSITY_MAP_BIT_EXT},
  {"FORMAT FEATURE FRAGMENT SHADING RATE ATTACHMENT BIT KHR",  VK_FORMAT_FEATURE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR},
  {"FORMAT FEATURE TRANSFER SRC BIT KHR",  VK_FORMAT_FEATURE_TRANSFER_SRC_BIT_KHR},
  {"FORMAT FEATURE TRANSFER DST BIT KHR",  VK_FORMAT_FEATURE_TRANSFER_DST_BIT_KHR},
  {"FORMAT FEATURE SAMPLED IMAGE FILTER MINMAX BIT EXT",  VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT_EXT},
  {"FORMAT FEATURE MIDPOINT CHROMA SAMPLES BIT KHR",  VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT_KHR},
  {"FORMAT FEATURE SAMPLED IMAGE YCBCR CONVERSION LINEAR FILTER BIT KHR",  VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT_KHR},
  {"FORMAT FEATURE SAMPLED IMAGE YCBCR CONVERSION SEPARATE RECONSTRUCTION FILTER BIT KHR",  VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT_KHR},
  {"FORMAT FEATURE SAMPLED IMAGE YCBCR CONVERSION CHROMA RECONSTRUCTION EXPLICIT BIT KHR",  VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT_KHR},
  {"FORMAT FEATURE SAMPLED IMAGE YCBCR CONVERSION CHROMA RECONSTRUCTION EXPLICIT FORCEABLE BIT KHR",  VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT_KHR},
  {"FORMAT FEATURE DISJOINT BIT KHR",  VK_FORMAT_FEATURE_DISJOINT_BIT_KHR},
  {"FORMAT FEATURE COSITED CHROMA SAMPLES BIT KHR",  VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT_KHR},
  {"FORMAT FEATURE SAMPLED IMAGE FILTER CUBIC BIT EXT",  VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_EXT},
};
const std::vector<std::pair<std::string, VkImageCreateFlagBits>> ImageCreateFlagBits_map = {
  {"IMAGE CREATE SPARSE BINDING BIT",  VK_IMAGE_CREATE_SPARSE_BINDING_BIT},
  {"IMAGE CREATE SPARSE RESIDENCY BIT",  VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT},
  {"IMAGE CREATE SPARSE ALIASED BIT",  VK_IMAGE_CREATE_SPARSE_ALIASED_BIT},
  {"IMAGE CREATE MUTABLE FORMAT BIT",  VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT},
  {"IMAGE CREATE CUBE COMPATIBLE BIT",  VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT},
  {"IMAGE CREATE ALIAS BIT",  VK_IMAGE_CREATE_ALIAS_BIT},
  {"IMAGE CREATE SPLIT INSTANCE BIND REGIONS BIT",  VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT},
  {"IMAGE CREATE 2D ARRAY COMPATIBLE BIT",  VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT},
  {"IMAGE CREATE BLOCK TEXEL VIEW COMPATIBLE BIT",  VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT},
  {"IMAGE CREATE EXTENDED USAGE BIT",  VK_IMAGE_CREATE_EXTENDED_USAGE_BIT},
  {"IMAGE CREATE PROTECTED BIT",  VK_IMAGE_CREATE_PROTECTED_BIT},
  {"IMAGE CREATE DISJOINT BIT",  VK_IMAGE_CREATE_DISJOINT_BIT},
  {"IMAGE CREATE CORNER SAMPLED BIT NV",  VK_IMAGE_CREATE_CORNER_SAMPLED_BIT_NV},
  {"IMAGE CREATE SAMPLE LOCATIONS COMPATIBLE DEPTH BIT EXT",  VK_IMAGE_CREATE_SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_EXT},
  {"IMAGE CREATE SUBSAMPLED BIT EXT",  VK_IMAGE_CREATE_SUBSAMPLED_BIT_EXT},
  {"IMAGE CREATE SPLIT INSTANCE BIND REGIONS BIT KHR",  VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR},
  {"IMAGE CREATE 2D ARRAY COMPATIBLE BIT KHR",  VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT_KHR},
  {"IMAGE CREATE BLOCK TEXEL VIEW COMPATIBLE BIT KHR",  VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT_KHR},
  {"IMAGE CREATE EXTENDED USAGE BIT KHR",  VK_IMAGE_CREATE_EXTENDED_USAGE_BIT_KHR},
  {"IMAGE CREATE DISJOINT BIT KHR",  VK_IMAGE_CREATE_DISJOINT_BIT_KHR},
  {"IMAGE CREATE ALIAS BIT KHR",  VK_IMAGE_CREATE_ALIAS_BIT_KHR},
};
const std::vector<std::pair<std::string, VkSampleCountFlagBits>> SampleCountFlagBits_map = {
  {"SAMPLE COUNT 1 BIT",  VK_SAMPLE_COUNT_1_BIT},
  {"SAMPLE COUNT 2 BIT",  VK_SAMPLE_COUNT_2_BIT},
  {"SAMPLE COUNT 4 BIT",  VK_SAMPLE_COUNT_4_BIT},
  {"SAMPLE COUNT 8 BIT",  VK_SAMPLE_COUNT_8_BIT},
  {"SAMPLE COUNT 16 BIT",  VK_SAMPLE_COUNT_16_BIT},
  {"SAMPLE COUNT 32 BIT",  VK_SAMPLE_COUNT_32_BIT},
  {"SAMPLE COUNT 64 BIT",  VK_SAMPLE_COUNT_64_BIT},
};
const std::vector<std::pair<std::string, VkImageUsageFlagBits>> ImageUsageFlagBits_map = {
  {"IMAGE USAGE TRANSFER SRC BIT",  VK_IMAGE_USAGE_TRANSFER_SRC_BIT},
  {"IMAGE USAGE TRANSFER DST BIT",  VK_IMAGE_USAGE_TRANSFER_DST_BIT},
  {"IMAGE USAGE SAMPLED BIT",  VK_IMAGE_USAGE_SAMPLED_BIT},
  {"IMAGE USAGE STORAGE BIT",  VK_IMAGE_USAGE_STORAGE_BIT},
  {"IMAGE USAGE COLOR ATTACHMENT BIT",  VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT},
  {"IMAGE USAGE DEPTH STENCIL ATTACHMENT BIT",  VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT},
  {"IMAGE USAGE TRANSIENT ATTACHMENT BIT",  VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT},
  {"IMAGE USAGE INPUT ATTACHMENT BIT",  VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT},
  {"IMAGE USAGE SHADING RATE IMAGE BIT NV",  VK_IMAGE_USAGE_SHADING_RATE_IMAGE_BIT_NV},
  {"IMAGE USAGE FRAGMENT DENSITY MAP BIT EXT",  VK_IMAGE_USAGE_FRAGMENT_DENSITY_MAP_BIT_EXT},
  {"IMAGE USAGE FRAGMENT SHADING RATE ATTACHMENT BIT KHR",  VK_IMAGE_USAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR},
};
const std::vector<std::pair<std::string, VkMemoryHeapFlagBits>> MemoryHeapFlagBits_map = {
  {"MEMORY HEAP DEVICE LOCAL BIT",  VK_MEMORY_HEAP_DEVICE_LOCAL_BIT},
  {"MEMORY HEAP MULTI INSTANCE BIT",  VK_MEMORY_HEAP_MULTI_INSTANCE_BIT},
  {"MEMORY HEAP MULTI INSTANCE BIT KHR",  VK_MEMORY_HEAP_MULTI_INSTANCE_BIT_KHR},
};
const std::vector<std::pair<std::string, VkMemoryPropertyFlagBits>> MemoryPropertyFlagBits_map = {
  {"MEMORY PROPERTY DEVICE LOCAL BIT",  VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT},
  {"MEMORY PROPERTY HOST VISIBLE BIT",  VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT},
  {"MEMORY PROPERTY HOST COHERENT BIT",  VK_MEMORY_PROPERTY_HOST_COHERENT_BIT},
  {"MEMORY PROPERTY HOST CACHED BIT",  VK_MEMORY_PROPERTY_HOST_CACHED_BIT},
  {"MEMORY PROPERTY LAZILY ALLOCATED BIT",  VK_MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT},
  {"MEMORY PROPERTY PROTECTED BIT",  VK_MEMORY_PROPERTY_PROTECTED_BIT},
  {"MEMORY PROPERTY DEVICE COHERENT BIT AMD",  VK_MEMORY_PROPERTY_DEVICE_COHERENT_BIT_AMD},
  {"MEMORY PROPERTY DEVICE UNCACHED BIT AMD",  VK_MEMORY_PROPERTY_DEVICE_UNCACHED_BIT_AMD},
};
const std::vector<std::pair<std::string, VkQueueFlagBits>> QueueFlagBits_map = {
  {"QUEUE GRAPHICS BIT",  VK_QUEUE_GRAPHICS_BIT},
  {"QUEUE COMPUTE BIT",  VK_QUEUE_COMPUTE_BIT},
  {"QUEUE TRANSFER BIT",  VK_QUEUE_TRANSFER_BIT},
  {"QUEUE SPARSE BINDING BIT",  VK_QUEUE_SPARSE_BINDING_BIT},
  {"QUEUE PROTECTED BIT",  VK_QUEUE_PROTECTED_BIT},
};
const std::vector<std::pair<std::string, VkDeviceQueueCreateFlagBits>> DeviceQueueCreateFlagBits_map = {
  {"DEVICE QUEUE CREATE PROTECTED BIT",  VK_DEVICE_QUEUE_CREATE_PROTECTED_BIT},
};
const std::vector<std::pair<std::string, VkPipelineStageFlagBits>> PipelineStageFlagBits_map = {
  {"PIPELINE STAGE TOP OF PIPE BIT",  VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT},
  {"PIPELINE STAGE DRAW INDIRECT BIT",  VK_PIPELINE_STAGE_DRAW_INDIRECT_BIT},
  {"PIPELINE STAGE VERTEX INPUT BIT",  VK_PIPELINE_STAGE_VERTEX_INPUT_BIT},
  {"PIPELINE STAGE VERTEX SHADER BIT",  VK_PIPELINE_STAGE_VERTEX_SHADER_BIT},
  {"PIPELINE STAGE TESSELLATION CONTROL SHADER BIT",  VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT},
  {"PIPELINE STAGE TESSELLATION EVALUATION SHADER BIT",  VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT},
  {"PIPELINE STAGE GEOMETRY SHADER BIT",  VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT},
  {"PIPELINE STAGE FRAGMENT SHADER BIT",  VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT},
  {"PIPELINE STAGE EARLY FRAGMENT TESTS BIT",  VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT},
  {"PIPELINE STAGE LATE FRAGMENT TESTS BIT",  VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT},
  {"PIPELINE STAGE COLOR ATTACHMENT OUTPUT BIT",  VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT},
  {"PIPELINE STAGE COMPUTE SHADER BIT",  VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT},
  {"PIPELINE STAGE TRANSFER BIT",  VK_PIPELINE_STAGE_TRANSFER_BIT},
  {"PIPELINE STAGE BOTTOM OF PIPE BIT",  VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT},
  {"PIPELINE STAGE HOST BIT",  VK_PIPELINE_STAGE_HOST_BIT},
  {"PIPELINE STAGE ALL GRAPHICS BIT",  VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT},
  {"PIPELINE STAGE ALL COMMANDS BIT",  VK_PIPELINE_STAGE_ALL_COMMANDS_BIT},
  {"PIPELINE STAGE TRANSFORM FEEDBACK BIT EXT",  VK_PIPELINE_STAGE_TRANSFORM_FEEDBACK_BIT_EXT},
  {"PIPELINE STAGE CONDITIONAL RENDERING BIT EXT",  VK_PIPELINE_STAGE_CONDITIONAL_RENDERING_BIT_EXT},
  {"PIPELINE STAGE ACCELERATION STRUCTURE BUILD BIT KHR",  VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_KHR},
  {"PIPELINE STAGE RAY TRACING SHADER BIT KHR",  VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_KHR},
  {"PIPELINE STAGE SHADING RATE IMAGE BIT NV",  VK_PIPELINE_STAGE_SHADING_RATE_IMAGE_BIT_NV},
  {"PIPELINE STAGE TASK SHADER BIT NV",  VK_PIPELINE_STAGE_TASK_SHADER_BIT_NV},
  {"PIPELINE STAGE MESH SHADER BIT NV",  VK_PIPELINE_STAGE_MESH_SHADER_BIT_NV},
  {"PIPELINE STAGE FRAGMENT DENSITY PROCESS BIT EXT",  VK_PIPELINE_STAGE_FRAGMENT_DENSITY_PROCESS_BIT_EXT},
  {"PIPELINE STAGE COMMAND PREPROCESS BIT NV",  VK_PIPELINE_STAGE_COMMAND_PREPROCESS_BIT_NV},
  {"PIPELINE STAGE RAY TRACING SHADER BIT NV",  VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_NV},
  {"PIPELINE STAGE ACCELERATION STRUCTURE BUILD BIT NV",  VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_NV},
  {"PIPELINE STAGE FRAGMENT SHADING RATE ATTACHMENT BIT KHR",  VK_PIPELINE_STAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR},
};
const std::vector<std::pair<std::string, VkSparseMemoryBindFlagBits>> SparseMemoryBindFlagBits_map = {
  {"SPARSE MEMORY BIND METADATA BIT",  VK_SPARSE_MEMORY_BIND_METADATA_BIT},
};
const std::vector<std::pair<std::string, VkSparseImageFormatFlagBits>> SparseImageFormatFlagBits_map = {
  {"SPARSE IMAGE FORMAT SINGLE MIPTAIL BIT",  VK_SPARSE_IMAGE_FORMAT_SINGLE_MIPTAIL_BIT},
  {"SPARSE IMAGE FORMAT ALIGNED MIP SIZE BIT",  VK_SPARSE_IMAGE_FORMAT_ALIGNED_MIP_SIZE_BIT},
  {"SPARSE IMAGE FORMAT NONSTANDARD BLOCK SIZE BIT",  VK_SPARSE_IMAGE_FORMAT_NONSTANDARD_BLOCK_SIZE_BIT},
};
const std::vector<std::pair<std::string, VkFenceCreateFlagBits>> FenceCreateFlagBits_map = {
  {"FENCE CREATE SIGNALED BIT",  VK_FENCE_CREATE_SIGNALED_BIT},
};
const std::vector<std::pair<std::string, VkQueryPipelineStatisticFlagBits>> QueryPipelineStatisticFlagBits_map = {
  {"QUERY PIPELINE STATISTIC INPUT ASSEMBLY VERTICES BIT",  VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_VERTICES_BIT},
  {"QUERY PIPELINE STATISTIC INPUT ASSEMBLY PRIMITIVES BIT",  VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_PRIMITIVES_BIT},
  {"QUERY PIPELINE STATISTIC VERTEX SHADER INVOCATIONS BIT",  VK_QUERY_PIPELINE_STATISTIC_VERTEX_SHADER_INVOCATIONS_BIT},
  {"QUERY PIPELINE STATISTIC GEOMETRY SHADER INVOCATIONS BIT",  VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_INVOCATIONS_BIT},
  {"QUERY PIPELINE STATISTIC GEOMETRY SHADER PRIMITIVES BIT",  VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_PRIMITIVES_BIT},
  {"QUERY PIPELINE STATISTIC CLIPPING INVOCATIONS BIT",  VK_QUERY_PIPELINE_STATISTIC_CLIPPING_INVOCATIONS_BIT},
  {"QUERY PIPELINE STATISTIC CLIPPING PRIMITIVES BIT",  VK_QUERY_PIPELINE_STATISTIC_CLIPPING_PRIMITIVES_BIT},
  {"QUERY PIPELINE STATISTIC FRAGMENT SHADER INVOCATIONS BIT",  VK_QUERY_PIPELINE_STATISTIC_FRAGMENT_SHADER_INVOCATIONS_BIT},
  {"QUERY PIPELINE STATISTIC TESSELLATION CONTROL SHADER PATCHES BIT",  VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_CONTROL_SHADER_PATCHES_BIT},
  {"QUERY PIPELINE STATISTIC TESSELLATION EVALUATION SHADER INVOCATIONS BIT",  VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_EVALUATION_SHADER_INVOCATIONS_BIT},
  {"QUERY PIPELINE STATISTIC COMPUTE SHADER INVOCATIONS BIT",  VK_QUERY_PIPELINE_STATISTIC_COMPUTE_SHADER_INVOCATIONS_BIT},
};
const std::vector<std::pair<std::string, VkQueryResultFlagBits>> QueryResultFlagBits_map = {
  {"QUERY RESULT 64 BIT",  VK_QUERY_RESULT_64_BIT},
  {"QUERY RESULT WAIT BIT",  VK_QUERY_RESULT_WAIT_BIT},
  {"QUERY RESULT WITH AVAILABILITY BIT",  VK_QUERY_RESULT_WITH_AVAILABILITY_BIT},
  {"QUERY RESULT PARTIAL BIT",  VK_QUERY_RESULT_PARTIAL_BIT},
};
const std::vector<std::pair<std::string, VkBufferCreateFlagBits>> BufferCreateFlagBits_map = {
  {"BUFFER CREATE SPARSE BINDING BIT",  VK_BUFFER_CREATE_SPARSE_BINDING_BIT},
  {"BUFFER CREATE SPARSE RESIDENCY BIT",  VK_BUFFER_CREATE_SPARSE_RESIDENCY_BIT},
  {"BUFFER CREATE SPARSE ALIASED BIT",  VK_BUFFER_CREATE_SPARSE_ALIASED_BIT},
  {"BUFFER CREATE PROTECTED BIT",  VK_BUFFER_CREATE_PROTECTED_BIT},
  {"BUFFER CREATE DEVICE ADDRESS CAPTURE REPLAY BIT",  VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT},
  {"BUFFER CREATE DEVICE ADDRESS CAPTURE REPLAY BIT EXT",  VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_EXT},
  {"BUFFER CREATE DEVICE ADDRESS CAPTURE REPLAY BIT KHR",  VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR},
};
const std::vector<std::pair<std::string, VkBufferUsageFlagBits>> BufferUsageFlagBits_map = {
  {"BUFFER USAGE TRANSFER SRC BIT",  VK_BUFFER_USAGE_TRANSFER_SRC_BIT},
  {"BUFFER USAGE TRANSFER DST BIT",  VK_BUFFER_USAGE_TRANSFER_DST_BIT},
  {"BUFFER USAGE UNIFORM TEXEL BUFFER BIT",  VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT},
  {"BUFFER USAGE STORAGE TEXEL BUFFER BIT",  VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT},
  {"BUFFER USAGE UNIFORM BUFFER BIT",  VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT},
  {"BUFFER USAGE STORAGE BUFFER BIT",  VK_BUFFER_USAGE_STORAGE_BUFFER_BIT},
  {"BUFFER USAGE INDEX BUFFER BIT",  VK_BUFFER_USAGE_INDEX_BUFFER_BIT},
  {"BUFFER USAGE VERTEX BUFFER BIT",  VK_BUFFER_USAGE_VERTEX_BUFFER_BIT},
  {"BUFFER USAGE INDIRECT BUFFER BIT",  VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT},
  {"BUFFER USAGE SHADER DEVICE ADDRESS BIT",  VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT},
  {"BUFFER USAGE TRANSFORM FEEDBACK BUFFER BIT EXT",  VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_BUFFER_BIT_EXT},
  {"BUFFER USAGE TRANSFORM FEEDBACK COUNTER BUFFER BIT EXT",  VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_COUNTER_BUFFER_BIT_EXT},
  {"BUFFER USAGE CONDITIONAL RENDERING BIT EXT",  VK_BUFFER_USAGE_CONDITIONAL_RENDERING_BIT_EXT},
  {"BUFFER USAGE ACCELERATION STRUCTURE BUILD INPUT READ ONLY BIT KHR",  VK_BUFFER_USAGE_ACCELERATION_STRUCTURE_BUILD_INPUT_READ_ONLY_BIT_KHR},
  {"BUFFER USAGE ACCELERATION STRUCTURE STORAGE BIT KHR",  VK_BUFFER_USAGE_ACCELERATION_STRUCTURE_STORAGE_BIT_KHR},
  {"BUFFER USAGE SHADER BINDING TABLE BIT KHR",  VK_BUFFER_USAGE_SHADER_BINDING_TABLE_BIT_KHR},
  {"BUFFER USAGE RAY TRACING BIT NV",  VK_BUFFER_USAGE_RAY_TRACING_BIT_NV},
  {"BUFFER USAGE SHADER DEVICE ADDRESS BIT EXT",  VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_EXT},
  {"BUFFER USAGE SHADER DEVICE ADDRESS BIT KHR",  VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_KHR},
};
const std::vector<std::pair<std::string, VkImageViewCreateFlagBits>> ImageViewCreateFlagBits_map = {
  {"IMAGE VIEW CREATE FRAGMENT DENSITY MAP DYNAMIC BIT EXT",  VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DYNAMIC_BIT_EXT},
  {"IMAGE VIEW CREATE FRAGMENT DENSITY MAP DEFERRED BIT EXT",  VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DEFERRED_BIT_EXT},
};
const std::vector<std::pair<std::string, VkShaderModuleCreateFlagBits>> ShaderModuleCreateFlagBits_map = {
};
const std::vector<std::pair<std::string, VkPipelineCacheCreateFlagBits>> PipelineCacheCreateFlagBits_map = {
  {"PIPELINE CACHE CREATE EXTERNALLY SYNCHRONIZED BIT EXT",  VK_PIPELINE_CACHE_CREATE_EXTERNALLY_SYNCHRONIZED_BIT_EXT},
};
const std::vector<std::pair<std::string, VkColorComponentFlagBits>> ColorComponentFlagBits_map = {
  {"COLOR COMPONENT R BIT",  VK_COLOR_COMPONENT_R_BIT},
  {"COLOR COMPONENT G BIT",  VK_COLOR_COMPONENT_G_BIT},
  {"COLOR COMPONENT B BIT",  VK_COLOR_COMPONENT_B_BIT},
  {"COLOR COMPONENT A BIT",  VK_COLOR_COMPONENT_A_BIT},
};
const std::vector<std::pair<std::string, VkPipelineCreateFlagBits>> PipelineCreateFlagBits_map = {
  {"PIPELINE CREATE DISABLE OPTIMIZATION BIT",  VK_PIPELINE_CREATE_DISABLE_OPTIMIZATION_BIT},
  {"PIPELINE CREATE ALLOW DERIVATIVES BIT",  VK_PIPELINE_CREATE_ALLOW_DERIVATIVES_BIT},
  {"PIPELINE CREATE DERIVATIVE BIT",  VK_PIPELINE_CREATE_DERIVATIVE_BIT},
  {"PIPELINE CREATE VIEW INDEX FROM DEVICE INDEX BIT",  VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT},
  {"PIPELINE CREATE DISPATCH BASE BIT",  VK_PIPELINE_CREATE_DISPATCH_BASE_BIT},
  {"PIPELINE CREATE RAY TRACING NO NULL ANY HIT SHADERS BIT KHR",  VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_ANY_HIT_SHADERS_BIT_KHR},
  {"PIPELINE CREATE RAY TRACING NO NULL CLOSEST HIT SHADERS BIT KHR",  VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_CLOSEST_HIT_SHADERS_BIT_KHR},
  {"PIPELINE CREATE RAY TRACING NO NULL MISS SHADERS BIT KHR",  VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_MISS_SHADERS_BIT_KHR},
  {"PIPELINE CREATE RAY TRACING NO NULL INTERSECTION SHADERS BIT KHR",  VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_INTERSECTION_SHADERS_BIT_KHR},
  {"PIPELINE CREATE RAY TRACING SKIP TRIANGLES BIT KHR",  VK_PIPELINE_CREATE_RAY_TRACING_SKIP_TRIANGLES_BIT_KHR},
  {"PIPELINE CREATE RAY TRACING SKIP AABBS BIT KHR",  VK_PIPELINE_CREATE_RAY_TRACING_SKIP_AABBS_BIT_KHR},
  {"PIPELINE CREATE RAY TRACING SHADER GROUP HANDLE CAPTURE REPLAY BIT KHR",  VK_PIPELINE_CREATE_RAY_TRACING_SHADER_GROUP_HANDLE_CAPTURE_REPLAY_BIT_KHR},
  {"PIPELINE CREATE DEFER COMPILE BIT NV",  VK_PIPELINE_CREATE_DEFER_COMPILE_BIT_NV},
  {"PIPELINE CREATE CAPTURE STATISTICS BIT KHR",  VK_PIPELINE_CREATE_CAPTURE_STATISTICS_BIT_KHR},
  {"PIPELINE CREATE CAPTURE INTERNAL REPRESENTATIONS BIT KHR",  VK_PIPELINE_CREATE_CAPTURE_INTERNAL_REPRESENTATIONS_BIT_KHR},
  {"PIPELINE CREATE INDIRECT BINDABLE BIT NV",  VK_PIPELINE_CREATE_INDIRECT_BINDABLE_BIT_NV},
  {"PIPELINE CREATE LIBRARY BIT KHR",  VK_PIPELINE_CREATE_LIBRARY_BIT_KHR},
  {"PIPELINE CREATE FAIL ON PIPELINE COMPILE REQUIRED BIT EXT",  VK_PIPELINE_CREATE_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT_EXT},
  {"PIPELINE CREATE EARLY RETURN ON FAILURE BIT EXT",  VK_PIPELINE_CREATE_EARLY_RETURN_ON_FAILURE_BIT_EXT},
  {"PIPELINE CREATE DISPATCH BASE",  VK_PIPELINE_CREATE_DISPATCH_BASE},
  {"PIPELINE CREATE VIEW INDEX FROM DEVICE INDEX BIT KHR",  VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT_KHR},
  {"PIPELINE CREATE DISPATCH BASE KHR",  VK_PIPELINE_CREATE_DISPATCH_BASE_KHR},
};
const std::vector<std::pair<std::string, VkPipelineShaderStageCreateFlagBits>> PipelineShaderStageCreateFlagBits_map = {
  {"PIPELINE SHADER STAGE CREATE ALLOW VARYING SUBGROUP SIZE BIT EXT",  VK_PIPELINE_SHADER_STAGE_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT_EXT},
  {"PIPELINE SHADER STAGE CREATE REQUIRE FULL SUBGROUPS BIT EXT",  VK_PIPELINE_SHADER_STAGE_CREATE_REQUIRE_FULL_SUBGROUPS_BIT_EXT},
};
const std::vector<std::pair<std::string, VkShaderStageFlagBits>> ShaderStageFlagBits_map = {
  {"SHADER STAGE VERTEX BIT",  VK_SHADER_STAGE_VERTEX_BIT},
  {"SHADER STAGE TESSELLATION CONTROL BIT",  VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT},
  {"SHADER STAGE TESSELLATION EVALUATION BIT",  VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT},
  {"SHADER STAGE GEOMETRY BIT",  VK_SHADER_STAGE_GEOMETRY_BIT},
  {"SHADER STAGE FRAGMENT BIT",  VK_SHADER_STAGE_FRAGMENT_BIT},
  {"SHADER STAGE COMPUTE BIT",  VK_SHADER_STAGE_COMPUTE_BIT},
  {"SHADER STAGE ALL GRAPHICS",  VK_SHADER_STAGE_ALL_GRAPHICS},
  {"SHADER STAGE ALL",  VK_SHADER_STAGE_ALL},
  {"SHADER STAGE RAYGEN BIT KHR",  VK_SHADER_STAGE_RAYGEN_BIT_KHR},
  {"SHADER STAGE ANY HIT BIT KHR",  VK_SHADER_STAGE_ANY_HIT_BIT_KHR},
  {"SHADER STAGE CLOSEST HIT BIT KHR",  VK_SHADER_STAGE_CLOSEST_HIT_BIT_KHR},
  {"SHADER STAGE MISS BIT KHR",  VK_SHADER_STAGE_MISS_BIT_KHR},
  {"SHADER STAGE INTERSECTION BIT KHR",  VK_SHADER_STAGE_INTERSECTION_BIT_KHR},
  {"SHADER STAGE CALLABLE BIT KHR",  VK_SHADER_STAGE_CALLABLE_BIT_KHR},
  {"SHADER STAGE TASK BIT NV",  VK_SHADER_STAGE_TASK_BIT_NV},
  {"SHADER STAGE MESH BIT NV",  VK_SHADER_STAGE_MESH_BIT_NV},
  {"SHADER STAGE RAYGEN BIT NV",  VK_SHADER_STAGE_RAYGEN_BIT_NV},
  {"SHADER STAGE ANY HIT BIT NV",  VK_SHADER_STAGE_ANY_HIT_BIT_NV},
  {"SHADER STAGE CLOSEST HIT BIT NV",  VK_SHADER_STAGE_CLOSEST_HIT_BIT_NV},
  {"SHADER STAGE MISS BIT NV",  VK_SHADER_STAGE_MISS_BIT_NV},
  {"SHADER STAGE INTERSECTION BIT NV",  VK_SHADER_STAGE_INTERSECTION_BIT_NV},
  {"SHADER STAGE CALLABLE BIT NV",  VK_SHADER_STAGE_CALLABLE_BIT_NV},
};
const std::vector<std::pair<std::string, VkCullModeFlagBits>> CullModeFlagBits_map = {
  {"CULL MODE NONE",  VK_CULL_MODE_NONE},
  {"CULL MODE FRONT BIT",  VK_CULL_MODE_FRONT_BIT},
  {"CULL MODE BACK BIT",  VK_CULL_MODE_BACK_BIT},
  {"CULL MODE FRONT AND BACK",  VK_CULL_MODE_FRONT_AND_BACK},
};
const std::vector<std::pair<std::string, VkSamplerCreateFlagBits>> SamplerCreateFlagBits_map = {
  {"SAMPLER CREATE SUBSAMPLED BIT EXT",  VK_SAMPLER_CREATE_SUBSAMPLED_BIT_EXT},
  {"SAMPLER CREATE SUBSAMPLED COARSE RECONSTRUCTION BIT EXT",  VK_SAMPLER_CREATE_SUBSAMPLED_COARSE_RECONSTRUCTION_BIT_EXT},
};
const std::vector<std::pair<std::string, VkDescriptorPoolCreateFlagBits>> DescriptorPoolCreateFlagBits_map = {
  {"DESCRIPTOR POOL CREATE FREE DESCRIPTOR SET BIT",  VK_DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT},
  {"DESCRIPTOR POOL CREATE UPDATE AFTER BIND BIT",  VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT},
  {"DESCRIPTOR POOL CREATE UPDATE AFTER BIND BIT EXT",  VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT_EXT},
};
const std::vector<std::pair<std::string, VkDescriptorSetLayoutCreateFlagBits>> DescriptorSetLayoutCreateFlagBits_map = {
  {"DESCRIPTOR SET LAYOUT CREATE UPDATE AFTER BIND POOL BIT",  VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT},
  {"DESCRIPTOR SET LAYOUT CREATE PUSH DESCRIPTOR BIT KHR",  VK_DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT_KHR},
  {"DESCRIPTOR SET LAYOUT CREATE UPDATE AFTER BIND POOL BIT EXT",  VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT},
};
const std::vector<std::pair<std::string, VkAttachmentDescriptionFlagBits>> AttachmentDescriptionFlagBits_map = {
  {"ATTACHMENT DESCRIPTION MAY ALIAS BIT",  VK_ATTACHMENT_DESCRIPTION_MAY_ALIAS_BIT},
};
const std::vector<std::pair<std::string, VkDependencyFlagBits>> DependencyFlagBits_map = {
  {"DEPENDENCY BY REGION BIT",  VK_DEPENDENCY_BY_REGION_BIT},
  {"DEPENDENCY DEVICE GROUP BIT",  VK_DEPENDENCY_DEVICE_GROUP_BIT},
  {"DEPENDENCY VIEW LOCAL BIT",  VK_DEPENDENCY_VIEW_LOCAL_BIT},
  {"DEPENDENCY VIEW LOCAL BIT KHR",  VK_DEPENDENCY_VIEW_LOCAL_BIT_KHR},
  {"DEPENDENCY DEVICE GROUP BIT KHR",  VK_DEPENDENCY_DEVICE_GROUP_BIT_KHR},
};
const std::vector<std::pair<std::string, VkFramebufferCreateFlagBits>> FramebufferCreateFlagBits_map = {
  {"FRAMEBUFFER CREATE IMAGELESS BIT",  VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT},
  {"FRAMEBUFFER CREATE IMAGELESS BIT KHR",  VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT_KHR},
};
const std::vector<std::pair<std::string, VkRenderPassCreateFlagBits>> RenderPassCreateFlagBits_map = {
  {"RENDER PASS CREATE TRANSFORM BIT QCOM",  VK_RENDER_PASS_CREATE_TRANSFORM_BIT_QCOM},
};
const std::vector<std::pair<std::string, VkSubpassDescriptionFlagBits>> SubpassDescriptionFlagBits_map = {
  {"SUBPASS DESCRIPTION PER VIEW ATTRIBUTES BIT NVX",  VK_SUBPASS_DESCRIPTION_PER_VIEW_ATTRIBUTES_BIT_NVX},
  {"SUBPASS DESCRIPTION PER VIEW POSITION X ONLY BIT NVX",  VK_SUBPASS_DESCRIPTION_PER_VIEW_POSITION_X_ONLY_BIT_NVX},
  {"SUBPASS DESCRIPTION FRAGMENT REGION BIT QCOM",  VK_SUBPASS_DESCRIPTION_FRAGMENT_REGION_BIT_QCOM},
  {"SUBPASS DESCRIPTION SHADER RESOLVE BIT QCOM",  VK_SUBPASS_DESCRIPTION_SHADER_RESOLVE_BIT_QCOM},
};
const std::vector<std::pair<std::string, VkCommandPoolCreateFlagBits>> CommandPoolCreateFlagBits_map = {
  {"COMMAND POOL CREATE TRANSIENT BIT",  VK_COMMAND_POOL_CREATE_TRANSIENT_BIT},
  {"COMMAND POOL CREATE RESET COMMAND BUFFER BIT",  VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT},
  {"COMMAND POOL CREATE PROTECTED BIT",  VK_COMMAND_POOL_CREATE_PROTECTED_BIT},
};
const std::vector<std::pair<std::string, VkCommandPoolResetFlagBits>> CommandPoolResetFlagBits_map = {
  {"COMMAND POOL RESET RELEASE RESOURCES BIT",  VK_COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT},
};
const std::vector<std::pair<std::string, VkCommandBufferUsageFlagBits>> CommandBufferUsageFlagBits_map = {
  {"COMMAND BUFFER USAGE ONE TIME SUBMIT BIT",  VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT},
  {"COMMAND BUFFER USAGE RENDER PASS CONTINUE BIT",  VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT},
  {"COMMAND BUFFER USAGE SIMULTANEOUS USE BIT",  VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT},
};
const std::vector<std::pair<std::string, VkQueryControlFlagBits>> QueryControlFlagBits_map = {
  {"QUERY CONTROL PRECISE BIT",  VK_QUERY_CONTROL_PRECISE_BIT},
};
const std::vector<std::pair<std::string, VkCommandBufferResetFlagBits>> CommandBufferResetFlagBits_map = {
  {"COMMAND BUFFER RESET RELEASE RESOURCES BIT",  VK_COMMAND_BUFFER_RESET_RELEASE_RESOURCES_BIT},
};
const std::vector<std::pair<std::string, VkStencilFaceFlagBits>> StencilFaceFlagBits_map = {
  {"STENCIL FACE FRONT BIT",  VK_STENCIL_FACE_FRONT_BIT},
  {"STENCIL FACE BACK BIT",  VK_STENCIL_FACE_BACK_BIT},
  {"STENCIL FACE FRONT AND BACK",  VK_STENCIL_FACE_FRONT_AND_BACK},
  {"STENCIL FRONT AND BACK",  VK_STENCIL_FRONT_AND_BACK},
};
const std::vector<std::pair<std::string, VkPointClippingBehavior>> PointClippingBehavior_map = {
  {"POINT CLIPPING BEHAVIOR ALL CLIP PLANES",  VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES},
  {"POINT CLIPPING BEHAVIOR USER CLIP PLANES ONLY",  VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY},
  {"POINT CLIPPING BEHAVIOR ALL CLIP PLANES KHR",  VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES_KHR},
  {"POINT CLIPPING BEHAVIOR USER CLIP PLANES ONLY KHR",  VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY_KHR},
};
const std::vector<std::pair<std::string, VkTessellationDomainOrigin>> TessellationDomainOrigin_map = {
  {"TESSELLATION DOMAIN ORIGIN UPPER LEFT",  VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT},
  {"TESSELLATION DOMAIN ORIGIN LOWER LEFT",  VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT},
  {"TESSELLATION DOMAIN ORIGIN UPPER LEFT KHR",  VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT_KHR},
  {"TESSELLATION DOMAIN ORIGIN LOWER LEFT KHR",  VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT_KHR},
};
const std::vector<std::pair<std::string, VkSamplerYcbcrModelConversion>> SamplerYcbcrModelConversion_map = {
  {"SAMPLER YCBCR MODEL CONVERSION RGB IDENTITY",  VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY},
  {"SAMPLER YCBCR MODEL CONVERSION YCBCR IDENTITY",  VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY},
  {"SAMPLER YCBCR MODEL CONVERSION YCBCR 709",  VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709},
  {"SAMPLER YCBCR MODEL CONVERSION YCBCR 601",  VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601},
  {"SAMPLER YCBCR MODEL CONVERSION YCBCR 2020",  VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020},
  {"SAMPLER YCBCR MODEL CONVERSION RGB IDENTITY KHR",  VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY_KHR},
  {"SAMPLER YCBCR MODEL CONVERSION YCBCR IDENTITY KHR",  VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY_KHR},
  {"SAMPLER YCBCR MODEL CONVERSION YCBCR 709 KHR",  VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709_KHR},
  {"SAMPLER YCBCR MODEL CONVERSION YCBCR 601 KHR",  VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601_KHR},
  {"SAMPLER YCBCR MODEL CONVERSION YCBCR 2020 KHR",  VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020_KHR},
};
const std::vector<std::pair<std::string, VkSamplerYcbcrRange>> SamplerYcbcrRange_map = {
  {"SAMPLER YCBCR RANGE ITU FULL",  VK_SAMPLER_YCBCR_RANGE_ITU_FULL},
  {"SAMPLER YCBCR RANGE ITU NARROW",  VK_SAMPLER_YCBCR_RANGE_ITU_NARROW},
  {"SAMPLER YCBCR RANGE ITU FULL KHR",  VK_SAMPLER_YCBCR_RANGE_ITU_FULL_KHR},
  {"SAMPLER YCBCR RANGE ITU NARROW KHR",  VK_SAMPLER_YCBCR_RANGE_ITU_NARROW_KHR},
};
const std::vector<std::pair<std::string, VkChromaLocation>> ChromaLocation_map = {
  {"CHROMA LOCATION COSITED EVEN",  VK_CHROMA_LOCATION_COSITED_EVEN},
  {"CHROMA LOCATION MIDPOINT",  VK_CHROMA_LOCATION_MIDPOINT},
  {"CHROMA LOCATION COSITED EVEN KHR",  VK_CHROMA_LOCATION_COSITED_EVEN_KHR},
  {"CHROMA LOCATION MIDPOINT KHR",  VK_CHROMA_LOCATION_MIDPOINT_KHR},
};
const std::vector<std::pair<std::string, VkDescriptorUpdateTemplateType>> DescriptorUpdateTemplateType_map = {
  {"DESCRIPTOR UPDATE TEMPLATE TYPE DESCRIPTOR SET",  VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET},
  {"DESCRIPTOR UPDATE TEMPLATE TYPE PUSH DESCRIPTORS KHR",  VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_PUSH_DESCRIPTORS_KHR},
  {"DESCRIPTOR UPDATE TEMPLATE TYPE DESCRIPTOR SET KHR",  VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET_KHR},
};
const std::vector<std::pair<std::string, VkSubgroupFeatureFlagBits>> SubgroupFeatureFlagBits_map = {
  {"SUBGROUP FEATURE BASIC BIT",  VK_SUBGROUP_FEATURE_BASIC_BIT},
  {"SUBGROUP FEATURE VOTE BIT",  VK_SUBGROUP_FEATURE_VOTE_BIT},
  {"SUBGROUP FEATURE ARITHMETIC BIT",  VK_SUBGROUP_FEATURE_ARITHMETIC_BIT},
  {"SUBGROUP FEATURE BALLOT BIT",  VK_SUBGROUP_FEATURE_BALLOT_BIT},
  {"SUBGROUP FEATURE SHUFFLE BIT",  VK_SUBGROUP_FEATURE_SHUFFLE_BIT},
  {"SUBGROUP FEATURE SHUFFLE RELATIVE BIT",  VK_SUBGROUP_FEATURE_SHUFFLE_RELATIVE_BIT},
  {"SUBGROUP FEATURE CLUSTERED BIT",  VK_SUBGROUP_FEATURE_CLUSTERED_BIT},
  {"SUBGROUP FEATURE QUAD BIT",  VK_SUBGROUP_FEATURE_QUAD_BIT},
  {"SUBGROUP FEATURE PARTITIONED BIT NV",  VK_SUBGROUP_FEATURE_PARTITIONED_BIT_NV},
};
const std::vector<std::pair<std::string, VkPeerMemoryFeatureFlagBits>> PeerMemoryFeatureFlagBits_map = {
  {"PEER MEMORY FEATURE COPY SRC BIT",  VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT},
  {"PEER MEMORY FEATURE COPY DST BIT",  VK_PEER_MEMORY_FEATURE_COPY_DST_BIT},
  {"PEER MEMORY FEATURE GENERIC SRC BIT",  VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT},
  {"PEER MEMORY FEATURE GENERIC DST BIT",  VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT},
  {"PEER MEMORY FEATURE COPY SRC BIT KHR",  VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT_KHR},
  {"PEER MEMORY FEATURE COPY DST BIT KHR",  VK_PEER_MEMORY_FEATURE_COPY_DST_BIT_KHR},
  {"PEER MEMORY FEATURE GENERIC SRC BIT KHR",  VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT_KHR},
  {"PEER MEMORY FEATURE GENERIC DST BIT KHR",  VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT_KHR},
};
const std::vector<std::pair<std::string, VkMemoryAllocateFlagBits>> MemoryAllocateFlagBits_map = {
  {"MEMORY ALLOCATE DEVICE MASK BIT",  VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT},
  {"MEMORY ALLOCATE DEVICE ADDRESS BIT",  VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT},
  {"MEMORY ALLOCATE DEVICE ADDRESS CAPTURE REPLAY BIT",  VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT},
  {"MEMORY ALLOCATE DEVICE MASK BIT KHR",  VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT_KHR},
  {"MEMORY ALLOCATE DEVICE ADDRESS BIT KHR",  VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT_KHR},
  {"MEMORY ALLOCATE DEVICE ADDRESS CAPTURE REPLAY BIT KHR",  VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR},
};
const std::vector<std::pair<std::string, VkExternalMemoryHandleTypeFlagBits>> ExternalMemoryHandleTypeFlagBits_map = {
  {"EXTERNAL MEMORY HANDLE TYPE OPAQUE FD BIT",  VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT},
  {"EXTERNAL MEMORY HANDLE TYPE OPAQUE WIN32 BIT",  VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT},
  {"EXTERNAL MEMORY HANDLE TYPE OPAQUE WIN32 KMT BIT",  VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT},
  {"EXTERNAL MEMORY HANDLE TYPE D3D11 TEXTURE BIT",  VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT},
  {"EXTERNAL MEMORY HANDLE TYPE D3D11 TEXTURE KMT BIT",  VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT},
  {"EXTERNAL MEMORY HANDLE TYPE D3D12 HEAP BIT",  VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT},
  {"EXTERNAL MEMORY HANDLE TYPE D3D12 RESOURCE BIT",  VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT},
  {"EXTERNAL MEMORY HANDLE TYPE DMA BUF BIT EXT",  VK_EXTERNAL_MEMORY_HANDLE_TYPE_DMA_BUF_BIT_EXT},
  {"EXTERNAL MEMORY HANDLE TYPE ANDROID HARDWARE BUFFER BIT ANDROID",  VK_EXTERNAL_MEMORY_HANDLE_TYPE_ANDROID_HARDWARE_BUFFER_BIT_ANDROID},
  {"EXTERNAL MEMORY HANDLE TYPE HOST ALLOCATION BIT EXT",  VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_ALLOCATION_BIT_EXT},
  {"EXTERNAL MEMORY HANDLE TYPE HOST MAPPED FOREIGN MEMORY BIT EXT",  VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_MAPPED_FOREIGN_MEMORY_BIT_EXT},
  {"EXTERNAL MEMORY HANDLE TYPE OPAQUE FD BIT KHR",  VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT_KHR},
  {"EXTERNAL MEMORY HANDLE TYPE OPAQUE WIN32 BIT KHR",  VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR},
  {"EXTERNAL MEMORY HANDLE TYPE OPAQUE WIN32 KMT BIT KHR",  VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR},
  {"EXTERNAL MEMORY HANDLE TYPE D3D11 TEXTURE BIT KHR",  VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT_KHR},
  {"EXTERNAL MEMORY HANDLE TYPE D3D11 TEXTURE KMT BIT KHR",  VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT_KHR},
  {"EXTERNAL MEMORY HANDLE TYPE D3D12 HEAP BIT KHR",  VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT_KHR},
  {"EXTERNAL MEMORY HANDLE TYPE D3D12 RESOURCE BIT KHR",  VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT_KHR},
};
const std::vector<std::pair<std::string, VkExternalMemoryFeatureFlagBits>> ExternalMemoryFeatureFlagBits_map = {
  {"EXTERNAL MEMORY FEATURE DEDICATED ONLY BIT",  VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT},
  {"EXTERNAL MEMORY FEATURE EXPORTABLE BIT",  VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT},
  {"EXTERNAL MEMORY FEATURE IMPORTABLE BIT",  VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT},
  {"EXTERNAL MEMORY FEATURE DEDICATED ONLY BIT KHR",  VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_KHR},
  {"EXTERNAL MEMORY FEATURE EXPORTABLE BIT KHR",  VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_KHR},
  {"EXTERNAL MEMORY FEATURE IMPORTABLE BIT KHR",  VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_KHR},
};
const std::vector<std::pair<std::string, VkExternalFenceHandleTypeFlagBits>> ExternalFenceHandleTypeFlagBits_map = {
  {"EXTERNAL FENCE HANDLE TYPE OPAQUE FD BIT",  VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT},
  {"EXTERNAL FENCE HANDLE TYPE OPAQUE WIN32 BIT",  VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT},
  {"EXTERNAL FENCE HANDLE TYPE OPAQUE WIN32 KMT BIT",  VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT},
  {"EXTERNAL FENCE HANDLE TYPE SYNC FD BIT",  VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT},
  {"EXTERNAL FENCE HANDLE TYPE OPAQUE FD BIT KHR",  VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR},
  {"EXTERNAL FENCE HANDLE TYPE OPAQUE WIN32 BIT KHR",  VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR},
  {"EXTERNAL FENCE HANDLE TYPE OPAQUE WIN32 KMT BIT KHR",  VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR},
  {"EXTERNAL FENCE HANDLE TYPE SYNC FD BIT KHR",  VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT_KHR},
};
const std::vector<std::pair<std::string, VkExternalFenceFeatureFlagBits>> ExternalFenceFeatureFlagBits_map = {
  {"EXTERNAL FENCE FEATURE EXPORTABLE BIT",  VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT},
  {"EXTERNAL FENCE FEATURE IMPORTABLE BIT",  VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT},
  {"EXTERNAL FENCE FEATURE EXPORTABLE BIT KHR",  VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT_KHR},
  {"EXTERNAL FENCE FEATURE IMPORTABLE BIT KHR",  VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT_KHR},
};
const std::vector<std::pair<std::string, VkFenceImportFlagBits>> FenceImportFlagBits_map = {
  {"FENCE IMPORT TEMPORARY BIT",  VK_FENCE_IMPORT_TEMPORARY_BIT},
  {"FENCE IMPORT TEMPORARY BIT KHR",  VK_FENCE_IMPORT_TEMPORARY_BIT_KHR},
};
const std::vector<std::pair<std::string, VkSemaphoreImportFlagBits>> SemaphoreImportFlagBits_map = {
  {"SEMAPHORE IMPORT TEMPORARY BIT",  VK_SEMAPHORE_IMPORT_TEMPORARY_BIT},
  {"SEMAPHORE IMPORT TEMPORARY BIT KHR",  VK_SEMAPHORE_IMPORT_TEMPORARY_BIT_KHR},
};
const std::vector<std::pair<std::string, VkExternalSemaphoreHandleTypeFlagBits>> ExternalSemaphoreHandleTypeFlagBits_map = {
  {"EXTERNAL SEMAPHORE HANDLE TYPE OPAQUE FD BIT",  VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT},
  {"EXTERNAL SEMAPHORE HANDLE TYPE OPAQUE WIN32 BIT",  VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT},
  {"EXTERNAL SEMAPHORE HANDLE TYPE OPAQUE WIN32 KMT BIT",  VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT},
  {"EXTERNAL SEMAPHORE HANDLE TYPE D3D12 FENCE BIT",  VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT},
  {"EXTERNAL SEMAPHORE HANDLE TYPE SYNC FD BIT",  VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT},
  {"EXTERNAL SEMAPHORE HANDLE TYPE D3D11 FENCE BIT",  VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D11_FENCE_BIT},
  {"EXTERNAL SEMAPHORE HANDLE TYPE OPAQUE FD BIT KHR",  VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR},
  {"EXTERNAL SEMAPHORE HANDLE TYPE OPAQUE WIN32 BIT KHR",  VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR},
  {"EXTERNAL SEMAPHORE HANDLE TYPE OPAQUE WIN32 KMT BIT KHR",  VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR},
  {"EXTERNAL SEMAPHORE HANDLE TYPE D3D12 FENCE BIT KHR",  VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT_KHR},
  {"EXTERNAL SEMAPHORE HANDLE TYPE SYNC FD BIT KHR",  VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT_KHR},
};
const std::vector<std::pair<std::string, VkExternalSemaphoreFeatureFlagBits>> ExternalSemaphoreFeatureFlagBits_map = {
  {"EXTERNAL SEMAPHORE FEATURE EXPORTABLE BIT",  VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT},
  {"EXTERNAL SEMAPHORE FEATURE IMPORTABLE BIT",  VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT},
  {"EXTERNAL SEMAPHORE FEATURE EXPORTABLE BIT KHR",  VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT_KHR},
  {"EXTERNAL SEMAPHORE FEATURE IMPORTABLE BIT KHR",  VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT_KHR},
};
const std::vector<std::pair<std::string, VkDriverId>> DriverId_map = {
  {"DRIVER ID AMD PROPRIETARY",  VK_DRIVER_ID_AMD_PROPRIETARY},
  {"DRIVER ID AMD OPEN SOURCE",  VK_DRIVER_ID_AMD_OPEN_SOURCE},
  {"DRIVER ID MESA RADV",  VK_DRIVER_ID_MESA_RADV},
  {"DRIVER ID NVIDIA PROPRIETARY",  VK_DRIVER_ID_NVIDIA_PROPRIETARY},
  {"DRIVER ID INTEL PROPRIETARY WINDOWS",  VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS},
  {"DRIVER ID INTEL OPEN SOURCE MESA",  VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA},
  {"DRIVER ID IMAGINATION PROPRIETARY",  VK_DRIVER_ID_IMAGINATION_PROPRIETARY},
  {"DRIVER ID QUALCOMM PROPRIETARY",  VK_DRIVER_ID_QUALCOMM_PROPRIETARY},
  {"DRIVER ID ARM PROPRIETARY",  VK_DRIVER_ID_ARM_PROPRIETARY},
  {"DRIVER ID GOOGLE SWIFTSHADER",  VK_DRIVER_ID_GOOGLE_SWIFTSHADER},
  {"DRIVER ID GGP PROPRIETARY",  VK_DRIVER_ID_GGP_PROPRIETARY},
  {"DRIVER ID BROADCOM PROPRIETARY",  VK_DRIVER_ID_BROADCOM_PROPRIETARY},
  {"DRIVER ID MESA LLVMPIPE",  VK_DRIVER_ID_MESA_LLVMPIPE},
  {"DRIVER ID MOLTENVK",  VK_DRIVER_ID_MOLTENVK},
  {"DRIVER ID AMD PROPRIETARY KHR",  VK_DRIVER_ID_AMD_PROPRIETARY_KHR},
  {"DRIVER ID AMD OPEN SOURCE KHR",  VK_DRIVER_ID_AMD_OPEN_SOURCE_KHR},
  {"DRIVER ID MESA RADV KHR",  VK_DRIVER_ID_MESA_RADV_KHR},
  {"DRIVER ID NVIDIA PROPRIETARY KHR",  VK_DRIVER_ID_NVIDIA_PROPRIETARY_KHR},
  {"DRIVER ID INTEL PROPRIETARY WINDOWS KHR",  VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS_KHR},
  {"DRIVER ID INTEL OPEN SOURCE MESA KHR",  VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA_KHR},
  {"DRIVER ID IMAGINATION PROPRIETARY KHR",  VK_DRIVER_ID_IMAGINATION_PROPRIETARY_KHR},
  {"DRIVER ID QUALCOMM PROPRIETARY KHR",  VK_DRIVER_ID_QUALCOMM_PROPRIETARY_KHR},
  {"DRIVER ID ARM PROPRIETARY KHR",  VK_DRIVER_ID_ARM_PROPRIETARY_KHR},
  {"DRIVER ID GOOGLE SWIFTSHADER KHR",  VK_DRIVER_ID_GOOGLE_SWIFTSHADER_KHR},
  {"DRIVER ID GGP PROPRIETARY KHR",  VK_DRIVER_ID_GGP_PROPRIETARY_KHR},
  {"DRIVER ID BROADCOM PROPRIETARY KHR",  VK_DRIVER_ID_BROADCOM_PROPRIETARY_KHR},
};
const std::vector<std::pair<std::string, VkShaderFloatControlsIndependence>> ShaderFloatControlsIndependence_map = {
  {"SHADER FLOAT CONTROLS INDEPENDENCE 32 BIT ONLY",  VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY},
  {"SHADER FLOAT CONTROLS INDEPENDENCE ALL",  VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL},
  {"SHADER FLOAT CONTROLS INDEPENDENCE NONE",  VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE},
  {"SHADER FLOAT CONTROLS INDEPENDENCE 32 BIT ONLY KHR",  VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY_KHR},
  {"SHADER FLOAT CONTROLS INDEPENDENCE ALL KHR",  VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL_KHR},
  {"SHADER FLOAT CONTROLS INDEPENDENCE NONE KHR",  VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE_KHR},
};
const std::vector<std::pair<std::string, VkSamplerReductionMode>> SamplerReductionMode_map = {
  {"SAMPLER REDUCTION MODE WEIGHTED AVERAGE",  VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE},
  {"SAMPLER REDUCTION MODE MIN",  VK_SAMPLER_REDUCTION_MODE_MIN},
  {"SAMPLER REDUCTION MODE MAX",  VK_SAMPLER_REDUCTION_MODE_MAX},
  {"SAMPLER REDUCTION MODE WEIGHTED AVERAGE EXT",  VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE_EXT},
  {"SAMPLER REDUCTION MODE MIN EXT",  VK_SAMPLER_REDUCTION_MODE_MIN_EXT},
  {"SAMPLER REDUCTION MODE MAX EXT",  VK_SAMPLER_REDUCTION_MODE_MAX_EXT},
};
const std::vector<std::pair<std::string, VkSemaphoreType>> SemaphoreType_map = {
  {"SEMAPHORE TYPE BINARY",  VK_SEMAPHORE_TYPE_BINARY},
  {"SEMAPHORE TYPE TIMELINE",  VK_SEMAPHORE_TYPE_TIMELINE},
  {"SEMAPHORE TYPE BINARY KHR",  VK_SEMAPHORE_TYPE_BINARY_KHR},
  {"SEMAPHORE TYPE TIMELINE KHR",  VK_SEMAPHORE_TYPE_TIMELINE_KHR},
};
const std::vector<std::pair<std::string, VkResolveModeFlagBits>> ResolveModeFlagBits_map = {
  {"RESOLVE MODE NONE",  VK_RESOLVE_MODE_NONE},
  {"RESOLVE MODE SAMPLE ZERO BIT",  VK_RESOLVE_MODE_SAMPLE_ZERO_BIT},
  {"RESOLVE MODE AVERAGE BIT",  VK_RESOLVE_MODE_AVERAGE_BIT},
  {"RESOLVE MODE MIN BIT",  VK_RESOLVE_MODE_MIN_BIT},
  {"RESOLVE MODE MAX BIT",  VK_RESOLVE_MODE_MAX_BIT},
  {"RESOLVE MODE NONE KHR",  VK_RESOLVE_MODE_NONE_KHR},
  {"RESOLVE MODE SAMPLE ZERO BIT KHR",  VK_RESOLVE_MODE_SAMPLE_ZERO_BIT_KHR},
  {"RESOLVE MODE AVERAGE BIT KHR",  VK_RESOLVE_MODE_AVERAGE_BIT_KHR},
  {"RESOLVE MODE MIN BIT KHR",  VK_RESOLVE_MODE_MIN_BIT_KHR},
  {"RESOLVE MODE MAX BIT KHR",  VK_RESOLVE_MODE_MAX_BIT_KHR},
};
const std::vector<std::pair<std::string, VkDescriptorBindingFlagBits>> DescriptorBindingFlagBits_map = {
  {"DESCRIPTOR BINDING UPDATE AFTER BIND BIT",  VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT},
  {"DESCRIPTOR BINDING UPDATE UNUSED WHILE PENDING BIT",  VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT},
  {"DESCRIPTOR BINDING PARTIALLY BOUND BIT",  VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT},
  {"DESCRIPTOR BINDING VARIABLE DESCRIPTOR COUNT BIT",  VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT},
  {"DESCRIPTOR BINDING UPDATE AFTER BIND BIT EXT",  VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT_EXT},
  {"DESCRIPTOR BINDING UPDATE UNUSED WHILE PENDING BIT EXT",  VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT_EXT},
  {"DESCRIPTOR BINDING PARTIALLY BOUND BIT EXT",  VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT_EXT},
  {"DESCRIPTOR BINDING VARIABLE DESCRIPTOR COUNT BIT EXT",  VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT_EXT},
};
const std::vector<std::pair<std::string, VkSemaphoreWaitFlagBits>> SemaphoreWaitFlagBits_map = {
  {"SEMAPHORE WAIT ANY BIT",  VK_SEMAPHORE_WAIT_ANY_BIT},
  {"SEMAPHORE WAIT ANY BIT KHR",  VK_SEMAPHORE_WAIT_ANY_BIT_KHR},
};
const std::vector<std::pair<std::string, VkPresentModeKHR>> PresentModeKHR_map = {
  {"PRESENT MODE IMMEDIATE KHR",  VK_PRESENT_MODE_IMMEDIATE_KHR},
  {"PRESENT MODE MAILBOX KHR",  VK_PRESENT_MODE_MAILBOX_KHR},
  {"PRESENT MODE FIFO KHR",  VK_PRESENT_MODE_FIFO_KHR},
  {"PRESENT MODE FIFO RELAXED KHR",  VK_PRESENT_MODE_FIFO_RELAXED_KHR},
  {"PRESENT MODE SHARED DEMAND REFRESH KHR",  VK_PRESENT_MODE_SHARED_DEMAND_REFRESH_KHR},
  {"PRESENT MODE SHARED CONTINUOUS REFRESH KHR",  VK_PRESENT_MODE_SHARED_CONTINUOUS_REFRESH_KHR},
};
const std::vector<std::pair<std::string, VkColorSpaceKHR>> ColorSpaceKHR_map = {
  {"COLOR SPACE SRGB NONLINEAR KHR",  VK_COLOR_SPACE_SRGB_NONLINEAR_KHR},
  {"COLOR SPACE DISPLAY P3 NONLINEAR EXT",  VK_COLOR_SPACE_DISPLAY_P3_NONLINEAR_EXT},
  {"COLOR SPACE EXTENDED SRGB LINEAR EXT",  VK_COLOR_SPACE_EXTENDED_SRGB_LINEAR_EXT},
  {"COLOR SPACE DISPLAY P3 LINEAR EXT",  VK_COLOR_SPACE_DISPLAY_P3_LINEAR_EXT},
  {"COLOR SPACE DCI P3 NONLINEAR EXT",  VK_COLOR_SPACE_DCI_P3_NONLINEAR_EXT},
  {"COLOR SPACE BT709 LINEAR EXT",  VK_COLOR_SPACE_BT709_LINEAR_EXT},
  {"COLOR SPACE BT709 NONLINEAR EXT",  VK_COLOR_SPACE_BT709_NONLINEAR_EXT},
  {"COLOR SPACE BT2020 LINEAR EXT",  VK_COLOR_SPACE_BT2020_LINEAR_EXT},
  {"COLOR SPACE HDR10 ST2084 EXT",  VK_COLOR_SPACE_HDR10_ST2084_EXT},
  {"COLOR SPACE DOLBYVISION EXT",  VK_COLOR_SPACE_DOLBYVISION_EXT},
  {"COLOR SPACE HDR10 HLG EXT",  VK_COLOR_SPACE_HDR10_HLG_EXT},
  {"COLOR SPACE ADOBERGB LINEAR EXT",  VK_COLOR_SPACE_ADOBERGB_LINEAR_EXT},
  {"COLOR SPACE ADOBERGB NONLINEAR EXT",  VK_COLOR_SPACE_ADOBERGB_NONLINEAR_EXT},
  {"COLOR SPACE PASS THROUGH EXT",  VK_COLOR_SPACE_PASS_THROUGH_EXT},
  {"COLOR SPACE EXTENDED SRGB NONLINEAR EXT",  VK_COLOR_SPACE_EXTENDED_SRGB_NONLINEAR_EXT},
  {"COLOR SPACE DISPLAY NATIVE AMD",  VK_COLOR_SPACE_DISPLAY_NATIVE_AMD},
  {"COLORSPACE SRGB NONLINEAR KHR",  VK_COLORSPACE_SRGB_NONLINEAR_KHR},
  {"COLOR SPACE DCI P3 LINEAR EXT",  VK_COLOR_SPACE_DCI_P3_LINEAR_EXT},
};
const std::vector<std::pair<std::string, VkSurfaceTransformFlagBitsKHR>> SurfaceTransformFlagBitsKHR_map = {
  {"SURFACE TRANSFORM IDENTITY BIT KHR",  VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR},
  {"SURFACE TRANSFORM ROTATE 90 BIT KHR",  VK_SURFACE_TRANSFORM_ROTATE_90_BIT_KHR},
  {"SURFACE TRANSFORM ROTATE 180 BIT KHR",  VK_SURFACE_TRANSFORM_ROTATE_180_BIT_KHR},
  {"SURFACE TRANSFORM ROTATE 270 BIT KHR",  VK_SURFACE_TRANSFORM_ROTATE_270_BIT_KHR},
  {"SURFACE TRANSFORM HORIZONTAL MIRROR BIT KHR",  VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_BIT_KHR},
  {"SURFACE TRANSFORM HORIZONTAL MIRROR ROTATE 90 BIT KHR",  VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_90_BIT_KHR},
  {"SURFACE TRANSFORM HORIZONTAL MIRROR ROTATE 180 BIT KHR",  VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_180_BIT_KHR},
  {"SURFACE TRANSFORM HORIZONTAL MIRROR ROTATE 270 BIT KHR",  VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_270_BIT_KHR},
  {"SURFACE TRANSFORM INHERIT BIT KHR",  VK_SURFACE_TRANSFORM_INHERIT_BIT_KHR},
};
const std::vector<std::pair<std::string, VkCompositeAlphaFlagBitsKHR>> CompositeAlphaFlagBitsKHR_map = {
  {"COMPOSITE ALPHA OPAQUE BIT KHR",  VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR},
  {"COMPOSITE ALPHA PRE MULTIPLIED BIT KHR",  VK_COMPOSITE_ALPHA_PRE_MULTIPLIED_BIT_KHR},
  {"COMPOSITE ALPHA POST MULTIPLIED BIT KHR",  VK_COMPOSITE_ALPHA_POST_MULTIPLIED_BIT_KHR},
  {"COMPOSITE ALPHA INHERIT BIT KHR",  VK_COMPOSITE_ALPHA_INHERIT_BIT_KHR},
};
const std::vector<std::pair<std::string, VkSwapchainCreateFlagBitsKHR>> SwapchainCreateFlagBitsKHR_map = {
  {"SWAPCHAIN CREATE SPLIT INSTANCE BIND REGIONS BIT KHR",  VK_SWAPCHAIN_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR},
  {"SWAPCHAIN CREATE PROTECTED BIT KHR",  VK_SWAPCHAIN_CREATE_PROTECTED_BIT_KHR},
  {"SWAPCHAIN CREATE MUTABLE FORMAT BIT KHR",  VK_SWAPCHAIN_CREATE_MUTABLE_FORMAT_BIT_KHR},
};
const std::vector<std::pair<std::string, VkDeviceGroupPresentModeFlagBitsKHR>> DeviceGroupPresentModeFlagBitsKHR_map = {
  {"DEVICE GROUP PRESENT MODE LOCAL BIT KHR",  VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_BIT_KHR},
  {"DEVICE GROUP PRESENT MODE REMOTE BIT KHR",  VK_DEVICE_GROUP_PRESENT_MODE_REMOTE_BIT_KHR},
  {"DEVICE GROUP PRESENT MODE SUM BIT KHR",  VK_DEVICE_GROUP_PRESENT_MODE_SUM_BIT_KHR},
  {"DEVICE GROUP PRESENT MODE LOCAL MULTI DEVICE BIT KHR",  VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_MULTI_DEVICE_BIT_KHR},
};
const std::vector<std::pair<std::string, VkDisplayPlaneAlphaFlagBitsKHR>> DisplayPlaneAlphaFlagBitsKHR_map = {
  {"DISPLAY PLANE ALPHA OPAQUE BIT KHR",  VK_DISPLAY_PLANE_ALPHA_OPAQUE_BIT_KHR},
  {"DISPLAY PLANE ALPHA GLOBAL BIT KHR",  VK_DISPLAY_PLANE_ALPHA_GLOBAL_BIT_KHR},
  {"DISPLAY PLANE ALPHA PER PIXEL BIT KHR",  VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_BIT_KHR},
  {"DISPLAY PLANE ALPHA PER PIXEL PREMULTIPLIED BIT KHR",  VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_PREMULTIPLIED_BIT_KHR},
};
const std::vector<std::pair<std::string, VkPerformanceCounterUnitKHR>> PerformanceCounterUnitKHR_map = {
  {"PERFORMANCE COUNTER UNIT GENERIC KHR",  VK_PERFORMANCE_COUNTER_UNIT_GENERIC_KHR},
  {"PERFORMANCE COUNTER UNIT PERCENTAGE KHR",  VK_PERFORMANCE_COUNTER_UNIT_PERCENTAGE_KHR},
  {"PERFORMANCE COUNTER UNIT NANOSECONDS KHR",  VK_PERFORMANCE_COUNTER_UNIT_NANOSECONDS_KHR},
  {"PERFORMANCE COUNTER UNIT BYTES KHR",  VK_PERFORMANCE_COUNTER_UNIT_BYTES_KHR},
  {"PERFORMANCE COUNTER UNIT BYTES PER SECOND KHR",  VK_PERFORMANCE_COUNTER_UNIT_BYTES_PER_SECOND_KHR},
  {"PERFORMANCE COUNTER UNIT KELVIN KHR",  VK_PERFORMANCE_COUNTER_UNIT_KELVIN_KHR},
  {"PERFORMANCE COUNTER UNIT WATTS KHR",  VK_PERFORMANCE_COUNTER_UNIT_WATTS_KHR},
  {"PERFORMANCE COUNTER UNIT VOLTS KHR",  VK_PERFORMANCE_COUNTER_UNIT_VOLTS_KHR},
  {"PERFORMANCE COUNTER UNIT AMPS KHR",  VK_PERFORMANCE_COUNTER_UNIT_AMPS_KHR},
  {"PERFORMANCE COUNTER UNIT HERTZ KHR",  VK_PERFORMANCE_COUNTER_UNIT_HERTZ_KHR},
  {"PERFORMANCE COUNTER UNIT CYCLES KHR",  VK_PERFORMANCE_COUNTER_UNIT_CYCLES_KHR},
};
const std::vector<std::pair<std::string, VkPerformanceCounterScopeKHR>> PerformanceCounterScopeKHR_map = {
  {"PERFORMANCE COUNTER SCOPE COMMAND BUFFER KHR",  VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_BUFFER_KHR},
  {"PERFORMANCE COUNTER SCOPE RENDER PASS KHR",  VK_PERFORMANCE_COUNTER_SCOPE_RENDER_PASS_KHR},
  {"PERFORMANCE COUNTER SCOPE COMMAND KHR",  VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_KHR},
  {"QUERY SCOPE COMMAND BUFFER KHR",  VK_QUERY_SCOPE_COMMAND_BUFFER_KHR},
  {"QUERY SCOPE RENDER PASS KHR",  VK_QUERY_SCOPE_RENDER_PASS_KHR},
  {"QUERY SCOPE COMMAND KHR",  VK_QUERY_SCOPE_COMMAND_KHR},
};
const std::vector<std::pair<std::string, VkPerformanceCounterStorageKHR>> PerformanceCounterStorageKHR_map = {
  {"PERFORMANCE COUNTER STORAGE INT32 KHR",  VK_PERFORMANCE_COUNTER_STORAGE_INT32_KHR},
  {"PERFORMANCE COUNTER STORAGE INT64 KHR",  VK_PERFORMANCE_COUNTER_STORAGE_INT64_KHR},
  {"PERFORMANCE COUNTER STORAGE UINT32 KHR",  VK_PERFORMANCE_COUNTER_STORAGE_UINT32_KHR},
  {"PERFORMANCE COUNTER STORAGE UINT64 KHR",  VK_PERFORMANCE_COUNTER_STORAGE_UINT64_KHR},
  {"PERFORMANCE COUNTER STORAGE FLOAT32 KHR",  VK_PERFORMANCE_COUNTER_STORAGE_FLOAT32_KHR},
  {"PERFORMANCE COUNTER STORAGE FLOAT64 KHR",  VK_PERFORMANCE_COUNTER_STORAGE_FLOAT64_KHR},
};
const std::vector<std::pair<std::string, VkPerformanceCounterDescriptionFlagBitsKHR>> PerformanceCounterDescriptionFlagBitsKHR_map = {
  {"PERFORMANCE COUNTER DESCRIPTION PERFORMANCE IMPACTING BIT KHR",  VK_PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_BIT_KHR},
  {"PERFORMANCE COUNTER DESCRIPTION CONCURRENTLY IMPACTED BIT KHR",  VK_PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_BIT_KHR},
  {"PERFORMANCE COUNTER DESCRIPTION PERFORMANCE IMPACTING KHR",  VK_PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_KHR},
  {"PERFORMANCE COUNTER DESCRIPTION CONCURRENTLY IMPACTED KHR",  VK_PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_KHR},
};
const std::vector<std::pair<std::string, VkAcquireProfilingLockFlagBitsKHR>> AcquireProfilingLockFlagBitsKHR_map = {
};
const std::vector<std::pair<std::string, VkFragmentShadingRateCombinerOpKHR>> FragmentShadingRateCombinerOpKHR_map = {
  {"FRAGMENT SHADING RATE COMBINER OP KEEP KHR",  VK_FRAGMENT_SHADING_RATE_COMBINER_OP_KEEP_KHR},
  {"FRAGMENT SHADING RATE COMBINER OP REPLACE KHR",  VK_FRAGMENT_SHADING_RATE_COMBINER_OP_REPLACE_KHR},
  {"FRAGMENT SHADING RATE COMBINER OP MIN KHR",  VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MIN_KHR},
  {"FRAGMENT SHADING RATE COMBINER OP MAX KHR",  VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MAX_KHR},
  {"FRAGMENT SHADING RATE COMBINER OP MUL KHR",  VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MUL_KHR},
};
const std::vector<std::pair<std::string, VkPipelineExecutableStatisticFormatKHR>> PipelineExecutableStatisticFormatKHR_map = {
  {"PIPELINE EXECUTABLE STATISTIC FORMAT BOOL32 KHR",  VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_BOOL32_KHR},
  {"PIPELINE EXECUTABLE STATISTIC FORMAT INT64 KHR",  VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_INT64_KHR},
  {"PIPELINE EXECUTABLE STATISTIC FORMAT UINT64 KHR",  VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_UINT64_KHR},
  {"PIPELINE EXECUTABLE STATISTIC FORMAT FLOAT64 KHR",  VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_FLOAT64_KHR},
};
const std::vector<std::pair<std::string, VkDebugReportObjectTypeEXT>> DebugReportObjectTypeEXT_map = {
  {"DEBUG REPORT OBJECT TYPE UNKNOWN EXT",  VK_DEBUG_REPORT_OBJECT_TYPE_UNKNOWN_EXT},
  {"DEBUG REPORT OBJECT TYPE INSTANCE EXT",  VK_DEBUG_REPORT_OBJECT_TYPE_INSTANCE_EXT},
  {"DEBUG REPORT OBJECT TYPE PHYSICAL DEVICE EXT",  VK_DEBUG_REPORT_OBJECT_TYPE_PHYSICAL_DEVICE_EXT},
  {"DEBUG REPORT OBJECT TYPE DEVICE EXT",  VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_EXT},
  {"DEBUG REPORT OBJECT TYPE QUEUE EXT",  VK_DEBUG_REPORT_OBJECT_TYPE_QUEUE_EXT},
  {"DEBUG REPORT OBJECT TYPE SEMAPHORE EXT",  VK_DEBUG_REPORT_OBJECT_TYPE_SEMAPHORE_EXT},
  {"DEBUG REPORT OBJECT TYPE COMMAND BUFFER EXT",  VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_BUFFER_EXT},
  {"DEBUG REPORT OBJECT TYPE FENCE EXT",  VK_DEBUG_REPORT_OBJECT_TYPE_FENCE_EXT},
  {"DEBUG REPORT OBJECT TYPE DEVICE MEMORY EXT",  VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_MEMORY_EXT},
  {"DEBUG REPORT OBJECT TYPE BUFFER EXT",  VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_EXT},
  {"DEBUG REPORT OBJECT TYPE IMAGE EXT",  VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_EXT},
  {"DEBUG REPORT OBJECT TYPE EVENT EXT",  VK_DEBUG_REPORT_OBJECT_TYPE_EVENT_EXT},
  {"DEBUG REPORT OBJECT TYPE QUERY POOL EXT",  VK_DEBUG_REPORT_OBJECT_TYPE_QUERY_POOL_EXT},
  {"DEBUG REPORT OBJECT TYPE BUFFER VIEW EXT",  VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_VIEW_EXT},
  {"DEBUG REPORT OBJECT TYPE IMAGE VIEW EXT",  VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_VIEW_EXT},
  {"DEBUG REPORT OBJECT TYPE SHADER MODULE EXT",  VK_DEBUG_REPORT_OBJECT_TYPE_SHADER_MODULE_EXT},
  {"DEBUG REPORT OBJECT TYPE PIPELINE CACHE EXT",  VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_CACHE_EXT},
  {"DEBUG REPORT OBJECT TYPE PIPELINE LAYOUT EXT",  VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_LAYOUT_EXT},
  {"DEBUG REPORT OBJECT TYPE RENDER PASS EXT",  VK_DEBUG_REPORT_OBJECT_TYPE_RENDER_PASS_EXT},
  {"DEBUG REPORT OBJECT TYPE PIPELINE EXT",  VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_EXT},
  {"DEBUG REPORT OBJECT TYPE DESCRIPTOR SET LAYOUT EXT",  VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT_EXT},
  {"DEBUG REPORT OBJECT TYPE SAMPLER EXT",  VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_EXT},
  {"DEBUG REPORT OBJECT TYPE DESCRIPTOR POOL EXT",  VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_POOL_EXT},
  {"DEBUG REPORT OBJECT TYPE DESCRIPTOR SET EXT",  VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_EXT},
  {"DEBUG REPORT OBJECT TYPE FRAMEBUFFER EXT",  VK_DEBUG_REPORT_OBJECT_TYPE_FRAMEBUFFER_EXT},
  {"DEBUG REPORT OBJECT TYPE COMMAND POOL EXT",  VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_POOL_EXT},
  {"DEBUG REPORT OBJECT TYPE SURFACE KHR EXT",  VK_DEBUG_REPORT_OBJECT_TYPE_SURFACE_KHR_EXT},
  {"DEBUG REPORT OBJECT TYPE SWAPCHAIN KHR EXT",  VK_DEBUG_REPORT_OBJECT_TYPE_SWAPCHAIN_KHR_EXT},
  {"DEBUG REPORT OBJECT TYPE DEBUG REPORT CALLBACK EXT EXT",  VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT_EXT},
  {"DEBUG REPORT OBJECT TYPE DISPLAY KHR EXT",  VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_KHR_EXT},
  {"DEBUG REPORT OBJECT TYPE DISPLAY MODE KHR EXT",  VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_MODE_KHR_EXT},
  {"DEBUG REPORT OBJECT TYPE VALIDATION CACHE EXT EXT",  VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT_EXT},
  {"DEBUG REPORT OBJECT TYPE SAMPLER YCBCR CONVERSION EXT",  VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_EXT},
  {"DEBUG REPORT OBJECT TYPE DESCRIPTOR UPDATE TEMPLATE EXT",  VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_EXT},
  {"DEBUG REPORT OBJECT TYPE ACCELERATION STRUCTURE KHR EXT",  VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR_EXT},
  {"DEBUG REPORT OBJECT TYPE ACCELERATION STRUCTURE NV EXT",  VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV_EXT},
  {"DEBUG REPORT OBJECT TYPE DEBUG REPORT EXT",  VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_EXT},
  {"DEBUG REPORT OBJECT TYPE VALIDATION CACHE EXT",  VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT},
  {"DEBUG REPORT OBJECT TYPE DESCRIPTOR UPDATE TEMPLATE KHR EXT",  VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR_EXT},
  {"DEBUG REPORT OBJECT TYPE SAMPLER YCBCR CONVERSION KHR EXT",  VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR_EXT},
};
const std::vector<std::pair<std::string, VkDebugReportFlagBitsEXT>> DebugReportFlagBitsEXT_map = {
  {"DEBUG REPORT INFORMATION BIT EXT",  VK_DEBUG_REPORT_INFORMATION_BIT_EXT},
  {"DEBUG REPORT WARNING BIT EXT",  VK_DEBUG_REPORT_WARNING_BIT_EXT},
  {"DEBUG REPORT PERFORMANCE WARNING BIT EXT",  VK_DEBUG_REPORT_PERFORMANCE_WARNING_BIT_EXT},
  {"DEBUG REPORT ERROR BIT EXT",  VK_DEBUG_REPORT_ERROR_BIT_EXT},
  {"DEBUG REPORT DEBUG BIT EXT",  VK_DEBUG_REPORT_DEBUG_BIT_EXT},
};
const std::vector<std::pair<std::string, VkRasterizationOrderAMD>> RasterizationOrderAMD_map = {
  {"RASTERIZATION ORDER STRICT AMD",  VK_RASTERIZATION_ORDER_STRICT_AMD},
  {"RASTERIZATION ORDER RELAXED AMD",  VK_RASTERIZATION_ORDER_RELAXED_AMD},
};
const std::vector<std::pair<std::string, VkShaderInfoTypeAMD>> ShaderInfoTypeAMD_map = {
  {"SHADER INFO TYPE STATISTICS AMD",  VK_SHADER_INFO_TYPE_STATISTICS_AMD},
  {"SHADER INFO TYPE BINARY AMD",  VK_SHADER_INFO_TYPE_BINARY_AMD},
  {"SHADER INFO TYPE DISASSEMBLY AMD",  VK_SHADER_INFO_TYPE_DISASSEMBLY_AMD},
};
const std::vector<std::pair<std::string, VkExternalMemoryHandleTypeFlagBitsNV>> ExternalMemoryHandleTypeFlagBitsNV_map = {
  {"EXTERNAL MEMORY HANDLE TYPE OPAQUE WIN32 BIT NV",  VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_NV},
  {"EXTERNAL MEMORY HANDLE TYPE OPAQUE WIN32 KMT BIT NV",  VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_NV},
  {"EXTERNAL MEMORY HANDLE TYPE D3D11 IMAGE BIT NV",  VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_BIT_NV},
  {"EXTERNAL MEMORY HANDLE TYPE D3D11 IMAGE KMT BIT NV",  VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_KMT_BIT_NV},
};
const std::vector<std::pair<std::string, VkExternalMemoryFeatureFlagBitsNV>> ExternalMemoryFeatureFlagBitsNV_map = {
  {"EXTERNAL MEMORY FEATURE DEDICATED ONLY BIT NV",  VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_NV},
  {"EXTERNAL MEMORY FEATURE EXPORTABLE BIT NV",  VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_NV},
  {"EXTERNAL MEMORY FEATURE IMPORTABLE BIT NV",  VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_NV},
};
const std::vector<std::pair<std::string, VkValidationCheckEXT>> ValidationCheckEXT_map = {
  {"VALIDATION CHECK ALL EXT",  VK_VALIDATION_CHECK_ALL_EXT},
  {"VALIDATION CHECK SHADERS EXT",  VK_VALIDATION_CHECK_SHADERS_EXT},
};
const std::vector<std::pair<std::string, VkConditionalRenderingFlagBitsEXT>> ConditionalRenderingFlagBitsEXT_map = {
  {"CONDITIONAL RENDERING INVERTED BIT EXT",  VK_CONDITIONAL_RENDERING_INVERTED_BIT_EXT},
};
const std::vector<std::pair<std::string, VkSurfaceCounterFlagBitsEXT>> SurfaceCounterFlagBitsEXT_map = {
  {"SURFACE COUNTER VBLANK BIT EXT",  VK_SURFACE_COUNTER_VBLANK_BIT_EXT},
  {"SURFACE COUNTER VBLANK EXT",  VK_SURFACE_COUNTER_VBLANK_EXT},
};
const std::vector<std::pair<std::string, VkDisplayPowerStateEXT>> DisplayPowerStateEXT_map = {
  {"DISPLAY POWER STATE OFF EXT",  VK_DISPLAY_POWER_STATE_OFF_EXT},
  {"DISPLAY POWER STATE SUSPEND EXT",  VK_DISPLAY_POWER_STATE_SUSPEND_EXT},
  {"DISPLAY POWER STATE ON EXT",  VK_DISPLAY_POWER_STATE_ON_EXT},
};
const std::vector<std::pair<std::string, VkDeviceEventTypeEXT>> DeviceEventTypeEXT_map = {
  {"DEVICE EVENT TYPE DISPLAY HOTPLUG EXT",  VK_DEVICE_EVENT_TYPE_DISPLAY_HOTPLUG_EXT},
};
const std::vector<std::pair<std::string, VkDisplayEventTypeEXT>> DisplayEventTypeEXT_map = {
  {"DISPLAY EVENT TYPE FIRST PIXEL OUT EXT",  VK_DISPLAY_EVENT_TYPE_FIRST_PIXEL_OUT_EXT},
};
const std::vector<std::pair<std::string, VkViewportCoordinateSwizzleNV>> ViewportCoordinateSwizzleNV_map = {
  {"VIEWPORT COORDINATE SWIZZLE POSITIVE X NV",  VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_X_NV},
  {"VIEWPORT COORDINATE SWIZZLE NEGATIVE X NV",  VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_X_NV},
  {"VIEWPORT COORDINATE SWIZZLE POSITIVE Y NV",  VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Y_NV},
  {"VIEWPORT COORDINATE SWIZZLE NEGATIVE Y NV",  VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Y_NV},
  {"VIEWPORT COORDINATE SWIZZLE POSITIVE Z NV",  VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Z_NV},
  {"VIEWPORT COORDINATE SWIZZLE NEGATIVE Z NV",  VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Z_NV},
  {"VIEWPORT COORDINATE SWIZZLE POSITIVE W NV",  VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_W_NV},
  {"VIEWPORT COORDINATE SWIZZLE NEGATIVE W NV",  VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_W_NV},
};
const std::vector<std::pair<std::string, VkDiscardRectangleModeEXT>> DiscardRectangleModeEXT_map = {
  {"DISCARD RECTANGLE MODE INCLUSIVE EXT",  VK_DISCARD_RECTANGLE_MODE_INCLUSIVE_EXT},
  {"DISCARD RECTANGLE MODE EXCLUSIVE EXT",  VK_DISCARD_RECTANGLE_MODE_EXCLUSIVE_EXT},
};
const std::vector<std::pair<std::string, VkConservativeRasterizationModeEXT>> ConservativeRasterizationModeEXT_map = {
  {"CONSERVATIVE RASTERIZATION MODE DISABLED EXT",  VK_CONSERVATIVE_RASTERIZATION_MODE_DISABLED_EXT},
  {"CONSERVATIVE RASTERIZATION MODE OVERESTIMATE EXT",  VK_CONSERVATIVE_RASTERIZATION_MODE_OVERESTIMATE_EXT},
  {"CONSERVATIVE RASTERIZATION MODE UNDERESTIMATE EXT",  VK_CONSERVATIVE_RASTERIZATION_MODE_UNDERESTIMATE_EXT},
};
const std::vector<std::pair<std::string, VkDebugUtilsMessageSeverityFlagBitsEXT>> DebugUtilsMessageSeverityFlagBitsEXT_map = {
  {"DEBUG UTILS MESSAGE SEVERITY VERBOSE BIT EXT",  VK_DEBUG_UTILS_MESSAGE_SEVERITY_VERBOSE_BIT_EXT},
  {"DEBUG UTILS MESSAGE SEVERITY INFO BIT EXT",  VK_DEBUG_UTILS_MESSAGE_SEVERITY_INFO_BIT_EXT},
  {"DEBUG UTILS MESSAGE SEVERITY WARNING BIT EXT",  VK_DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT},
  {"DEBUG UTILS MESSAGE SEVERITY ERROR BIT EXT",  VK_DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT},
};
const std::vector<std::pair<std::string, VkDebugUtilsMessageTypeFlagBitsEXT>> DebugUtilsMessageTypeFlagBitsEXT_map = {
  {"DEBUG UTILS MESSAGE TYPE GENERAL BIT EXT",  VK_DEBUG_UTILS_MESSAGE_TYPE_GENERAL_BIT_EXT},
  {"DEBUG UTILS MESSAGE TYPE VALIDATION BIT EXT",  VK_DEBUG_UTILS_MESSAGE_TYPE_VALIDATION_BIT_EXT},
  {"DEBUG UTILS MESSAGE TYPE PERFORMANCE BIT EXT",  VK_DEBUG_UTILS_MESSAGE_TYPE_PERFORMANCE_BIT_EXT},
};
const std::vector<std::pair<std::string, VkBlendOverlapEXT>> BlendOverlapEXT_map = {
  {"BLEND OVERLAP UNCORRELATED EXT",  VK_BLEND_OVERLAP_UNCORRELATED_EXT},
  {"BLEND OVERLAP DISJOINT EXT",  VK_BLEND_OVERLAP_DISJOINT_EXT},
  {"BLEND OVERLAP CONJOINT EXT",  VK_BLEND_OVERLAP_CONJOINT_EXT},
};
const std::vector<std::pair<std::string, VkCoverageModulationModeNV>> CoverageModulationModeNV_map = {
  {"COVERAGE MODULATION MODE NONE NV",  VK_COVERAGE_MODULATION_MODE_NONE_NV},
  {"COVERAGE MODULATION MODE RGB NV",  VK_COVERAGE_MODULATION_MODE_RGB_NV},
  {"COVERAGE MODULATION MODE ALPHA NV",  VK_COVERAGE_MODULATION_MODE_ALPHA_NV},
  {"COVERAGE MODULATION MODE RGBA NV",  VK_COVERAGE_MODULATION_MODE_RGBA_NV},
};
const std::vector<std::pair<std::string, VkValidationCacheHeaderVersionEXT>> ValidationCacheHeaderVersionEXT_map = {
  {"VALIDATION CACHE HEADER VERSION ONE EXT",  VK_VALIDATION_CACHE_HEADER_VERSION_ONE_EXT},
};
const std::vector<std::pair<std::string, VkShadingRatePaletteEntryNV>> ShadingRatePaletteEntryNV_map = {
  {"SHADING RATE PALETTE ENTRY NO INVOCATIONS NV",  VK_SHADING_RATE_PALETTE_ENTRY_NO_INVOCATIONS_NV},
  {"SHADING RATE PALETTE ENTRY 16 INVOCATIONS PER PIXEL NV",  VK_SHADING_RATE_PALETTE_ENTRY_16_INVOCATIONS_PER_PIXEL_NV},
  {"SHADING RATE PALETTE ENTRY 8 INVOCATIONS PER PIXEL NV",  VK_SHADING_RATE_PALETTE_ENTRY_8_INVOCATIONS_PER_PIXEL_NV},
  {"SHADING RATE PALETTE ENTRY 4 INVOCATIONS PER PIXEL NV",  VK_SHADING_RATE_PALETTE_ENTRY_4_INVOCATIONS_PER_PIXEL_NV},
  {"SHADING RATE PALETTE ENTRY 2 INVOCATIONS PER PIXEL NV",  VK_SHADING_RATE_PALETTE_ENTRY_2_INVOCATIONS_PER_PIXEL_NV},
  {"SHADING RATE PALETTE ENTRY 1 INVOCATION PER PIXEL NV",  VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_PIXEL_NV},
  {"SHADING RATE PALETTE ENTRY 1 INVOCATION PER 2X1 PIXELS NV",  VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X1_PIXELS_NV},
  {"SHADING RATE PALETTE ENTRY 1 INVOCATION PER 1X2 PIXELS NV",  VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_1X2_PIXELS_NV},
  {"SHADING RATE PALETTE ENTRY 1 INVOCATION PER 2X2 PIXELS NV",  VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X2_PIXELS_NV},
  {"SHADING RATE PALETTE ENTRY 1 INVOCATION PER 4X2 PIXELS NV",  VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X2_PIXELS_NV},
  {"SHADING RATE PALETTE ENTRY 1 INVOCATION PER 2X4 PIXELS NV",  VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X4_PIXELS_NV},
  {"SHADING RATE PALETTE ENTRY 1 INVOCATION PER 4X4 PIXELS NV",  VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X4_PIXELS_NV},
};
const std::vector<std::pair<std::string, VkCoarseSampleOrderTypeNV>> CoarseSampleOrderTypeNV_map = {
  {"COARSE SAMPLE ORDER TYPE DEFAULT NV",  VK_COARSE_SAMPLE_ORDER_TYPE_DEFAULT_NV},
  {"COARSE SAMPLE ORDER TYPE CUSTOM NV",  VK_COARSE_SAMPLE_ORDER_TYPE_CUSTOM_NV},
  {"COARSE SAMPLE ORDER TYPE PIXEL MAJOR NV",  VK_COARSE_SAMPLE_ORDER_TYPE_PIXEL_MAJOR_NV},
  {"COARSE SAMPLE ORDER TYPE SAMPLE MAJOR NV",  VK_COARSE_SAMPLE_ORDER_TYPE_SAMPLE_MAJOR_NV},
};
const std::vector<std::pair<std::string, VkRayTracingShaderGroupTypeKHR>> RayTracingShaderGroupTypeKHR_map = {
  {"RAY TRACING SHADER GROUP TYPE GENERAL KHR",  VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_KHR},
  {"RAY TRACING SHADER GROUP TYPE TRIANGLES HIT GROUP KHR",  VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_KHR},
  {"RAY TRACING SHADER GROUP TYPE PROCEDURAL HIT GROUP KHR",  VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_KHR},
  {"RAY TRACING SHADER GROUP TYPE GENERAL NV",  VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_NV},
  {"RAY TRACING SHADER GROUP TYPE TRIANGLES HIT GROUP NV",  VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_NV},
  {"RAY TRACING SHADER GROUP TYPE PROCEDURAL HIT GROUP NV",  VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_NV},
};
const std::vector<std::pair<std::string, VkGeometryTypeKHR>> GeometryTypeKHR_map = {
  {"GEOMETRY TYPE TRIANGLES KHR",  VK_GEOMETRY_TYPE_TRIANGLES_KHR},
  {"GEOMETRY TYPE AABBS KHR",  VK_GEOMETRY_TYPE_AABBS_KHR},
  {"GEOMETRY TYPE INSTANCES KHR",  VK_GEOMETRY_TYPE_INSTANCES_KHR},
  {"GEOMETRY TYPE TRIANGLES NV",  VK_GEOMETRY_TYPE_TRIANGLES_NV},
  {"GEOMETRY TYPE AABBS NV",  VK_GEOMETRY_TYPE_AABBS_NV},
};
const std::vector<std::pair<std::string, VkAccelerationStructureTypeKHR>> AccelerationStructureTypeKHR_map = {
  {"ACCELERATION STRUCTURE TYPE TOP LEVEL KHR",  VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_KHR},
  {"ACCELERATION STRUCTURE TYPE BOTTOM LEVEL KHR",  VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_KHR},
  {"ACCELERATION STRUCTURE TYPE GENERIC KHR",  VK_ACCELERATION_STRUCTURE_TYPE_GENERIC_KHR},
  {"ACCELERATION STRUCTURE TYPE TOP LEVEL NV",  VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_NV},
  {"ACCELERATION STRUCTURE TYPE BOTTOM LEVEL NV",  VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_NV},
};
const std::vector<std::pair<std::string, VkCopyAccelerationStructureModeKHR>> CopyAccelerationStructureModeKHR_map = {
  {"COPY ACCELERATION STRUCTURE MODE CLONE KHR",  VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_KHR},
  {"COPY ACCELERATION STRUCTURE MODE COMPACT KHR",  VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_KHR},
  {"COPY ACCELERATION STRUCTURE MODE SERIALIZE KHR",  VK_COPY_ACCELERATION_STRUCTURE_MODE_SERIALIZE_KHR},
  {"COPY ACCELERATION STRUCTURE MODE DESERIALIZE KHR",  VK_COPY_ACCELERATION_STRUCTURE_MODE_DESERIALIZE_KHR},
  {"COPY ACCELERATION STRUCTURE MODE CLONE NV",  VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_NV},
  {"COPY ACCELERATION STRUCTURE MODE COMPACT NV",  VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_NV},
};
const std::vector<std::pair<std::string, VkAccelerationStructureMemoryRequirementsTypeNV>> AccelerationStructureMemoryRequirementsTypeNV_map = {
  {"ACCELERATION STRUCTURE MEMORY REQUIREMENTS TYPE OBJECT NV",  VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_OBJECT_NV},
  {"ACCELERATION STRUCTURE MEMORY REQUIREMENTS TYPE BUILD SCRATCH NV",  VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_BUILD_SCRATCH_NV},
  {"ACCELERATION STRUCTURE MEMORY REQUIREMENTS TYPE UPDATE SCRATCH NV",  VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_UPDATE_SCRATCH_NV},
};
const std::vector<std::pair<std::string, VkGeometryFlagBitsKHR>> GeometryFlagBitsKHR_map = {
  {"GEOMETRY OPAQUE BIT KHR",  VK_GEOMETRY_OPAQUE_BIT_KHR},
  {"GEOMETRY NO DUPLICATE ANY HIT INVOCATION BIT KHR",  VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_KHR},
  {"GEOMETRY OPAQUE BIT NV",  VK_GEOMETRY_OPAQUE_BIT_NV},
  {"GEOMETRY NO DUPLICATE ANY HIT INVOCATION BIT NV",  VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_NV},
};
const std::vector<std::pair<std::string, VkGeometryInstanceFlagBitsKHR>> GeometryInstanceFlagBitsKHR_map = {
  {"GEOMETRY INSTANCE TRIANGLE FACING CULL DISABLE BIT KHR",  VK_GEOMETRY_INSTANCE_TRIANGLE_FACING_CULL_DISABLE_BIT_KHR},
  {"GEOMETRY INSTANCE TRIANGLE FRONT COUNTERCLOCKWISE BIT KHR",  VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_KHR},
  {"GEOMETRY INSTANCE FORCE OPAQUE BIT KHR",  VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_KHR},
  {"GEOMETRY INSTANCE FORCE NO OPAQUE BIT KHR",  VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_KHR},
  {"GEOMETRY INSTANCE TRIANGLE CULL DISABLE BIT NV",  VK_GEOMETRY_INSTANCE_TRIANGLE_CULL_DISABLE_BIT_NV},
  {"GEOMETRY INSTANCE TRIANGLE FRONT COUNTERCLOCKWISE BIT NV",  VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_NV},
  {"GEOMETRY INSTANCE FORCE OPAQUE BIT NV",  VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_NV},
  {"GEOMETRY INSTANCE FORCE NO OPAQUE BIT NV",  VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_NV},
};
const std::vector<std::pair<std::string, VkBuildAccelerationStructureFlagBitsKHR>> BuildAccelerationStructureFlagBitsKHR_map = {
  {"BUILD ACCELERATION STRUCTURE ALLOW UPDATE BIT KHR",  VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_KHR},
  {"BUILD ACCELERATION STRUCTURE ALLOW COMPACTION BIT KHR",  VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_KHR},
  {"BUILD ACCELERATION STRUCTURE PREFER FAST TRACE BIT KHR",  VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_KHR},
  {"BUILD ACCELERATION STRUCTURE PREFER FAST BUILD BIT KHR",  VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_KHR},
  {"BUILD ACCELERATION STRUCTURE LOW MEMORY BIT KHR",  VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_KHR},
  {"BUILD ACCELERATION STRUCTURE ALLOW UPDATE BIT NV",  VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_NV},
  {"BUILD ACCELERATION STRUCTURE ALLOW COMPACTION BIT NV",  VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_NV},
  {"BUILD ACCELERATION STRUCTURE PREFER FAST TRACE BIT NV",  VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_NV},
  {"BUILD ACCELERATION STRUCTURE PREFER FAST BUILD BIT NV",  VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_NV},
  {"BUILD ACCELERATION STRUCTURE LOW MEMORY BIT NV",  VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_NV},
};
const std::vector<std::pair<std::string, VkQueueGlobalPriorityEXT>> QueueGlobalPriorityEXT_map = {
  {"QUEUE GLOBAL PRIORITY LOW EXT",  VK_QUEUE_GLOBAL_PRIORITY_LOW_EXT},
  {"QUEUE GLOBAL PRIORITY MEDIUM EXT",  VK_QUEUE_GLOBAL_PRIORITY_MEDIUM_EXT},
  {"QUEUE GLOBAL PRIORITY HIGH EXT",  VK_QUEUE_GLOBAL_PRIORITY_HIGH_EXT},
  {"QUEUE GLOBAL PRIORITY REALTIME EXT",  VK_QUEUE_GLOBAL_PRIORITY_REALTIME_EXT},
};
const std::vector<std::pair<std::string, VkPipelineCompilerControlFlagBitsAMD>> PipelineCompilerControlFlagBitsAMD_map = {
};
const std::vector<std::pair<std::string, VkTimeDomainEXT>> TimeDomainEXT_map = {
  {"TIME DOMAIN DEVICE EXT",  VK_TIME_DOMAIN_DEVICE_EXT},
  {"TIME DOMAIN CLOCK MONOTONIC EXT",  VK_TIME_DOMAIN_CLOCK_MONOTONIC_EXT},
  {"TIME DOMAIN CLOCK MONOTONIC RAW EXT",  VK_TIME_DOMAIN_CLOCK_MONOTONIC_RAW_EXT},
  {"TIME DOMAIN QUERY PERFORMANCE COUNTER EXT",  VK_TIME_DOMAIN_QUERY_PERFORMANCE_COUNTER_EXT},
};
const std::vector<std::pair<std::string, VkMemoryOverallocationBehaviorAMD>> MemoryOverallocationBehaviorAMD_map = {
  {"MEMORY OVERALLOCATION BEHAVIOR DEFAULT AMD",  VK_MEMORY_OVERALLOCATION_BEHAVIOR_DEFAULT_AMD},
  {"MEMORY OVERALLOCATION BEHAVIOR ALLOWED AMD",  VK_MEMORY_OVERALLOCATION_BEHAVIOR_ALLOWED_AMD},
  {"MEMORY OVERALLOCATION BEHAVIOR DISALLOWED AMD",  VK_MEMORY_OVERALLOCATION_BEHAVIOR_DISALLOWED_AMD},
};
const std::vector<std::pair<std::string, VkPipelineCreationFeedbackFlagBitsEXT>> PipelineCreationFeedbackFlagBitsEXT_map = {
  {"PIPELINE CREATION FEEDBACK VALID BIT EXT",  VK_PIPELINE_CREATION_FEEDBACK_VALID_BIT_EXT},
  {"PIPELINE CREATION FEEDBACK APPLICATION PIPELINE CACHE HIT BIT EXT",  VK_PIPELINE_CREATION_FEEDBACK_APPLICATION_PIPELINE_CACHE_HIT_BIT_EXT},
  {"PIPELINE CREATION FEEDBACK BASE PIPELINE ACCELERATION BIT EXT",  VK_PIPELINE_CREATION_FEEDBACK_BASE_PIPELINE_ACCELERATION_BIT_EXT},
};
const std::vector<std::pair<std::string, VkPerformanceConfigurationTypeINTEL>> PerformanceConfigurationTypeINTEL_map = {
  {"PERFORMANCE CONFIGURATION TYPE COMMAND QUEUE METRICS DISCOVERY ACTIVATED INTEL",  VK_PERFORMANCE_CONFIGURATION_TYPE_COMMAND_QUEUE_METRICS_DISCOVERY_ACTIVATED_INTEL},
};
const std::vector<std::pair<std::string, VkQueryPoolSamplingModeINTEL>> QueryPoolSamplingModeINTEL_map = {
  {"QUERY POOL SAMPLING MODE MANUAL INTEL",  VK_QUERY_POOL_SAMPLING_MODE_MANUAL_INTEL},
};
const std::vector<std::pair<std::string, VkPerformanceOverrideTypeINTEL>> PerformanceOverrideTypeINTEL_map = {
  {"PERFORMANCE OVERRIDE TYPE NULL HARDWARE INTEL",  VK_PERFORMANCE_OVERRIDE_TYPE_NULL_HARDWARE_INTEL},
  {"PERFORMANCE OVERRIDE TYPE FLUSH GPU CACHES INTEL",  VK_PERFORMANCE_OVERRIDE_TYPE_FLUSH_GPU_CACHES_INTEL},
};
const std::vector<std::pair<std::string, VkPerformanceParameterTypeINTEL>> PerformanceParameterTypeINTEL_map = {
  {"PERFORMANCE PARAMETER TYPE HW COUNTERS SUPPORTED INTEL",  VK_PERFORMANCE_PARAMETER_TYPE_HW_COUNTERS_SUPPORTED_INTEL},
  {"PERFORMANCE PARAMETER TYPE STREAM MARKER VALID BITS INTEL",  VK_PERFORMANCE_PARAMETER_TYPE_STREAM_MARKER_VALID_BITS_INTEL},
};
const std::vector<std::pair<std::string, VkPerformanceValueTypeINTEL>> PerformanceValueTypeINTEL_map = {
  {"PERFORMANCE VALUE TYPE UINT32 INTEL",  VK_PERFORMANCE_VALUE_TYPE_UINT32_INTEL},
  {"PERFORMANCE VALUE TYPE UINT64 INTEL",  VK_PERFORMANCE_VALUE_TYPE_UINT64_INTEL},
  {"PERFORMANCE VALUE TYPE FLOAT INTEL",  VK_PERFORMANCE_VALUE_TYPE_FLOAT_INTEL},
  {"PERFORMANCE VALUE TYPE BOOL INTEL",  VK_PERFORMANCE_VALUE_TYPE_BOOL_INTEL},
  {"PERFORMANCE VALUE TYPE STRING INTEL",  VK_PERFORMANCE_VALUE_TYPE_STRING_INTEL},
};
const std::vector<std::pair<std::string, VkShaderCorePropertiesFlagBitsAMD>> ShaderCorePropertiesFlagBitsAMD_map = {
};
const std::vector<std::pair<std::string, VkToolPurposeFlagBitsEXT>> ToolPurposeFlagBitsEXT_map = {
  {"TOOL PURPOSE VALIDATION BIT EXT",  VK_TOOL_PURPOSE_VALIDATION_BIT_EXT},
  {"TOOL PURPOSE PROFILING BIT EXT",  VK_TOOL_PURPOSE_PROFILING_BIT_EXT},
  {"TOOL PURPOSE TRACING BIT EXT",  VK_TOOL_PURPOSE_TRACING_BIT_EXT},
  {"TOOL PURPOSE ADDITIONAL FEATURES BIT EXT",  VK_TOOL_PURPOSE_ADDITIONAL_FEATURES_BIT_EXT},
  {"TOOL PURPOSE MODIFYING FEATURES BIT EXT",  VK_TOOL_PURPOSE_MODIFYING_FEATURES_BIT_EXT},
  {"TOOL PURPOSE DEBUG REPORTING BIT EXT",  VK_TOOL_PURPOSE_DEBUG_REPORTING_BIT_EXT},
  {"TOOL PURPOSE DEBUG MARKERS BIT EXT",  VK_TOOL_PURPOSE_DEBUG_MARKERS_BIT_EXT},
};
const std::vector<std::pair<std::string, VkValidationFeatureEnableEXT>> ValidationFeatureEnableEXT_map = {
  {"VALIDATION FEATURE ENABLE GPU ASSISTED EXT",  VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_EXT},
  {"VALIDATION FEATURE ENABLE GPU ASSISTED RESERVE BINDING SLOT EXT",  VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_RESERVE_BINDING_SLOT_EXT},
  {"VALIDATION FEATURE ENABLE BEST PRACTICES EXT",  VK_VALIDATION_FEATURE_ENABLE_BEST_PRACTICES_EXT},
  {"VALIDATION FEATURE ENABLE DEBUG PRINTF EXT",  VK_VALIDATION_FEATURE_ENABLE_DEBUG_PRINTF_EXT},
  {"VALIDATION FEATURE ENABLE SYNCHRONIZATION VALIDATION EXT",  VK_VALIDATION_FEATURE_ENABLE_SYNCHRONIZATION_VALIDATION_EXT},
};
const std::vector<std::pair<std::string, VkValidationFeatureDisableEXT>> ValidationFeatureDisableEXT_map = {
  {"VALIDATION FEATURE DISABLE ALL EXT",  VK_VALIDATION_FEATURE_DISABLE_ALL_EXT},
  {"VALIDATION FEATURE DISABLE SHADERS EXT",  VK_VALIDATION_FEATURE_DISABLE_SHADERS_EXT},
  {"VALIDATION FEATURE DISABLE THREAD SAFETY EXT",  VK_VALIDATION_FEATURE_DISABLE_THREAD_SAFETY_EXT},
  {"VALIDATION FEATURE DISABLE API PARAMETERS EXT",  VK_VALIDATION_FEATURE_DISABLE_API_PARAMETERS_EXT},
  {"VALIDATION FEATURE DISABLE OBJECT LIFETIMES EXT",  VK_VALIDATION_FEATURE_DISABLE_OBJECT_LIFETIMES_EXT},
  {"VALIDATION FEATURE DISABLE CORE CHECKS EXT",  VK_VALIDATION_FEATURE_DISABLE_CORE_CHECKS_EXT},
  {"VALIDATION FEATURE DISABLE UNIQUE HANDLES EXT",  VK_VALIDATION_FEATURE_DISABLE_UNIQUE_HANDLES_EXT},
};
const std::vector<std::pair<std::string, VkComponentTypeNV>> ComponentTypeNV_map = {
  {"COMPONENT TYPE FLOAT16 NV",  VK_COMPONENT_TYPE_FLOAT16_NV},
  {"COMPONENT TYPE FLOAT32 NV",  VK_COMPONENT_TYPE_FLOAT32_NV},
  {"COMPONENT TYPE FLOAT64 NV",  VK_COMPONENT_TYPE_FLOAT64_NV},
  {"COMPONENT TYPE SINT8 NV",  VK_COMPONENT_TYPE_SINT8_NV},
  {"COMPONENT TYPE SINT16 NV",  VK_COMPONENT_TYPE_SINT16_NV},
  {"COMPONENT TYPE SINT32 NV",  VK_COMPONENT_TYPE_SINT32_NV},
  {"COMPONENT TYPE SINT64 NV",  VK_COMPONENT_TYPE_SINT64_NV},
  {"COMPONENT TYPE UINT8 NV",  VK_COMPONENT_TYPE_UINT8_NV},
  {"COMPONENT TYPE UINT16 NV",  VK_COMPONENT_TYPE_UINT16_NV},
  {"COMPONENT TYPE UINT32 NV",  VK_COMPONENT_TYPE_UINT32_NV},
  {"COMPONENT TYPE UINT64 NV",  VK_COMPONENT_TYPE_UINT64_NV},
};
const std::vector<std::pair<std::string, VkScopeNV>> ScopeNV_map = {
  {"SCOPE DEVICE NV",  VK_SCOPE_DEVICE_NV},
  {"SCOPE WORKGROUP NV",  VK_SCOPE_WORKGROUP_NV},
  {"SCOPE SUBGROUP NV",  VK_SCOPE_SUBGROUP_NV},
  {"SCOPE QUEUE FAMILY NV",  VK_SCOPE_QUEUE_FAMILY_NV},
};
const std::vector<std::pair<std::string, VkCoverageReductionModeNV>> CoverageReductionModeNV_map = {
  {"COVERAGE REDUCTION MODE MERGE NV",  VK_COVERAGE_REDUCTION_MODE_MERGE_NV},
  {"COVERAGE REDUCTION MODE TRUNCATE NV",  VK_COVERAGE_REDUCTION_MODE_TRUNCATE_NV},
};
const std::vector<std::pair<std::string, VkLineRasterizationModeEXT>> LineRasterizationModeEXT_map = {
  {"LINE RASTERIZATION MODE DEFAULT EXT",  VK_LINE_RASTERIZATION_MODE_DEFAULT_EXT},
  {"LINE RASTERIZATION MODE RECTANGULAR EXT",  VK_LINE_RASTERIZATION_MODE_RECTANGULAR_EXT},
  {"LINE RASTERIZATION MODE BRESENHAM EXT",  VK_LINE_RASTERIZATION_MODE_BRESENHAM_EXT},
  {"LINE RASTERIZATION MODE RECTANGULAR SMOOTH EXT",  VK_LINE_RASTERIZATION_MODE_RECTANGULAR_SMOOTH_EXT},
};
const std::vector<std::pair<std::string, VkIndirectCommandsTokenTypeNV>> IndirectCommandsTokenTypeNV_map = {
  {"INDIRECT COMMANDS TOKEN TYPE SHADER GROUP NV",  VK_INDIRECT_COMMANDS_TOKEN_TYPE_SHADER_GROUP_NV},
  {"INDIRECT COMMANDS TOKEN TYPE STATE FLAGS NV",  VK_INDIRECT_COMMANDS_TOKEN_TYPE_STATE_FLAGS_NV},
  {"INDIRECT COMMANDS TOKEN TYPE INDEX BUFFER NV",  VK_INDIRECT_COMMANDS_TOKEN_TYPE_INDEX_BUFFER_NV},
  {"INDIRECT COMMANDS TOKEN TYPE VERTEX BUFFER NV",  VK_INDIRECT_COMMANDS_TOKEN_TYPE_VERTEX_BUFFER_NV},
  {"INDIRECT COMMANDS TOKEN TYPE PUSH CONSTANT NV",  VK_INDIRECT_COMMANDS_TOKEN_TYPE_PUSH_CONSTANT_NV},
  {"INDIRECT COMMANDS TOKEN TYPE DRAW INDEXED NV",  VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_INDEXED_NV},
  {"INDIRECT COMMANDS TOKEN TYPE DRAW NV",  VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_NV},
  {"INDIRECT COMMANDS TOKEN TYPE DRAW TASKS NV",  VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_TASKS_NV},
};
const std::vector<std::pair<std::string, VkIndirectStateFlagBitsNV>> IndirectStateFlagBitsNV_map = {
  {"INDIRECT STATE FLAG FRONTFACE BIT NV",  VK_INDIRECT_STATE_FLAG_FRONTFACE_BIT_NV},
};
const std::vector<std::pair<std::string, VkIndirectCommandsLayoutUsageFlagBitsNV>> IndirectCommandsLayoutUsageFlagBitsNV_map = {
  {"INDIRECT COMMANDS LAYOUT USAGE EXPLICIT PREPROCESS BIT NV",  VK_INDIRECT_COMMANDS_LAYOUT_USAGE_EXPLICIT_PREPROCESS_BIT_NV},
  {"INDIRECT COMMANDS LAYOUT USAGE INDEXED SEQUENCES BIT NV",  VK_INDIRECT_COMMANDS_LAYOUT_USAGE_INDEXED_SEQUENCES_BIT_NV},
  {"INDIRECT COMMANDS LAYOUT USAGE UNORDERED SEQUENCES BIT NV",  VK_INDIRECT_COMMANDS_LAYOUT_USAGE_UNORDERED_SEQUENCES_BIT_NV},
};
const std::vector<std::pair<std::string, VkDeviceMemoryReportEventTypeEXT>> DeviceMemoryReportEventTypeEXT_map = {
  {"DEVICE MEMORY REPORT EVENT TYPE ALLOCATE EXT",  VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_ALLOCATE_EXT},
  {"DEVICE MEMORY REPORT EVENT TYPE FREE EXT",  VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_FREE_EXT},
  {"DEVICE MEMORY REPORT EVENT TYPE IMPORT EXT",  VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_IMPORT_EXT},
  {"DEVICE MEMORY REPORT EVENT TYPE UNIMPORT EXT",  VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_UNIMPORT_EXT},
  {"DEVICE MEMORY REPORT EVENT TYPE ALLOCATION FAILED EXT",  VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_ALLOCATION_FAILED_EXT},
};
const std::vector<std::pair<std::string, VkPrivateDataSlotCreateFlagBitsEXT>> PrivateDataSlotCreateFlagBitsEXT_map = {
};
const std::vector<std::pair<std::string, VkDeviceDiagnosticsConfigFlagBitsNV>> DeviceDiagnosticsConfigFlagBitsNV_map = {
  {"DEVICE DIAGNOSTICS CONFIG ENABLE SHADER DEBUG INFO BIT NV",  VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_SHADER_DEBUG_INFO_BIT_NV},
  {"DEVICE DIAGNOSTICS CONFIG ENABLE RESOURCE TRACKING BIT NV",  VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_RESOURCE_TRACKING_BIT_NV},
  {"DEVICE DIAGNOSTICS CONFIG ENABLE AUTOMATIC CHECKPOINTS BIT NV",  VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_AUTOMATIC_CHECKPOINTS_BIT_NV},
};
const std::vector<std::pair<std::string, VkFragmentShadingRateTypeNV>> FragmentShadingRateTypeNV_map = {
  {"FRAGMENT SHADING RATE TYPE FRAGMENT SIZE NV",  VK_FRAGMENT_SHADING_RATE_TYPE_FRAGMENT_SIZE_NV},
  {"FRAGMENT SHADING RATE TYPE ENUMS NV",  VK_FRAGMENT_SHADING_RATE_TYPE_ENUMS_NV},
};
const std::vector<std::pair<std::string, VkFragmentShadingRateNV>> FragmentShadingRateNV_map = {
  {"FRAGMENT SHADING RATE 1 INVOCATION PER PIXEL NV",  VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_PIXEL_NV},
  {"FRAGMENT SHADING RATE 1 INVOCATION PER 1X2 PIXELS NV",  VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_1X2_PIXELS_NV},
  {"FRAGMENT SHADING RATE 1 INVOCATION PER 2X1 PIXELS NV",  VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X1_PIXELS_NV},
  {"FRAGMENT SHADING RATE 1 INVOCATION PER 2X2 PIXELS NV",  VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X2_PIXELS_NV},
  {"FRAGMENT SHADING RATE 1 INVOCATION PER 2X4 PIXELS NV",  VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X4_PIXELS_NV},
  {"FRAGMENT SHADING RATE 1 INVOCATION PER 4X2 PIXELS NV",  VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_4X2_PIXELS_NV},
  {"FRAGMENT SHADING RATE 1 INVOCATION PER 4X4 PIXELS NV",  VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_4X4_PIXELS_NV},
  {"FRAGMENT SHADING RATE 2 INVOCATIONS PER PIXEL NV",  VK_FRAGMENT_SHADING_RATE_2_INVOCATIONS_PER_PIXEL_NV},
  {"FRAGMENT SHADING RATE 4 INVOCATIONS PER PIXEL NV",  VK_FRAGMENT_SHADING_RATE_4_INVOCATIONS_PER_PIXEL_NV},
  {"FRAGMENT SHADING RATE 8 INVOCATIONS PER PIXEL NV",  VK_FRAGMENT_SHADING_RATE_8_INVOCATIONS_PER_PIXEL_NV},
  {"FRAGMENT SHADING RATE 16 INVOCATIONS PER PIXEL NV",  VK_FRAGMENT_SHADING_RATE_16_INVOCATIONS_PER_PIXEL_NV},
  {"FRAGMENT SHADING RATE NO INVOCATIONS NV",  VK_FRAGMENT_SHADING_RATE_NO_INVOCATIONS_NV},
};
const std::vector<std::pair<std::string, VkBuildAccelerationStructureModeKHR>> BuildAccelerationStructureModeKHR_map = {
  {"BUILD ACCELERATION STRUCTURE MODE BUILD KHR",  VK_BUILD_ACCELERATION_STRUCTURE_MODE_BUILD_KHR},
  {"BUILD ACCELERATION STRUCTURE MODE UPDATE KHR",  VK_BUILD_ACCELERATION_STRUCTURE_MODE_UPDATE_KHR},
};
const std::vector<std::pair<std::string, VkAccelerationStructureBuildTypeKHR>> AccelerationStructureBuildTypeKHR_map = {
  {"ACCELERATION STRUCTURE BUILD TYPE HOST KHR",  VK_ACCELERATION_STRUCTURE_BUILD_TYPE_HOST_KHR},
  {"ACCELERATION STRUCTURE BUILD TYPE DEVICE KHR",  VK_ACCELERATION_STRUCTURE_BUILD_TYPE_DEVICE_KHR},
  {"ACCELERATION STRUCTURE BUILD TYPE HOST OR DEVICE KHR",  VK_ACCELERATION_STRUCTURE_BUILD_TYPE_HOST_OR_DEVICE_KHR},
};
const std::vector<std::pair<std::string, VkAccelerationStructureCompatibilityKHR>> AccelerationStructureCompatibilityKHR_map = {
  {"ACCELERATION STRUCTURE COMPATIBILITY COMPATIBLE KHR",  VK_ACCELERATION_STRUCTURE_COMPATIBILITY_COMPATIBLE_KHR},
  {"ACCELERATION STRUCTURE COMPATIBILITY INCOMPATIBLE KHR",  VK_ACCELERATION_STRUCTURE_COMPATIBILITY_INCOMPATIBLE_KHR},
};
const std::vector<std::pair<std::string, VkAccelerationStructureCreateFlagBitsKHR>> AccelerationStructureCreateFlagBitsKHR_map = {
  {"ACCELERATION STRUCTURE CREATE DEVICE ADDRESS CAPTURE REPLAY BIT KHR",  VK_ACCELERATION_STRUCTURE_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR},
};
const std::vector<std::pair<std::string, VkShaderGroupShaderKHR>> ShaderGroupShaderKHR_map = {
  {"SHADER GROUP SHADER GENERAL KHR",  VK_SHADER_GROUP_SHADER_GENERAL_KHR},
  {"SHADER GROUP SHADER CLOSEST HIT KHR",  VK_SHADER_GROUP_SHADER_CLOSEST_HIT_KHR},
  {"SHADER GROUP SHADER ANY HIT KHR",  VK_SHADER_GROUP_SHADER_ANY_HIT_KHR},
  {"SHADER GROUP SHADER INTERSECTION KHR",  VK_SHADER_GROUP_SHADER_INTERSECTION_KHR},
};
